
ATM_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000013a2  00001436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800174  00800174  0000154a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f96  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c90  00000000  00000000  00003712  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f42  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  000052e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c6  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001033  00000000  00000000  00005d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <main>
      8a:	0c 94 cf 09 	jmp	0x139e	; 0x139e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HAL_Init>:
u8 pass[4] = "123";
u32 balance;

void HAL_Init()
{
	 LCD_voidInit();
      92:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_voidInit>
	 KEYPAD_voidInit();
      96:	0e 94 03 02 	call	0x406	; 0x406 <KEYPAD_voidInit>
	 LEDS_INIT();
      9a:	0e 94 c5 03 	call	0x78a	; 0x78a <LEDS_INIT>
      9e:	08 95       	ret

000000a0 <APP_voidWelcomeMessage>:
}

void APP_voidWelcomeMessage()
{
	 LCD_voidSendString("Hello :)");
      a0:	88 e6       	ldi	r24, 0x68	; 104
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a8:	2f e7       	ldi	r18, 0x7F	; 127
      aa:	8a e1       	ldi	r24, 0x1A	; 26
      ac:	96 e0       	ldi	r25, 0x06	; 6
      ae:	21 50       	subi	r18, 0x01	; 1
      b0:	80 40       	sbci	r24, 0x00	; 0
      b2:	90 40       	sbci	r25, 0x00	; 0
      b4:	e1 f7       	brne	.-8      	; 0xae <APP_voidWelcomeMessage+0xe>
      b6:	00 c0       	rjmp	.+0      	; 0xb8 <APP_voidWelcomeMessage+0x18>
      b8:	00 00       	nop
	  _delay_ms(2000);
	  LCD_voidClearScreen();
      ba:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
	  LCD_voidSendString("  Welcome to VS");
      be:	81 e7       	ldi	r24, 0x71	; 113
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
	  LCD_voidSetCursor(1,0);
      c6:	60 e0       	ldi	r22, 0x00	; 0
      c8:	81 e0       	ldi	r24, 0x01	; 1
      ca:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidSetCursor>
	  LCD_voidSendString("    System");
      ce:	81 e8       	ldi	r24, 0x81	; 129
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
      d6:	2f e7       	ldi	r18, 0x7F	; 127
      d8:	8a e1       	ldi	r24, 0x1A	; 26
      da:	96 e0       	ldi	r25, 0x06	; 6
      dc:	21 50       	subi	r18, 0x01	; 1
      de:	80 40       	sbci	r24, 0x00	; 0
      e0:	90 40       	sbci	r25, 0x00	; 0
      e2:	e1 f7       	brne	.-8      	; 0xdc <APP_voidWelcomeMessage+0x3c>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <APP_voidWelcomeMessage+0x46>
      e6:	00 00       	nop
      e8:	08 95       	ret

000000ea <APP_voidCheckPassword>:
	  _delay_ms(2000);
}

void APP_voidCheckPassword()
{
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	00 d0       	rcall	.+0      	; 0xf6 <APP_voidCheckPassword+0xc>
      f6:	00 d0       	rcall	.+0      	; 0xf8 <APP_voidCheckPassword+0xe>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	u8 login_flag = 0;
      fc:	10 e0       	ldi	r17, 0x00	; 0
	do 
	{
		u8 input_pass[4] = "xxx";
      fe:	88 e7       	ldi	r24, 0x78	; 120
     100:	98 e7       	ldi	r25, 0x78	; 120
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
     106:	88 e7       	ldi	r24, 0x78	; 120
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	9c 83       	std	Y+4, r25	; 0x04
     10c:	8b 83       	std	Y+3, r24	; 0x03
		LCD_voidClearScreen();
     10e:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
		if(!login_flag)
     112:	11 11       	cpse	r17, r1
     114:	05 c0       	rjmp	.+10     	; 0x120 <APP_voidCheckPassword+0x36>
			LCD_voidSendString("Enter password :");
     116:	8c e8       	ldi	r24, 0x8C	; 140
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
     11e:	04 c0       	rjmp	.+8      	; 0x128 <APP_voidCheckPassword+0x3e>
		else
			LCD_voidSendString("Reenter ur pass");
     120:	8d e9       	ldi	r24, 0x9D	; 157
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
		LCD_voidSetCursor(1,0);
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidSetCursor>
		for(u8 i = 0 ; i < 3 ; i++)
     130:	f1 2c       	mov	r15, r1
     132:	17 c0       	rjmp	.+46     	; 0x162 <APP_voidCheckPassword+0x78>
		{
			while(input_pass[i] == 'x')
			input_pass[i] = KEYPAD_READ();
     134:	0e 94 14 02 	call	0x428	; 0x428 <KEYPAD_READ>
     138:	e1 e0       	ldi	r30, 0x01	; 1
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	ec 0f       	add	r30, r28
     13e:	fd 1f       	adc	r31, r29
     140:	e0 0f       	add	r30, r16
     142:	f1 1f       	adc	r31, r17
     144:	80 83       	st	Z, r24
		else
			LCD_voidSendString("Reenter ur pass");
		LCD_voidSetCursor(1,0);
		for(u8 i = 0 ; i < 3 ; i++)
		{
			while(input_pass[i] == 'x')
     146:	0f 2d       	mov	r16, r15
     148:	10 e0       	ldi	r17, 0x00	; 0
     14a:	e1 e0       	ldi	r30, 0x01	; 1
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	ec 0f       	add	r30, r28
     150:	fd 1f       	adc	r31, r29
     152:	e0 0f       	add	r30, r16
     154:	f1 1f       	adc	r31, r17
     156:	80 81       	ld	r24, Z
     158:	88 37       	cpi	r24, 0x78	; 120
     15a:	61 f3       	breq	.-40     	; 0x134 <APP_voidCheckPassword+0x4a>
			input_pass[i] = KEYPAD_READ();
			LCD_voidSendData(input_pass[i]);
     15c:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_voidSendData>
		if(!login_flag)
			LCD_voidSendString("Enter password :");
		else
			LCD_voidSendString("Reenter ur pass");
		LCD_voidSetCursor(1,0);
		for(u8 i = 0 ; i < 3 ; i++)
     160:	f3 94       	inc	r15
     162:	22 e0       	ldi	r18, 0x02	; 2
     164:	2f 15       	cp	r18, r15
     166:	78 f7       	brcc	.-34     	; 0x146 <APP_voidCheckPassword+0x5c>
     168:	8f e3       	ldi	r24, 0x3F	; 63
     16a:	9d e0       	ldi	r25, 0x0D	; 13
     16c:	23 e0       	ldi	r18, 0x03	; 3
     16e:	81 50       	subi	r24, 0x01	; 1
     170:	90 40       	sbci	r25, 0x00	; 0
     172:	20 40       	sbci	r18, 0x00	; 0
     174:	e1 f7       	brne	.-8      	; 0x16e <APP_voidCheckPassword+0x84>
     176:	00 c0       	rjmp	.+0      	; 0x178 <APP_voidCheckPassword+0x8e>
     178:	00 00       	nop
			while(input_pass[i] == 'x')
			input_pass[i] = KEYPAD_READ();
			LCD_voidSendData(input_pass[i]);
		}
		_delay_ms(1000);
		LCD_voidClearScreen();
     17a:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
		if(!strcmp(input_pass,pass))
     17e:	60 e6       	ldi	r22, 0x60	; 96
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	ce 01       	movw	r24, r28
     184:	01 96       	adiw	r24, 0x01	; 1
     186:	0e 94 8d 06 	call	0xd1a	; 0xd1a <strcmp>
     18a:	89 2b       	or	r24, r25
     18c:	49 f4       	brne	.+18     	; 0x1a0 <APP_voidCheckPassword+0xb6>
		{
			login_flag = 0;
			LCD_voidSendString("Correct Password!");
     18e:	8d ea       	ldi	r24, 0xAD	; 173
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
			LED_TOGGLE(GREEN_LED);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 03 04 	call	0x806	; 0x806 <LED_TOGGLE>
		}
		_delay_ms(1000);
		LCD_voidClearScreen();
		if(!strcmp(input_pass,pass))
		{
			login_flag = 0;
     19c:	10 e0       	ldi	r17, 0x00	; 0
     19e:	08 c0       	rjmp	.+16     	; 0x1b0 <APP_voidCheckPassword+0xc6>
			LED_TOGGLE(GREEN_LED);
		}
		else
		{
			login_flag = 1;
			LCD_voidSendString("Incorrect Pass!!");
     1a0:	8f eb       	ldi	r24, 0xBF	; 191
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
			//BUZZER_TOGGLE();
			LED_TOGGLE(RED_LED);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	0e 94 03 04 	call	0x806	; 0x806 <LED_TOGGLE>
			LCD_voidSendString("Correct Password!");
			LED_TOGGLE(GREEN_LED);
		}
		else
		{
			login_flag = 1;
     1ae:	11 e0       	ldi	r17, 0x01	; 1
			LCD_voidSendString("Incorrect Pass!!");
			//BUZZER_TOGGLE();
			LED_TOGGLE(RED_LED);
		}
	} while (login_flag == 1);
     1b0:	11 30       	cpi	r17, 0x01	; 1
     1b2:	09 f4       	brne	.+2      	; 0x1b6 <APP_voidCheckPassword+0xcc>
     1b4:	a4 cf       	rjmp	.-184    	; 0xfe <APP_voidCheckPassword+0x14>
	
}
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	08 95       	ret

000001ca <APP_u8KeypadInput>:

u8 APP_u8KeypadInput()
{
	u8 user_choice = 'x';
     1ca:	88 e7       	ldi	r24, 0x78	; 120
	while(user_choice == 'x')
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <APP_u8KeypadInput+0x8>
		user_choice = KEYPAD_READ();
     1ce:	0e 94 14 02 	call	0x428	; 0x428 <KEYPAD_READ>
}

u8 APP_u8KeypadInput()
{
	u8 user_choice = 'x';
	while(user_choice == 'x')
     1d2:	88 37       	cpi	r24, 0x78	; 120
     1d4:	e1 f3       	breq	.-8      	; 0x1ce <APP_u8KeypadInput+0x4>
		user_choice = KEYPAD_READ();
	return user_choice;
}
     1d6:	08 95       	ret

000001d8 <APP_voidEnterDepositAmount>:
		
	}
}

void APP_voidEnterDepositAmount()
{
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	60 97       	sbiw	r28, 0x10	; 16
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendString("Enter deposit amount:");
     1f2:	80 ed       	ldi	r24, 0xD0	; 208
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
	u8 deposit_amount[16] = "";
     1fa:	1a 82       	std	Y+2, r1	; 0x02
     1fc:	19 82       	std	Y+1, r1	; 0x01
     1fe:	fe 01       	movw	r30, r28
     200:	33 96       	adiw	r30, 0x03	; 3
     202:	8e e0       	ldi	r24, 0x0E	; 14
     204:	df 01       	movw	r26, r30
     206:	1d 92       	st	X+, r1
     208:	8a 95       	dec	r24
     20a:	e9 f7       	brne	.-6      	; 0x206 <APP_voidEnterDepositAmount+0x2e>
	u8 i = 0;
	LCD_voidSetCursor(1,0);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidSetCursor>

void APP_voidEnterDepositAmount()
{
	LCD_voidSendString("Enter deposit amount:");
	u8 deposit_amount[16] = "";
	u8 i = 0;
     214:	f1 2c       	mov	r15, r1
	LCD_voidSetCursor(1,0);
	do
	{
		deposit_amount[i] = APP_u8KeypadInput();
     216:	0f 2d       	mov	r16, r15
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <APP_u8KeypadInput>
     21e:	e1 e0       	ldi	r30, 0x01	; 1
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	ec 0f       	add	r30, r28
     224:	fd 1f       	adc	r31, r29
     226:	e0 0f       	add	r30, r16
     228:	f1 1f       	adc	r31, r17
     22a:	80 83       	st	Z, r24
		if(deposit_amount[i] != '=')
     22c:	8d 33       	cpi	r24, 0x3D	; 61
     22e:	11 f0       	breq	.+4      	; 0x234 <APP_voidEnterDepositAmount+0x5c>
			LCD_voidSendData(deposit_amount[i]);
     230:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_voidSendData>
	}while(deposit_amount[i++] != '=');
     234:	f3 94       	inc	r15
     236:	e1 e0       	ldi	r30, 0x01	; 1
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	ec 0f       	add	r30, r28
     23c:	fd 1f       	adc	r31, r29
     23e:	e0 0f       	add	r30, r16
     240:	f1 1f       	adc	r31, r17
     242:	80 81       	ld	r24, Z
     244:	8d 33       	cpi	r24, 0x3D	; 61
     246:	39 f7       	brne	.-50     	; 0x216 <APP_voidEnterDepositAmount+0x3e>
	deposit_amount[i-1] = '\0';
     248:	ef 2d       	mov	r30, r15
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	8c 0f       	add	r24, r28
     254:	9d 1f       	adc	r25, r29
     256:	e8 0f       	add	r30, r24
     258:	f9 1f       	adc	r31, r25
     25a:	10 82       	st	Z, r1
	LCD_voidClearScreen();
     25c:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
	LCD_voidSendString("Successfully");
     260:	86 ee       	ldi	r24, 0xE6	; 230
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
	LCD_voidSetStringPos(1,0,"Deposited :)");
     268:	43 ef       	ldi	r20, 0xF3	; 243
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_voidSetStringPos>
	balance += strtol(deposit_amount,NULL,10);
     274:	4a e0       	ldi	r20, 0x0A	; 10
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 6e 05 	call	0xadc	; 0xadc <strtol>
     284:	09 2e       	mov	r0, r25
     286:	00 0c       	add	r0, r0
     288:	aa 0b       	sbc	r26, r26
     28a:	bb 0b       	sbc	r27, r27
     28c:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <__data_end>
     290:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <__data_end+0x1>
     294:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <__data_end+0x2>
     298:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <__data_end+0x3>
     29c:	84 0f       	add	r24, r20
     29e:	95 1f       	adc	r25, r21
     2a0:	a6 1f       	adc	r26, r22
     2a2:	b7 1f       	adc	r27, r23
     2a4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
     2a8:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <__data_end+0x1>
     2ac:	a0 93 76 01 	sts	0x0176, r26	; 0x800176 <__data_end+0x2>
     2b0:	b0 93 77 01 	sts	0x0177, r27	; 0x800177 <__data_end+0x3>
	
}
     2b4:	60 96       	adiw	r28, 0x10	; 16
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	08 95       	ret

000002cc <APP_voidConvertIntToStr>:
void APP_voidConvertIntToStr(u32 x, u8* str)
{
	sprintf(str,"%d",x);
     2cc:	9f 93       	push	r25
     2ce:	8f 93       	push	r24
     2d0:	7f 93       	push	r23
     2d2:	6f 93       	push	r22
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	9f 93       	push	r25
     2da:	8f 93       	push	r24
     2dc:	5f 93       	push	r21
     2de:	4f 93       	push	r20
     2e0:	0e 94 96 06 	call	0xd2c	; 0xd2c <sprintf>
}
     2e4:	8d b7       	in	r24, 0x3d	; 61
     2e6:	9e b7       	in	r25, 0x3e	; 62
     2e8:	08 96       	adiw	r24, 0x08	; 8
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	9e bf       	out	0x3e, r25	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	8d bf       	out	0x3d, r24	; 61
     2f4:	08 95       	ret

000002f6 <APP_voidViewBalance>:

void APP_voidViewBalance()
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	60 97       	sbiw	r28, 0x10	; 16
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
	u8 balance_str[16];
	LCD_voidSendString("Balance=");
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
	APP_voidConvertIntToStr(balance,balance_str);
     312:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <__data_end>
     316:	70 91 75 01 	lds	r23, 0x0175	; 0x800175 <__data_end+0x1>
     31a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end+0x2>
     31e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__data_end+0x3>
     322:	ae 01       	movw	r20, r28
     324:	4f 5f       	subi	r20, 0xFF	; 255
     326:	5f 4f       	sbci	r21, 0xFF	; 255
     328:	0e 94 66 01 	call	0x2cc	; 0x2cc <APP_voidConvertIntToStr>
	LCD_voidSetStringPos(1,0,balance_str);
     32c:	ae 01       	movw	r20, r28
     32e:	4f 5f       	subi	r20, 0xFF	; 255
     330:	5f 4f       	sbci	r21, 0xFF	; 255
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_voidSetStringPos>
     33a:	60 96       	adiw	r28, 0x10	; 16
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <APP_voidPrintMenu>:
		user_choice = KEYPAD_READ();
	return user_choice;
}

void APP_voidPrintMenu()
{
     34c:	cf 93       	push	r28
	LCD_voidSetStringPos(0,0,"1- Deposit Money");
     34e:	4c e0       	ldi	r20, 0x0C	; 12
     350:	51 e0       	ldi	r21, 0x01	; 1
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_voidSetStringPos>
	LCD_voidSetStringPos(1,0,"2- Withdraw Money");
     35a:	4d e1       	ldi	r20, 0x1D	; 29
     35c:	51 e0       	ldi	r21, 0x01	; 1
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_voidSetStringPos>
     366:	2f ed       	ldi	r18, 0xDF	; 223
     368:	83 e9       	ldi	r24, 0x93	; 147
     36a:	94 e0       	ldi	r25, 0x04	; 4
     36c:	21 50       	subi	r18, 0x01	; 1
     36e:	80 40       	sbci	r24, 0x00	; 0
     370:	90 40       	sbci	r25, 0x00	; 0
     372:	e1 f7       	brne	.-8      	; 0x36c <APP_voidPrintMenu+0x20>
     374:	00 c0       	rjmp	.+0      	; 0x376 <APP_voidPrintMenu+0x2a>
     376:	00 00       	nop
	_delay_ms(1500);
	LCD_voidClearScreen();
     378:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
	LCD_voidSetStringPos(0,0,"3- View Balance");
     37c:	4f e2       	ldi	r20, 0x2F	; 47
     37e:	51 e0       	ldi	r21, 0x01	; 1
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_voidSetStringPos>
	LCD_voidSetStringPos(1,0,"4- Change Password");
     388:	4f e3       	ldi	r20, 0x3F	; 63
     38a:	51 e0       	ldi	r21, 0x01	; 1
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	0e 94 ba 03 	call	0x774	; 0x774 <LCD_voidSetStringPos>
     394:	2f ed       	ldi	r18, 0xDF	; 223
     396:	83 e9       	ldi	r24, 0x93	; 147
     398:	94 e0       	ldi	r25, 0x04	; 4
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	80 40       	sbci	r24, 0x00	; 0
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <APP_voidPrintMenu+0x4e>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <APP_voidPrintMenu+0x58>
     3a4:	00 00       	nop
	_delay_ms(1500);
	LCD_voidClearScreen();
     3a6:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
	LCD_voidSendString("Enter ur choice:");
     3aa:	82 e5       	ldi	r24, 0x52	; 82
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
	u8 user_choice = APP_u8KeypadInput();
     3b2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <APP_u8KeypadInput>
     3b6:	c8 2f       	mov	r28, r24
	LCD_voidSetDataPos(1,0,user_choice);
     3b8:	48 2f       	mov	r20, r24
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_voidSetDataPos>
     3c2:	2f e9       	ldi	r18, 0x9F	; 159
     3c4:	86 e8       	ldi	r24, 0x86	; 134
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	21 50       	subi	r18, 0x01	; 1
     3ca:	80 40       	sbci	r24, 0x00	; 0
     3cc:	90 40       	sbci	r25, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <APP_voidPrintMenu+0x7c>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <APP_voidPrintMenu+0x86>
     3d2:	00 00       	nop
	_delay_ms(500);
	LCD_voidClearScreen();
     3d4:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_voidClearScreen>
	switch(user_choice)
     3d8:	c1 33       	cpi	r28, 0x31	; 49
     3da:	19 f0       	breq	.+6      	; 0x3e2 <APP_voidPrintMenu+0x96>
     3dc:	c3 33       	cpi	r28, 0x33	; 51
     3de:	21 f0       	breq	.+8      	; 0x3e8 <APP_voidPrintMenu+0x9c>
     3e0:	05 c0       	rjmp	.+10     	; 0x3ec <APP_voidPrintMenu+0xa0>
	{
		case '1' :
			APP_voidEnterDepositAmount();
     3e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <APP_voidEnterDepositAmount>
			break;
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <APP_voidPrintMenu+0xa0>
		case '2' :
			break;
		case '3' :
			APP_voidViewBalance();
     3e8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <APP_voidViewBalance>
			
		
	}
}
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <main>:
#include "APP.h"
/************************************************************************/

int main(void)
{
	HAL_Init();
     3f0:	0e 94 49 00 	call	0x92	; 0x92 <HAL_Init>
	APP_voidWelcomeMessage();
     3f4:	0e 94 50 00 	call	0xa0	; 0xa0 <APP_voidWelcomeMessage>
	APP_voidCheckPassword();
     3f8:	0e 94 75 00 	call	0xea	; 0xea <APP_voidCheckPassword>
	APP_voidPrintMenu();
     3fc:	0e 94 a6 01 	call	0x34c	; 0x34c <APP_voidPrintMenu>
}
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret

00000406 <KEYPAD_voidInit>:
const u8 KEYPAD [4][4]= KPD_VALUES;

void KEYPAD_voidInit(void)
{
	/*Set the Raw port as input with PORT=1 to activate the internal pull up */
	DIO_voidSetPortDirection(KEYPAD_ROW_PORT,ROW_PORT_INPUT);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
     40e:	6f e0       	ldi	r22, 0x0F	; 15
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPortValue>
	/*Set the COL port as output with Initial value =LOGIC HIGH*/ 
    DIO_voidSetPortDirection(KEYPAD_COL_PORT,COL_PORT_OUTPUT);
     416:	6f e0       	ldi	r22, 0x0F	; 15
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_voidSetPortDirection>
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
     41e:	6f e0       	ldi	r22, 0x0F	; 15
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPortValue>
     426:	08 95       	ret

00000428 <KEYPAD_READ>:
}

u8 KEYPAD_READ(void) {
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
		u8 row = 0;
		u8 col = 0;
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
     42c:	6f e0       	ldi	r22, 0x0F	; 15
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPortValue>
    DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
     434:	6f e0       	ldi	r22, 0x0F	; 15
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 5e 05 	call	0xabc	; 0xabc <DIO_voidSetPortValue>
    for (col = 0; col < 4; col++) {
     43c:	d0 e0       	ldi	r29, 0x00	; 0
     43e:	3a c0       	rjmp	.+116    	; 0x4b4 <KEYPAD_READ+0x8c>
        // Drive the current column low
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 0);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	6d 2f       	mov	r22, r29
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
        for (row = 0; row < 4; row++) {
     44a:	c0 e0       	ldi	r28, 0x00	; 0
     44c:	2b c0       	rjmp	.+86     	; 0x4a4 <KEYPAD_READ+0x7c>
            u8 val;
            val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
     44e:	6c 2f       	mov	r22, r28
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 f5 04 	call	0x9ea	; 0x9ea <DIO_u8GetPinValue>
							
            if (val == 0) {
     456:	81 11       	cpse	r24, r1
     458:	24 c0       	rjmp	.+72     	; 0x4a2 <KEYPAD_READ+0x7a>
     45a:	83 ec       	ldi	r24, 0xC3	; 195
     45c:	99 e0       	ldi	r25, 0x09	; 9
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <KEYPAD_READ+0x36>
     462:	00 c0       	rjmp	.+0      	; 0x464 <KEYPAD_READ+0x3c>
     464:	00 00       	nop
                // Debounce
                _delay_ms(10);  // Assuming you have a delay function
                val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
     466:	6c 2f       	mov	r22, r28
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <DIO_u8GetPinValue>
								
                if (val == 0) {
     46e:	81 11       	cpse	r24, r1
     470:	18 c0       	rjmp	.+48     	; 0x4a2 <KEYPAD_READ+0x7a>
     472:	04 c0       	rjmp	.+8      	; 0x47c <KEYPAD_READ+0x54>
                    // Wait until the key is released
                    while (val == 0) {
						val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
     474:	6c 2f       	mov	r22, r28
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 f5 04 	call	0x9ea	; 0x9ea <DIO_u8GetPinValue>
                _delay_ms(10);  // Assuming you have a delay function
                val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
								
                if (val == 0) {
                    // Wait until the key is released
                    while (val == 0) {
     47c:	88 23       	and	r24, r24
     47e:	d1 f3       	breq	.-12     	; 0x474 <KEYPAD_READ+0x4c>
						val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
                    }
                    DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 1); // Reset the column
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	6d 2f       	mov	r22, r29
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
                    return KEYPAD[row][col];  // Return the corresponding character from the keymap
     48a:	ec 2f       	mov	r30, r28
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	ed 59       	subi	r30, 0x9D	; 157
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	ed 0f       	add	r30, r29
     49c:	f1 1d       	adc	r31, r1
     49e:	80 81       	ld	r24, Z
     4a0:	0c c0       	rjmp	.+24     	; 0x4ba <KEYPAD_READ+0x92>
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
    DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
    for (col = 0; col < 4; col++) {
        // Drive the current column low
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 0);
        for (row = 0; row < 4; row++) {
     4a2:	cf 5f       	subi	r28, 0xFF	; 255
     4a4:	c4 30       	cpi	r28, 0x04	; 4
     4a6:	98 f2       	brcs	.-90     	; 0x44e <KEYPAD_READ+0x26>
                }
            }
        }

        // Reset the column back high
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 1);
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	6d 2f       	mov	r22, r29
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
u8 KEYPAD_READ(void) {
		u8 row = 0;
		u8 col = 0;
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
    DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
    for (col = 0; col < 4; col++) {
     4b2:	df 5f       	subi	r29, 0xFF	; 255
     4b4:	d4 30       	cpi	r29, 0x04	; 4
     4b6:	20 f2       	brcs	.-120    	; 0x440 <KEYPAD_READ+0x18>
        }

        // Reset the column back high
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 1);
    }
    return 'x';  // Indicate no key press
     4b8:	88 e7       	ldi	r24, 0x78	; 120
}
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <LCD_SendCommand>:
void Print_Distance_To_LCD(f32 distance)
{
	char str_distance[20]={0};
	ConvertFloatToStr(distance, str_distance);
	LCD_voidSendString(str_distance);
}
     4c0:	cf 93       	push	r28
     4c2:	c8 2f       	mov	r28, r24
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	65 e0       	ldi	r22, 0x05	; 5
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	66 e0       	ldi	r22, 0x06	; 6
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     4d8:	4c 2f       	mov	r20, r28
     4da:	41 70       	andi	r20, 0x01	; 1
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     4e4:	4c 2f       	mov	r20, r28
     4e6:	42 70       	andi	r20, 0x02	; 2
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	55 95       	asr	r21
     4ec:	47 95       	ror	r20
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     4f6:	4c 2f       	mov	r20, r28
     4f8:	44 70       	andi	r20, 0x04	; 4
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	55 95       	asr	r21
     4fe:	47 95       	ror	r20
     500:	55 95       	asr	r21
     502:	47 95       	ror	r20
     504:	62 e0       	ldi	r22, 0x02	; 2
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     50c:	4c 2f       	mov	r20, r28
     50e:	48 70       	andi	r20, 0x08	; 8
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	55 95       	asr	r21
     514:	47 95       	ror	r20
     516:	55 95       	asr	r21
     518:	47 95       	ror	r20
     51a:	55 95       	asr	r21
     51c:	47 95       	ror	r20
     51e:	63 e0       	ldi	r22, 0x03	; 3
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     526:	4c 2f       	mov	r20, r28
     528:	40 71       	andi	r20, 0x10	; 16
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	55 95       	asr	r21
     52e:	47 95       	ror	r20
     530:	55 95       	asr	r21
     532:	47 95       	ror	r20
     534:	55 95       	asr	r21
     536:	47 95       	ror	r20
     538:	55 95       	asr	r21
     53a:	47 95       	ror	r20
     53c:	64 e0       	ldi	r22, 0x04	; 4
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     544:	4c 2f       	mov	r20, r28
     546:	40 72       	andi	r20, 0x20	; 32
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	55 95       	asr	r21
     54c:	47 95       	ror	r20
     54e:	55 95       	asr	r21
     550:	47 95       	ror	r20
     552:	55 95       	asr	r21
     554:	47 95       	ror	r20
     556:	55 95       	asr	r21
     558:	47 95       	ror	r20
     55a:	55 95       	asr	r21
     55c:	47 95       	ror	r20
     55e:	65 e0       	ldi	r22, 0x05	; 5
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     566:	4c 2f       	mov	r20, r28
     568:	40 74       	andi	r20, 0x40	; 64
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	04 2e       	mov	r0, r20
     56e:	45 2f       	mov	r20, r21
     570:	00 0c       	add	r0, r0
     572:	44 1f       	adc	r20, r20
     574:	55 0b       	sbc	r21, r21
     576:	00 0c       	add	r0, r0
     578:	44 1f       	adc	r20, r20
     57a:	55 1f       	adc	r21, r21
     57c:	66 e0       	ldi	r22, 0x06	; 6
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     584:	4c 2f       	mov	r20, r28
     586:	44 1f       	adc	r20, r20
     588:	44 27       	eor	r20, r20
     58a:	44 1f       	adc	r20, r20
     58c:	67 e0       	ldi	r22, 0x07	; 7
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	67 e0       	ldi	r22, 0x07	; 7
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     59e:	83 ef       	ldi	r24, 0xF3	; 243
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCD_SendCommand+0xe2>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCD_SendCommand+0xe8>
     5a8:	00 00       	nop
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	67 e0       	ldi	r22, 0x07	; 7
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <LCD_voidInit>:
     5b8:	6f ef       	ldi	r22, 0xFF	; 255
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_voidSetPortDirection>
     5c0:	6f ef       	ldi	r22, 0xFF	; 255
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DIO_voidSetPortDirection>
     5c8:	84 e6       	ldi	r24, 0x64	; 100
     5ca:	8a 95       	dec	r24
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <LCD_voidInit+0x12>
     5ce:	88 e3       	ldi	r24, 0x38	; 56
     5d0:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_SendCommand>
     5d4:	89 ef       	ldi	r24, 0xF9	; 249
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	f1 f7       	brne	.-4      	; 0x5d8 <LCD_voidInit+0x20>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_voidInit+0x26>
     5de:	00 00       	nop
     5e0:	8f e0       	ldi	r24, 0x0F	; 15
     5e2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_SendCommand>
     5e6:	83 ef       	ldi	r24, 0xF3	; 243
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_voidInit+0x32>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_voidInit+0x38>
     5f0:	00 00       	nop
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_SendCommand>
     5f8:	81 ee       	ldi	r24, 0xE1	; 225
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <LCD_voidInit+0x44>
     600:	00 c0       	rjmp	.+0      	; 0x602 <LCD_voidInit+0x4a>
     602:	00 00       	nop
     604:	86 e0       	ldi	r24, 0x06	; 6
     606:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_SendCommand>
     60a:	81 ee       	ldi	r24, 0xE1	; 225
     60c:	94 e0       	ldi	r25, 0x04	; 4
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	f1 f7       	brne	.-4      	; 0x60e <LCD_voidInit+0x56>
     612:	00 c0       	rjmp	.+0      	; 0x614 <LCD_voidInit+0x5c>
     614:	00 00       	nop
     616:	08 95       	ret

00000618 <LCD_voidSendData>:
     618:	cf 93       	push	r28
     61a:	c8 2f       	mov	r28, r24
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	65 e0       	ldi	r22, 0x05	; 5
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	66 e0       	ldi	r22, 0x06	; 6
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     630:	4c 2f       	mov	r20, r28
     632:	41 70       	andi	r20, 0x01	; 1
     634:	60 e0       	ldi	r22, 0x00	; 0
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     63c:	4c 2f       	mov	r20, r28
     63e:	42 70       	andi	r20, 0x02	; 2
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	55 95       	asr	r21
     644:	47 95       	ror	r20
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	82 e0       	ldi	r24, 0x02	; 2
     64a:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     64e:	4c 2f       	mov	r20, r28
     650:	44 70       	andi	r20, 0x04	; 4
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	55 95       	asr	r21
     656:	47 95       	ror	r20
     658:	55 95       	asr	r21
     65a:	47 95       	ror	r20
     65c:	62 e0       	ldi	r22, 0x02	; 2
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     664:	4c 2f       	mov	r20, r28
     666:	48 70       	andi	r20, 0x08	; 8
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	55 95       	asr	r21
     66c:	47 95       	ror	r20
     66e:	55 95       	asr	r21
     670:	47 95       	ror	r20
     672:	55 95       	asr	r21
     674:	47 95       	ror	r20
     676:	63 e0       	ldi	r22, 0x03	; 3
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     67e:	4c 2f       	mov	r20, r28
     680:	40 71       	andi	r20, 0x10	; 16
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	55 95       	asr	r21
     686:	47 95       	ror	r20
     688:	55 95       	asr	r21
     68a:	47 95       	ror	r20
     68c:	55 95       	asr	r21
     68e:	47 95       	ror	r20
     690:	55 95       	asr	r21
     692:	47 95       	ror	r20
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     69c:	4c 2f       	mov	r20, r28
     69e:	40 72       	andi	r20, 0x20	; 32
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	55 95       	asr	r21
     6a4:	47 95       	ror	r20
     6a6:	55 95       	asr	r21
     6a8:	47 95       	ror	r20
     6aa:	55 95       	asr	r21
     6ac:	47 95       	ror	r20
     6ae:	55 95       	asr	r21
     6b0:	47 95       	ror	r20
     6b2:	55 95       	asr	r21
     6b4:	47 95       	ror	r20
     6b6:	65 e0       	ldi	r22, 0x05	; 5
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     6be:	4c 2f       	mov	r20, r28
     6c0:	40 74       	andi	r20, 0x40	; 64
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	04 2e       	mov	r0, r20
     6c6:	45 2f       	mov	r20, r21
     6c8:	00 0c       	add	r0, r0
     6ca:	44 1f       	adc	r20, r20
     6cc:	55 0b       	sbc	r21, r21
     6ce:	00 0c       	add	r0, r0
     6d0:	44 1f       	adc	r20, r20
     6d2:	55 1f       	adc	r21, r21
     6d4:	66 e0       	ldi	r22, 0x06	; 6
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     6dc:	4c 2f       	mov	r20, r28
     6de:	44 1f       	adc	r20, r20
     6e0:	44 27       	eor	r20, r20
     6e2:	44 1f       	adc	r20, r20
     6e4:	67 e0       	ldi	r22, 0x07	; 7
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     6ec:	41 e0       	ldi	r20, 0x01	; 1
     6ee:	67 e0       	ldi	r22, 0x07	; 7
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     6f6:	83 ef       	ldi	r24, 0xF3	; 243
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_voidSendData+0xe2>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <LCD_voidSendData+0xe8>
     700:	00 00       	nop
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	67 e0       	ldi	r22, 0x07	; 7
     706:	83 e0       	ldi	r24, 0x03	; 3
     708:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <LCD_voidSendString>:
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	03 c0       	rjmp	.+6      	; 0x71e <LCD_voidSendString+0xe>
     718:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_voidSendData>
     71c:	21 96       	adiw	r28, 0x01	; 1
     71e:	88 81       	ld	r24, Y
     720:	81 11       	cpse	r24, r1
     722:	fa cf       	rjmp	.-12     	; 0x718 <LCD_voidSendString+0x8>
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <LCD_voidClearScreen>:
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_SendCommand>
     730:	08 95       	ret

00000732 <LCD_voidSetCursor>:

void LCD_voidSetCursor(u8 row, u8 col)
{
    u8 address;
		if (col >= 40)
     732:	68 32       	cpi	r22, 0x28	; 40
     734:	08 f0       	brcs	.+2      	; 0x738 <LCD_voidSetCursor+0x6>
    {
        col = 39;  // Clamp to maximum column value
     736:	67 e2       	ldi	r22, 0x27	; 39
    }
		
		// Ensure row is within the valid range (0-1 for 2-line LCD)
    if (row > 1)
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	08 f0       	brcs	.+2      	; 0x73e <LCD_voidSetCursor+0xc>
    {
        row = 0;  // Default to the first row for invalid row values
     73c:	80 e0       	ldi	r24, 0x00	; 0
    }
    switch (row)
     73e:	88 23       	and	r24, r24
     740:	29 f0       	breq	.+10     	; 0x74c <LCD_voidSetCursor+0x1a>
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	11 f0       	breq	.+4      	; 0x74a <LCD_voidSetCursor+0x18>
    case 1:
        address = col + 0x40;
        break;
    // Add cases for more rows if you have a larger LCD
    default:
        address = 0;
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	01 c0       	rjmp	.+2      	; 0x74c <LCD_voidSetCursor+0x1a>
    {
    case 0:
        address = col;
        break;
    case 1:
        address = col + 0x40;
     74a:	60 5c       	subi	r22, 0xC0	; 192
    default:
        address = 0;
        break;
    }

    LCD_SendCommand(0x80 | address);  // Set DDRAM address command
     74c:	86 2f       	mov	r24, r22
     74e:	80 68       	ori	r24, 0x80	; 128
     750:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_SendCommand>
     754:	89 ef       	ldi	r24, 0xF9	; 249
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_voidSetCursor+0x26>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <LCD_voidSetCursor+0x2c>
     75e:	00 00       	nop
     760:	08 95       	ret

00000762 <LCD_voidSetDataPos>:
		_delay_ms(1);
}

void LCD_voidSetDataPos(u8 row, u8 col, u8 character)
{
     762:	cf 93       	push	r28
     764:	c4 2f       	mov	r28, r20
	LCD_voidSetCursor(row,col);
     766:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidSetCursor>
	LCD_voidSendData(character);
     76a:	8c 2f       	mov	r24, r28
     76c:	0e 94 0c 03 	call	0x618	; 0x618 <LCD_voidSendData>
}
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <LCD_voidSetStringPos>:

void LCD_voidSetStringPos(u8 row, u8 col, u8 *str)
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ea 01       	movw	r28, r20
    LCD_voidSetCursor(row,col);
     77a:	0e 94 99 03 	call	0x732	; 0x732 <LCD_voidSetCursor>
	LCD_voidSendString(str);	
     77e:	ce 01       	movw	r24, r28
     780:	0e 94 88 03 	call	0x710	; 0x710 <LCD_voidSendString>
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <LEDS_INIT>:
u8 LEDS[NUM_OF_LEDS] = {GREEN_LED,RED_LED};
u8 LEDS_PORT[NUM_OF_LEDS] = {PORTB_ID,PORTB_ID};
u8 LEDS_PIN[NUM_OF_LEDS] = {PIN5_ID,PIN6_ID};

void LEDS_INIT()
{
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
	for(u8 i = 0 ; i < NUM_OF_LEDS ; i++)
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	15 c0       	rjmp	.+42     	; 0x7c2 <LEDS_INIT+0x38>
	{
		DIO_voidSetPinDirection(LEDS_PORT[i],LEDS_PIN[i],PIN_OUTPUT);
     798:	c1 2f       	mov	r28, r17
     79a:	d0 e0       	ldi	r29, 0x00	; 0
     79c:	ce 01       	movw	r24, r28
     79e:	8c 59       	subi	r24, 0x9C	; 156
     7a0:	9f 4f       	sbci	r25, 0xFF	; 255
     7a2:	7c 01       	movw	r14, r24
     7a4:	ca 59       	subi	r28, 0x9A	; 154
     7a6:	df 4f       	sbci	r29, 0xFF	; 255
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	fc 01       	movw	r30, r24
     7ac:	60 81       	ld	r22, Z
     7ae:	88 81       	ld	r24, Y
     7b0:	0e 94 15 04 	call	0x82a	; 0x82a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(LEDS_PORT[i],LEDS_PIN[i],LED_LOW);
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	f7 01       	movw	r30, r14
     7b8:	60 81       	ld	r22, Z
     7ba:	88 81       	ld	r24, Y
     7bc:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
u8 LEDS_PORT[NUM_OF_LEDS] = {PORTB_ID,PORTB_ID};
u8 LEDS_PIN[NUM_OF_LEDS] = {PIN5_ID,PIN6_ID};

void LEDS_INIT()
{
	for(u8 i = 0 ; i < NUM_OF_LEDS ; i++)
     7c0:	1f 5f       	subi	r17, 0xFF	; 255
     7c2:	12 30       	cpi	r17, 0x02	; 2
     7c4:	48 f3       	brcs	.-46     	; 0x798 <LEDS_INIT+0xe>
	{
		DIO_voidSetPinDirection(LEDS_PORT[i],LEDS_PIN[i],PIN_OUTPUT);
		DIO_voidSetPinValue(LEDS_PORT[i],LEDS_PIN[i],LED_LOW);
	}
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	08 95       	ret

000007d2 <LED_ON>:

void LED_ON(u8 LED_ID)
{
	DIO_voidSetPinValue(LEDS_PORT[LED_ID],LEDS_PIN[LED_ID],LED_HIGH);
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	ec 59       	subi	r30, 0x9C	; 156
     7d8:	ff 4f       	sbci	r31, 0xFF	; 255
     7da:	dc 01       	movw	r26, r24
     7dc:	aa 59       	subi	r26, 0x9A	; 154
     7de:	bf 4f       	sbci	r27, 0xFF	; 255
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	60 81       	ld	r22, Z
     7e4:	8c 91       	ld	r24, X
     7e6:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     7ea:	08 95       	ret

000007ec <LED_OFF>:
}

void LED_OFF(u8 LED_ID)
{
	DIO_voidSetPinValue(LEDS_PORT[LED_ID],LEDS_PIN[LED_ID],LED_LOW);
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	fc 01       	movw	r30, r24
     7f0:	ec 59       	subi	r30, 0x9C	; 156
     7f2:	ff 4f       	sbci	r31, 0xFF	; 255
     7f4:	dc 01       	movw	r26, r24
     7f6:	aa 59       	subi	r26, 0x9A	; 154
     7f8:	bf 4f       	sbci	r27, 0xFF	; 255
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	60 81       	ld	r22, Z
     7fe:	8c 91       	ld	r24, X
     800:	0e 94 85 04 	call	0x90a	; 0x90a <DIO_voidSetPinValue>
     804:	08 95       	ret

00000806 <LED_TOGGLE>:
}

void LED_TOGGLE(u8 LED_ID)
{
     806:	cf 93       	push	r28
     808:	c8 2f       	mov	r28, r24
	LED_ON(LED_ID);
     80a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <LED_ON>
     80e:	2f eb       	ldi	r18, 0xBF	; 191
     810:	87 e2       	ldi	r24, 0x27	; 39
     812:	99 e0       	ldi	r25, 0x09	; 9
     814:	21 50       	subi	r18, 0x01	; 1
     816:	80 40       	sbci	r24, 0x00	; 0
     818:	90 40       	sbci	r25, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <LED_TOGGLE+0xe>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <LED_TOGGLE+0x18>
     81e:	00 00       	nop
	_delay_ms(3000);
	LED_OFF(LED_ID);
     820:	8c 2f       	mov	r24, r28
     822:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LED_OFF>
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <DIO_voidSetPinDirection>:
 */
void DIO_voidSetPinDirection(u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction)
{

		
		if (Copy_u8Direction==PIN_OUTPUT)
     82a:	41 30       	cpi	r20, 0x01	; 1
     82c:	a1 f5       	brne	.+104    	; 0x896 <__stack+0x37>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     82e:	81 30       	cpi	r24, 0x01	; 1
     830:	89 f0       	breq	.+34     	; 0x854 <DIO_voidSetPinDirection+0x2a>
     832:	28 f0       	brcs	.+10     	; 0x83e <DIO_voidSetPinDirection+0x14>
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	c9 f0       	breq	.+50     	; 0x86a <__stack+0xb>
     838:	83 30       	cpi	r24, 0x03	; 3
     83a:	11 f1       	breq	.+68     	; 0x880 <__stack+0x21>
     83c:	08 95       	ret
			{
				case PORTA_ID: SET_BIT(DDRA,Copy_u8PIN); break;
     83e:	2a b3       	in	r18, 0x1a	; 26
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	02 c0       	rjmp	.+4      	; 0x84a <DIO_voidSetPinDirection+0x20>
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	6a 95       	dec	r22
     84c:	e2 f7       	brpl	.-8      	; 0x846 <DIO_voidSetPinDirection+0x1c>
     84e:	82 2b       	or	r24, r18
     850:	8a bb       	out	0x1a, r24	; 26
     852:	08 95       	ret
				case PORTB_ID: SET_BIT(DDRB,Copy_u8PIN); break;
     854:	27 b3       	in	r18, 0x17	; 23
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	6a 95       	dec	r22
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_voidSetPinDirection+0x32>
     864:	82 2b       	or	r24, r18
     866:	87 bb       	out	0x17, r24	; 23
     868:	08 95       	ret
				case PORTC_ID: SET_BIT(DDRC,Copy_u8PIN); break;
     86a:	24 b3       	in	r18, 0x14	; 20
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	6a 95       	dec	r22
     878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
     87a:	82 2b       	or	r24, r18
     87c:	84 bb       	out	0x14, r24	; 20
     87e:	08 95       	ret
				case PORTD_ID: SET_BIT(DDRD,Copy_u8PIN); break;
     880:	21 b3       	in	r18, 0x11	; 17
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	6a 95       	dec	r22
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
     890:	82 2b       	or	r24, r18
     892:	81 bb       	out	0x11, r24	; 17
     894:	08 95       	ret
			}
		}
		else if (Copy_u8Direction==PIN_INPUT)
     896:	41 11       	cpse	r20, r1
     898:	37 c0       	rjmp	.+110    	; 0x908 <__stack+0xa9>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	91 f0       	breq	.+36     	; 0x8c2 <__stack+0x63>
     89e:	28 f0       	brcs	.+10     	; 0x8aa <__stack+0x4b>
     8a0:	82 30       	cpi	r24, 0x02	; 2
     8a2:	d9 f0       	breq	.+54     	; 0x8da <__stack+0x7b>
     8a4:	83 30       	cpi	r24, 0x03	; 3
     8a6:	29 f1       	breq	.+74     	; 0x8f2 <__stack+0x93>
     8a8:	08 95       	ret
			{
				case PORTA_ID: CLR_BIT(DDRA,Copy_u8PIN); break;
     8aa:	2a b3       	in	r18, 0x1a	; 26
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	6a 95       	dec	r22
     8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
     8ba:	80 95       	com	r24
     8bc:	82 23       	and	r24, r18
     8be:	8a bb       	out	0x1a, r24	; 26
     8c0:	08 95       	ret
				case PORTB_ID: CLR_BIT(DDRB,Copy_u8PIN); break;
     8c2:	27 b3       	in	r18, 0x17	; 23
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	6a 95       	dec	r22
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
     8d2:	80 95       	com	r24
     8d4:	82 23       	and	r24, r18
     8d6:	87 bb       	out	0x17, r24	; 23
     8d8:	08 95       	ret
				case PORTC_ID: CLR_BIT(DDRC,Copy_u8PIN); break;
     8da:	24 b3       	in	r18, 0x14	; 20
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	6a 95       	dec	r22
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
     8ea:	80 95       	com	r24
     8ec:	82 23       	and	r24, r18
     8ee:	84 bb       	out	0x14, r24	; 20
     8f0:	08 95       	ret
				case PORTD_ID: CLR_BIT(DDRD,Copy_u8PIN); break;
     8f2:	21 b3       	in	r18, 0x11	; 17
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	6a 95       	dec	r22
     900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
     902:	80 95       	com	r24
     904:	82 23       	and	r24, r18
     906:	81 bb       	out	0x11, r24	; 17
     908:	08 95       	ret

0000090a <DIO_voidSetPinValue>:
void  DIO_voidSetPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	
	
		if (Copy_u8Value == PIN_HIGH)
     90a:	41 30       	cpi	r20, 0x01	; 1
     90c:	a1 f5       	brne	.+104    	; 0x976 <DIO_voidSetPinValue+0x6c>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	89 f0       	breq	.+34     	; 0x934 <DIO_voidSetPinValue+0x2a>
     912:	28 f0       	brcs	.+10     	; 0x91e <DIO_voidSetPinValue+0x14>
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	c9 f0       	breq	.+50     	; 0x94a <DIO_voidSetPinValue+0x40>
     918:	83 30       	cpi	r24, 0x03	; 3
     91a:	11 f1       	breq	.+68     	; 0x960 <DIO_voidSetPinValue+0x56>
     91c:	08 95       	ret
			{
				case PORTA_ID: SET_BIT(PORTA,Copy_u8PIN); break;
     91e:	2b b3       	in	r18, 0x1b	; 27
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	02 c0       	rjmp	.+4      	; 0x92a <DIO_voidSetPinValue+0x20>
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	6a 95       	dec	r22
     92c:	e2 f7       	brpl	.-8      	; 0x926 <DIO_voidSetPinValue+0x1c>
     92e:	82 2b       	or	r24, r18
     930:	8b bb       	out	0x1b, r24	; 27
     932:	08 95       	ret
				case PORTB_ID: SET_BIT(PORTB,Copy_u8PIN); break;
     934:	28 b3       	in	r18, 0x18	; 24
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	02 c0       	rjmp	.+4      	; 0x940 <DIO_voidSetPinValue+0x36>
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	6a 95       	dec	r22
     942:	e2 f7       	brpl	.-8      	; 0x93c <DIO_voidSetPinValue+0x32>
     944:	82 2b       	or	r24, r18
     946:	88 bb       	out	0x18, r24	; 24
     948:	08 95       	ret
				case PORTC_ID: SET_BIT(PORTC,Copy_u8PIN); break;
     94a:	25 b3       	in	r18, 0x15	; 21
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	02 c0       	rjmp	.+4      	; 0x956 <DIO_voidSetPinValue+0x4c>
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	6a 95       	dec	r22
     958:	e2 f7       	brpl	.-8      	; 0x952 <DIO_voidSetPinValue+0x48>
     95a:	82 2b       	or	r24, r18
     95c:	85 bb       	out	0x15, r24	; 21
     95e:	08 95       	ret
				case PORTD_ID: SET_BIT(PORTD,Copy_u8PIN); break;
     960:	22 b3       	in	r18, 0x12	; 18
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_voidSetPinValue+0x62>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	6a 95       	dec	r22
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_voidSetPinValue+0x5e>
     970:	82 2b       	or	r24, r18
     972:	82 bb       	out	0x12, r24	; 18
     974:	08 95       	ret
			}
		}
		else if (Copy_u8Value == PIN_LOW)
     976:	41 11       	cpse	r20, r1
     978:	37 c0       	rjmp	.+110    	; 0x9e8 <DIO_voidSetPinValue+0xde>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	91 f0       	breq	.+36     	; 0x9a2 <DIO_voidSetPinValue+0x98>
     97e:	28 f0       	brcs	.+10     	; 0x98a <DIO_voidSetPinValue+0x80>
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	d9 f0       	breq	.+54     	; 0x9ba <DIO_voidSetPinValue+0xb0>
     984:	83 30       	cpi	r24, 0x03	; 3
     986:	29 f1       	breq	.+74     	; 0x9d2 <DIO_voidSetPinValue+0xc8>
     988:	08 95       	ret
			{
				case PORTA_ID: CLR_BIT(PORTA,Copy_u8PIN); break;
     98a:	2b b3       	in	r18, 0x1b	; 27
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	02 c0       	rjmp	.+4      	; 0x996 <DIO_voidSetPinValue+0x8c>
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	6a 95       	dec	r22
     998:	e2 f7       	brpl	.-8      	; 0x992 <DIO_voidSetPinValue+0x88>
     99a:	80 95       	com	r24
     99c:	82 23       	and	r24, r18
     99e:	8b bb       	out	0x1b, r24	; 27
     9a0:	08 95       	ret
				case PORTB_ID: CLR_BIT(PORTB,Copy_u8PIN); break;
     9a2:	28 b3       	in	r18, 0x18	; 24
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_voidSetPinValue+0xa4>
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	6a 95       	dec	r22
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_voidSetPinValue+0xa0>
     9b2:	80 95       	com	r24
     9b4:	82 23       	and	r24, r18
     9b6:	88 bb       	out	0x18, r24	; 24
     9b8:	08 95       	ret
				case PORTC_ID: CLR_BIT(PORTC,Copy_u8PIN); break;
     9ba:	25 b3       	in	r18, 0x15	; 21
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_voidSetPinValue+0xbc>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	6a 95       	dec	r22
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_voidSetPinValue+0xb8>
     9ca:	80 95       	com	r24
     9cc:	82 23       	and	r24, r18
     9ce:	85 bb       	out	0x15, r24	; 21
     9d0:	08 95       	ret
				case PORTD_ID: CLR_BIT(PORTD,Copy_u8PIN); break;
     9d2:	22 b3       	in	r18, 0x12	; 18
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <DIO_voidSetPinValue+0xd4>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	6a 95       	dec	r22
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <DIO_voidSetPinValue+0xd0>
     9e2:	80 95       	com	r24
     9e4:	82 23       	and	r24, r18
     9e6:	82 bb       	out	0x12, r24	; 18
     9e8:	08 95       	ret

000009ea <DIO_u8GetPinValue>:
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 DIO_u8GetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	switch (Copy_u8PORT)
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	d1 f0       	breq	.+52     	; 0xa22 <DIO_u8GetPinValue+0x38>
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <DIO_u8GetPinValue+0x10>
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	59 f1       	breq	.+86     	; 0xa4a <DIO_u8GetPinValue+0x60>
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	e9 f1       	breq	.+122    	; 0xa72 <DIO_u8GetPinValue+0x88>
     9f8:	50 c0       	rjmp	.+160    	; 0xa9a <DIO_u8GetPinValue+0xb0>
	{
		case PORTA_ID: return GET_BIT(PINA,Copy_u8PIN);
     9fa:	49 b3       	in	r20, 0x19	; 25
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	9c 01       	movw	r18, r24
     a02:	06 2e       	mov	r0, r22
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_u8GetPinValue+0x20>
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	0a 94       	dec	r0
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_u8GetPinValue+0x1c>
     a0e:	84 2f       	mov	r24, r20
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	82 23       	and	r24, r18
     a14:	93 23       	and	r25, r19
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <DIO_u8GetPinValue+0x32>
     a18:	95 95       	asr	r25
     a1a:	87 95       	ror	r24
     a1c:	6a 95       	dec	r22
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <DIO_u8GetPinValue+0x2e>
     a20:	08 95       	ret
		case PORTB_ID: return GET_BIT(PINB,Copy_u8PIN);
     a22:	46 b3       	in	r20, 0x16	; 22
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	9c 01       	movw	r18, r24
     a2a:	06 2e       	mov	r0, r22
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <DIO_u8GetPinValue+0x48>
     a2e:	22 0f       	add	r18, r18
     a30:	33 1f       	adc	r19, r19
     a32:	0a 94       	dec	r0
     a34:	e2 f7       	brpl	.-8      	; 0xa2e <DIO_u8GetPinValue+0x44>
     a36:	84 2f       	mov	r24, r20
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	82 23       	and	r24, r18
     a3c:	93 23       	and	r25, r19
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DIO_u8GetPinValue+0x5a>
     a40:	95 95       	asr	r25
     a42:	87 95       	ror	r24
     a44:	6a 95       	dec	r22
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <DIO_u8GetPinValue+0x56>
     a48:	08 95       	ret
		case PORTC_ID: return GET_BIT(PINC,Copy_u8PIN);
     a4a:	43 b3       	in	r20, 0x13	; 19
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	9c 01       	movw	r18, r24
     a52:	06 2e       	mov	r0, r22
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_u8GetPinValue+0x70>
     a56:	22 0f       	add	r18, r18
     a58:	33 1f       	adc	r19, r19
     a5a:	0a 94       	dec	r0
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_u8GetPinValue+0x6c>
     a5e:	84 2f       	mov	r24, r20
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	82 23       	and	r24, r18
     a64:	93 23       	and	r25, r19
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <DIO_u8GetPinValue+0x82>
     a68:	95 95       	asr	r25
     a6a:	87 95       	ror	r24
     a6c:	6a 95       	dec	r22
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <DIO_u8GetPinValue+0x7e>
     a70:	08 95       	ret
		case PORTD_ID: return GET_BIT(PIND,Copy_u8PIN);
     a72:	40 b3       	in	r20, 0x10	; 16
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	9c 01       	movw	r18, r24
     a7a:	06 2e       	mov	r0, r22
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <DIO_u8GetPinValue+0x98>
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	0a 94       	dec	r0
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <DIO_u8GetPinValue+0x94>
     a86:	84 2f       	mov	r24, r20
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	82 23       	and	r24, r18
     a8c:	93 23       	and	r25, r19
     a8e:	02 c0       	rjmp	.+4      	; 0xa94 <DIO_u8GetPinValue+0xaa>
     a90:	95 95       	asr	r25
     a92:	87 95       	ror	r24
     a94:	6a 95       	dec	r22
     a96:	e2 f7       	brpl	.-8      	; 0xa90 <DIO_u8GetPinValue+0xa6>
     a98:	08 95       	ret
	}
}
     a9a:	08 95       	ret

00000a9c <DIO_voidSetPortDirection>:
 */
void DIO_voidSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	
		/* Setup the port direction as required */
		switch (Copy_u8PORT)
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	41 f0       	breq	.+16     	; 0xab0 <DIO_voidSetPortDirection+0x14>
     aa0:	28 f0       	brcs	.+10     	; 0xaac <DIO_voidSetPortDirection+0x10>
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	39 f0       	breq	.+14     	; 0xab4 <DIO_voidSetPortDirection+0x18>
     aa6:	83 30       	cpi	r24, 0x03	; 3
     aa8:	39 f0       	breq	.+14     	; 0xab8 <DIO_voidSetPortDirection+0x1c>
     aaa:	08 95       	ret
		{
			case PORTA_ID: DDRA = Copy_u8Direction; break;
     aac:	6a bb       	out	0x1a, r22	; 26
     aae:	08 95       	ret
			case PORTB_ID: DDRB = Copy_u8Direction; break;
     ab0:	67 bb       	out	0x17, r22	; 23
     ab2:	08 95       	ret
			case PORTC_ID: DDRC = Copy_u8Direction; break;
     ab4:	64 bb       	out	0x14, r22	; 20
     ab6:	08 95       	ret
			case PORTD_ID: DDRD = Copy_u8Direction; break;
     ab8:	61 bb       	out	0x11, r22	; 17
     aba:	08 95       	ret

00000abc <DIO_voidSetPortValue>:
 */
void DIO_voidSetPortValue  (u8 Copy_u8PORT , u8 Copy_u8Value )
{
	
		/* Write the port value as required */
		switch (Copy_u8PORT)
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	41 f0       	breq	.+16     	; 0xad0 <DIO_voidSetPortValue+0x14>
     ac0:	28 f0       	brcs	.+10     	; 0xacc <DIO_voidSetPortValue+0x10>
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	39 f0       	breq	.+14     	; 0xad4 <DIO_voidSetPortValue+0x18>
     ac6:	83 30       	cpi	r24, 0x03	; 3
     ac8:	39 f0       	breq	.+14     	; 0xad8 <DIO_voidSetPortValue+0x1c>
     aca:	08 95       	ret
		{
			case PORTA_ID: PORTA = Copy_u8Value; break;
     acc:	6b bb       	out	0x1b, r22	; 27
     ace:	08 95       	ret
			case PORTB_ID: PORTB = Copy_u8Value; break;
     ad0:	68 bb       	out	0x18, r22	; 24
     ad2:	08 95       	ret
			case PORTC_ID: PORTC = Copy_u8Value; break;
     ad4:	65 bb       	out	0x15, r22	; 21
     ad6:	08 95       	ret
			case PORTD_ID: PORTD = Copy_u8Value; break;
     ad8:	62 bb       	out	0x12, r22	; 18
     ada:	08 95       	ret

00000adc <strtol>:
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e4 e7       	ldi	r30, 0x74	; 116
     ae2:	f5 e0       	ldi	r31, 0x05	; 5
     ae4:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__prologue_saves__+0x2>
     ae8:	5c 01       	movw	r10, r24
     aea:	6b 01       	movw	r12, r22
     aec:	7a 01       	movw	r14, r20
     aee:	61 15       	cp	r22, r1
     af0:	71 05       	cpc	r23, r1
     af2:	19 f0       	breq	.+6      	; 0xafa <strtol+0x1e>
     af4:	fb 01       	movw	r30, r22
     af6:	91 83       	std	Z+1, r25	; 0x01
     af8:	80 83       	st	Z, r24
     afa:	e1 14       	cp	r14, r1
     afc:	f1 04       	cpc	r15, r1
     afe:	29 f0       	breq	.+10     	; 0xb0a <strtol+0x2e>
     b00:	c7 01       	movw	r24, r14
     b02:	02 97       	sbiw	r24, 0x02	; 2
     b04:	83 97       	sbiw	r24, 0x23	; 35
     b06:	08 f0       	brcs	.+2      	; 0xb0a <strtol+0x2e>
     b08:	e5 c0       	rjmp	.+458    	; 0xcd4 <strtol+0x1f8>
     b0a:	e5 01       	movw	r28, r10
     b0c:	21 96       	adiw	r28, 0x01	; 1
     b0e:	f5 01       	movw	r30, r10
     b10:	10 81       	ld	r17, Z
     b12:	81 2f       	mov	r24, r17
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 84 06 	call	0xd08	; 0xd08 <isspace>
     b1a:	89 2b       	or	r24, r25
     b1c:	11 f0       	breq	.+4      	; 0xb22 <strtol+0x46>
     b1e:	5e 01       	movw	r10, r28
     b20:	f4 cf       	rjmp	.-24     	; 0xb0a <strtol+0x2e>
     b22:	1d 32       	cpi	r17, 0x2D	; 45
     b24:	29 f4       	brne	.+10     	; 0xb30 <strtol+0x54>
     b26:	21 96       	adiw	r28, 0x01	; 1
     b28:	f5 01       	movw	r30, r10
     b2a:	11 81       	ldd	r17, Z+1	; 0x01
     b2c:	01 e0       	ldi	r16, 0x01	; 1
     b2e:	07 c0       	rjmp	.+14     	; 0xb3e <strtol+0x62>
     b30:	1b 32       	cpi	r17, 0x2B	; 43
     b32:	21 f4       	brne	.+8      	; 0xb3c <strtol+0x60>
     b34:	e5 01       	movw	r28, r10
     b36:	22 96       	adiw	r28, 0x02	; 2
     b38:	f5 01       	movw	r30, r10
     b3a:	11 81       	ldd	r17, Z+1	; 0x01
     b3c:	00 e0       	ldi	r16, 0x00	; 0
     b3e:	e1 14       	cp	r14, r1
     b40:	f1 04       	cpc	r15, r1
     b42:	09 f1       	breq	.+66     	; 0xb86 <strtol+0xaa>
     b44:	f0 e1       	ldi	r31, 0x10	; 16
     b46:	ef 16       	cp	r14, r31
     b48:	f1 04       	cpc	r15, r1
     b4a:	29 f4       	brne	.+10     	; 0xb56 <strtol+0x7a>
     b4c:	3f c0       	rjmp	.+126    	; 0xbcc <strtol+0xf0>
     b4e:	10 e3       	ldi	r17, 0x30	; 48
     b50:	e1 14       	cp	r14, r1
     b52:	f1 04       	cpc	r15, r1
     b54:	21 f1       	breq	.+72     	; 0xb9e <strtol+0xc2>
     b56:	28 e0       	ldi	r18, 0x08	; 8
     b58:	e2 16       	cp	r14, r18
     b5a:	f1 04       	cpc	r15, r1
     b5c:	01 f1       	breq	.+64     	; 0xb9e <strtol+0xc2>
     b5e:	54 f4       	brge	.+20     	; 0xb74 <strtol+0x98>
     b60:	e2 e0       	ldi	r30, 0x02	; 2
     b62:	ee 16       	cp	r14, r30
     b64:	f1 04       	cpc	r15, r1
     b66:	21 f5       	brne	.+72     	; 0xbb0 <strtol+0xd4>
     b68:	81 2c       	mov	r8, r1
     b6a:	91 2c       	mov	r9, r1
     b6c:	a1 2c       	mov	r10, r1
     b6e:	b0 e4       	ldi	r27, 0x40	; 64
     b70:	bb 2e       	mov	r11, r27
     b72:	3e c0       	rjmp	.+124    	; 0xbf0 <strtol+0x114>
     b74:	fa e0       	ldi	r31, 0x0A	; 10
     b76:	ef 16       	cp	r14, r31
     b78:	f1 04       	cpc	r15, r1
     b7a:	39 f0       	breq	.+14     	; 0xb8a <strtol+0xae>
     b7c:	20 e1       	ldi	r18, 0x10	; 16
     b7e:	e2 16       	cp	r14, r18
     b80:	f1 04       	cpc	r15, r1
     b82:	b1 f4       	brne	.+44     	; 0xbb0 <strtol+0xd4>
     b84:	30 c0       	rjmp	.+96     	; 0xbe6 <strtol+0x10a>
     b86:	10 33       	cpi	r17, 0x30	; 48
     b88:	19 f1       	breq	.+70     	; 0xbd0 <strtol+0xf4>
     b8a:	fa e0       	ldi	r31, 0x0A	; 10
     b8c:	ef 2e       	mov	r14, r31
     b8e:	f1 2c       	mov	r15, r1
     b90:	ac ec       	ldi	r26, 0xCC	; 204
     b92:	8a 2e       	mov	r8, r26
     b94:	98 2c       	mov	r9, r8
     b96:	a8 2c       	mov	r10, r8
     b98:	ac e0       	ldi	r26, 0x0C	; 12
     b9a:	ba 2e       	mov	r11, r26
     b9c:	29 c0       	rjmp	.+82     	; 0xbf0 <strtol+0x114>
     b9e:	78 e0       	ldi	r23, 0x08	; 8
     ba0:	e7 2e       	mov	r14, r23
     ba2:	f1 2c       	mov	r15, r1
     ba4:	81 2c       	mov	r8, r1
     ba6:	91 2c       	mov	r9, r1
     ba8:	a1 2c       	mov	r10, r1
     baa:	e0 e1       	ldi	r30, 0x10	; 16
     bac:	be 2e       	mov	r11, r30
     bae:	20 c0       	rjmp	.+64     	; 0xbf0 <strtol+0x114>
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e8       	ldi	r25, 0x80	; 128
     bb8:	97 01       	movw	r18, r14
     bba:	0f 2c       	mov	r0, r15
     bbc:	00 0c       	add	r0, r0
     bbe:	44 0b       	sbc	r20, r20
     bc0:	55 0b       	sbc	r21, r21
     bc2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__udivmodsi4>
     bc6:	49 01       	movw	r8, r18
     bc8:	5a 01       	movw	r10, r20
     bca:	12 c0       	rjmp	.+36     	; 0xbf0 <strtol+0x114>
     bcc:	10 33       	cpi	r17, 0x30	; 48
     bce:	59 f4       	brne	.+22     	; 0xbe6 <strtol+0x10a>
     bd0:	88 81       	ld	r24, Y
     bd2:	8f 7d       	andi	r24, 0xDF	; 223
     bd4:	88 35       	cpi	r24, 0x58	; 88
     bd6:	09 f0       	breq	.+2      	; 0xbda <strtol+0xfe>
     bd8:	ba cf       	rjmp	.-140    	; 0xb4e <strtol+0x72>
     bda:	19 81       	ldd	r17, Y+1	; 0x01
     bdc:	22 96       	adiw	r28, 0x02	; 2
     bde:	02 60       	ori	r16, 0x02	; 2
     be0:	80 e1       	ldi	r24, 0x10	; 16
     be2:	e8 2e       	mov	r14, r24
     be4:	f1 2c       	mov	r15, r1
     be6:	81 2c       	mov	r8, r1
     be8:	91 2c       	mov	r9, r1
     bea:	a1 2c       	mov	r10, r1
     bec:	68 e0       	ldi	r22, 0x08	; 8
     bee:	b6 2e       	mov	r11, r22
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	cb 01       	movw	r24, r22
     bf8:	27 01       	movw	r4, r14
     bfa:	0f 2c       	mov	r0, r15
     bfc:	00 0c       	add	r0, r0
     bfe:	66 08       	sbc	r6, r6
     c00:	77 08       	sbc	r7, r7
     c02:	fe 01       	movw	r30, r28
     c04:	50 ed       	ldi	r21, 0xD0	; 208
     c06:	35 2e       	mov	r3, r21
     c08:	31 0e       	add	r3, r17
     c0a:	29 e0       	ldi	r18, 0x09	; 9
     c0c:	23 15       	cp	r18, r3
     c0e:	70 f4       	brcc	.+28     	; 0xc2c <strtol+0x150>
     c10:	2f eb       	ldi	r18, 0xBF	; 191
     c12:	21 0f       	add	r18, r17
     c14:	2a 31       	cpi	r18, 0x1A	; 26
     c16:	18 f4       	brcc	.+6      	; 0xc1e <strtol+0x142>
     c18:	39 ec       	ldi	r19, 0xC9	; 201
     c1a:	33 2e       	mov	r3, r19
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <strtol+0x14e>
     c1e:	2f e9       	ldi	r18, 0x9F	; 159
     c20:	21 0f       	add	r18, r17
     c22:	2a 31       	cpi	r18, 0x1A	; 26
     c24:	18 f5       	brcc	.+70     	; 0xc6c <strtol+0x190>
     c26:	29 ea       	ldi	r18, 0xA9	; 169
     c28:	32 2e       	mov	r3, r18
     c2a:	31 0e       	add	r3, r17
     c2c:	23 2d       	mov	r18, r3
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	2e 15       	cp	r18, r14
     c32:	3f 05       	cpc	r19, r15
     c34:	dc f4       	brge	.+54     	; 0xc6c <strtol+0x190>
     c36:	47 fd       	sbrc	r20, 7
     c38:	16 c0       	rjmp	.+44     	; 0xc66 <strtol+0x18a>
     c3a:	86 16       	cp	r8, r22
     c3c:	97 06       	cpc	r9, r23
     c3e:	a8 06       	cpc	r10, r24
     c40:	b9 06       	cpc	r11, r25
     c42:	70 f0       	brcs	.+28     	; 0xc60 <strtol+0x184>
     c44:	a3 01       	movw	r20, r6
     c46:	92 01       	movw	r18, r4
     c48:	0e 94 4c 09 	call	0x1298	; 0x1298 <__mulsi3>
     c4c:	63 0d       	add	r22, r3
     c4e:	71 1d       	adc	r23, r1
     c50:	81 1d       	adc	r24, r1
     c52:	91 1d       	adc	r25, r1
     c54:	61 30       	cpi	r22, 0x01	; 1
     c56:	71 05       	cpc	r23, r1
     c58:	81 05       	cpc	r24, r1
     c5a:	20 e8       	ldi	r18, 0x80	; 128
     c5c:	92 07       	cpc	r25, r18
     c5e:	10 f0       	brcs	.+4      	; 0xc64 <strtol+0x188>
     c60:	4f ef       	ldi	r20, 0xFF	; 255
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <strtol+0x18a>
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	21 96       	adiw	r28, 0x01	; 1
     c68:	10 81       	ld	r17, Z
     c6a:	cb cf       	rjmp	.-106    	; 0xc02 <strtol+0x126>
     c6c:	20 2f       	mov	r18, r16
     c6e:	21 70       	andi	r18, 0x01	; 1
     c70:	c1 14       	cp	r12, r1
     c72:	d1 04       	cpc	r13, r1
     c74:	71 f0       	breq	.+28     	; 0xc92 <strtol+0x1b6>
     c76:	44 23       	and	r20, r20
     c78:	29 f0       	breq	.+10     	; 0xc84 <strtol+0x1a8>
     c7a:	21 97       	sbiw	r28, 0x01	; 1
     c7c:	f6 01       	movw	r30, r12
     c7e:	d1 83       	std	Z+1, r29	; 0x01
     c80:	c0 83       	st	Z, r28
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <strtol+0x1b6>
     c84:	01 ff       	sbrs	r16, 1
     c86:	19 c0       	rjmp	.+50     	; 0xcba <strtol+0x1de>
     c88:	22 97       	sbiw	r28, 0x02	; 2
     c8a:	f6 01       	movw	r30, r12
     c8c:	d1 83       	std	Z+1, r29	; 0x01
     c8e:	c0 83       	st	Z, r28
     c90:	14 c0       	rjmp	.+40     	; 0xcba <strtol+0x1de>
     c92:	47 ff       	sbrs	r20, 7
     c94:	12 c0       	rjmp	.+36     	; 0xcba <strtol+0x1de>
     c96:	22 23       	and	r18, r18
     c98:	29 f0       	breq	.+10     	; 0xca4 <strtol+0x1c8>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e8       	ldi	r25, 0x80	; 128
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <strtol+0x1d0>
     ca4:	6f ef       	ldi	r22, 0xFF	; 255
     ca6:	7f ef       	ldi	r23, 0xFF	; 255
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	9f e7       	ldi	r25, 0x7F	; 127
     cac:	22 e2       	ldi	r18, 0x22	; 34
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <errno+0x1>
     cb4:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <errno>
     cb8:	09 c0       	rjmp	.+18     	; 0xccc <strtol+0x1f0>
     cba:	22 23       	and	r18, r18
     cbc:	81 f0       	breq	.+32     	; 0xcde <strtol+0x202>
     cbe:	90 95       	com	r25
     cc0:	80 95       	com	r24
     cc2:	70 95       	com	r23
     cc4:	61 95       	neg	r22
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	8f 4f       	sbci	r24, 0xFF	; 255
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	46 2f       	mov	r20, r22
     cce:	37 2f       	mov	r19, r23
     cd0:	28 2f       	mov	r18, r24
     cd2:	12 c0       	rjmp	.+36     	; 0xcf8 <strtol+0x21c>
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <strtol+0x21c>
     cde:	97 ff       	sbrs	r25, 7
     ce0:	f5 cf       	rjmp	.-22     	; 0xccc <strtol+0x1f0>
     ce2:	82 e2       	ldi	r24, 0x22	; 34
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <errno+0x1>
     cea:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <errno>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	9f e7       	ldi	r25, 0x7F	; 127
     cf6:	ea cf       	rjmp	.-44     	; 0xccc <strtol+0x1f0>
     cf8:	64 2f       	mov	r22, r20
     cfa:	73 2f       	mov	r23, r19
     cfc:	82 2f       	mov	r24, r18
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	e1 e1       	ldi	r30, 0x11	; 17
     d04:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__epilogue_restores__+0x2>

00000d08 <isspace>:
     d08:	91 11       	cpse	r25, r1
     d0a:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__ctype_isfalse>
     d0e:	80 32       	cpi	r24, 0x20	; 32
     d10:	19 f0       	breq	.+6      	; 0xd18 <isspace+0x10>
     d12:	89 50       	subi	r24, 0x09	; 9
     d14:	85 50       	subi	r24, 0x05	; 5
     d16:	c8 f7       	brcc	.-14     	; 0xd0a <isspace+0x2>
     d18:	08 95       	ret

00000d1a <strcmp>:
     d1a:	fb 01       	movw	r30, r22
     d1c:	dc 01       	movw	r26, r24
     d1e:	8d 91       	ld	r24, X+
     d20:	01 90       	ld	r0, Z+
     d22:	80 19       	sub	r24, r0
     d24:	01 10       	cpse	r0, r1
     d26:	d9 f3       	breq	.-10     	; 0xd1e <strcmp+0x4>
     d28:	99 0b       	sbc	r25, r25
     d2a:	08 95       	ret

00000d2c <sprintf>:
     d2c:	ae e0       	ldi	r26, 0x0E	; 14
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ec e9       	ldi	r30, 0x9C	; 156
     d32:	f6 e0       	ldi	r31, 0x06	; 6
     d34:	0c 94 97 09 	jmp	0x132e	; 0x132e <__prologue_saves__+0x1c>
     d38:	0d 89       	ldd	r16, Y+21	; 0x15
     d3a:	1e 89       	ldd	r17, Y+22	; 0x16
     d3c:	86 e0       	ldi	r24, 0x06	; 6
     d3e:	8c 83       	std	Y+4, r24	; 0x04
     d40:	1a 83       	std	Y+2, r17	; 0x02
     d42:	09 83       	std	Y+1, r16	; 0x01
     d44:	8f ef       	ldi	r24, 0xFF	; 255
     d46:	9f e7       	ldi	r25, 0x7F	; 127
     d48:	9e 83       	std	Y+6, r25	; 0x06
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	ae 01       	movw	r20, r28
     d4e:	47 5e       	subi	r20, 0xE7	; 231
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	6f 89       	ldd	r22, Y+23	; 0x17
     d54:	78 8d       	ldd	r23, Y+24	; 0x18
     d56:	ce 01       	movw	r24, r28
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	0e 94 b8 06 	call	0xd70	; 0xd70 <vfprintf>
     d5e:	ef 81       	ldd	r30, Y+7	; 0x07
     d60:	f8 85       	ldd	r31, Y+8	; 0x08
     d62:	e0 0f       	add	r30, r16
     d64:	f1 1f       	adc	r31, r17
     d66:	10 82       	st	Z, r1
     d68:	2e 96       	adiw	r28, 0x0e	; 14
     d6a:	e4 e0       	ldi	r30, 0x04	; 4
     d6c:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__epilogue_restores__+0x1c>

00000d70 <vfprintf>:
     d70:	ab e0       	ldi	r26, 0x0B	; 11
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ee eb       	ldi	r30, 0xBE	; 190
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__prologue_saves__>
     d7c:	6c 01       	movw	r12, r24
     d7e:	7b 01       	movw	r14, r22
     d80:	8a 01       	movw	r16, r20
     d82:	fc 01       	movw	r30, r24
     d84:	17 82       	std	Z+7, r1	; 0x07
     d86:	16 82       	std	Z+6, r1	; 0x06
     d88:	83 81       	ldd	r24, Z+3	; 0x03
     d8a:	81 ff       	sbrs	r24, 1
     d8c:	cc c1       	rjmp	.+920    	; 0x1126 <vfprintf+0x3b6>
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	3c 01       	movw	r6, r24
     d94:	f6 01       	movw	r30, r12
     d96:	93 81       	ldd	r25, Z+3	; 0x03
     d98:	f7 01       	movw	r30, r14
     d9a:	93 fd       	sbrc	r25, 3
     d9c:	85 91       	lpm	r24, Z+
     d9e:	93 ff       	sbrs	r25, 3
     da0:	81 91       	ld	r24, Z+
     da2:	7f 01       	movw	r14, r30
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <vfprintf+0x3a>
     da8:	ba c1       	rjmp	.+884    	; 0x111e <vfprintf+0x3ae>
     daa:	85 32       	cpi	r24, 0x25	; 37
     dac:	39 f4       	brne	.+14     	; 0xdbc <vfprintf+0x4c>
     dae:	93 fd       	sbrc	r25, 3
     db0:	85 91       	lpm	r24, Z+
     db2:	93 ff       	sbrs	r25, 3
     db4:	81 91       	ld	r24, Z+
     db6:	7f 01       	movw	r14, r30
     db8:	85 32       	cpi	r24, 0x25	; 37
     dba:	29 f4       	brne	.+10     	; 0xdc6 <vfprintf+0x56>
     dbc:	b6 01       	movw	r22, r12
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
     dc4:	e7 cf       	rjmp	.-50     	; 0xd94 <vfprintf+0x24>
     dc6:	91 2c       	mov	r9, r1
     dc8:	21 2c       	mov	r2, r1
     dca:	31 2c       	mov	r3, r1
     dcc:	ff e1       	ldi	r31, 0x1F	; 31
     dce:	f3 15       	cp	r31, r3
     dd0:	d8 f0       	brcs	.+54     	; 0xe08 <vfprintf+0x98>
     dd2:	8b 32       	cpi	r24, 0x2B	; 43
     dd4:	79 f0       	breq	.+30     	; 0xdf4 <vfprintf+0x84>
     dd6:	38 f4       	brcc	.+14     	; 0xde6 <vfprintf+0x76>
     dd8:	80 32       	cpi	r24, 0x20	; 32
     dda:	79 f0       	breq	.+30     	; 0xdfa <vfprintf+0x8a>
     ddc:	83 32       	cpi	r24, 0x23	; 35
     dde:	a1 f4       	brne	.+40     	; 0xe08 <vfprintf+0x98>
     de0:	23 2d       	mov	r18, r3
     de2:	20 61       	ori	r18, 0x10	; 16
     de4:	1d c0       	rjmp	.+58     	; 0xe20 <vfprintf+0xb0>
     de6:	8d 32       	cpi	r24, 0x2D	; 45
     de8:	61 f0       	breq	.+24     	; 0xe02 <vfprintf+0x92>
     dea:	80 33       	cpi	r24, 0x30	; 48
     dec:	69 f4       	brne	.+26     	; 0xe08 <vfprintf+0x98>
     dee:	23 2d       	mov	r18, r3
     df0:	21 60       	ori	r18, 0x01	; 1
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <vfprintf+0xb0>
     df4:	83 2d       	mov	r24, r3
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	38 2e       	mov	r3, r24
     dfa:	e3 2d       	mov	r30, r3
     dfc:	e4 60       	ori	r30, 0x04	; 4
     dfe:	3e 2e       	mov	r3, r30
     e00:	2a c0       	rjmp	.+84     	; 0xe56 <vfprintf+0xe6>
     e02:	f3 2d       	mov	r31, r3
     e04:	f8 60       	ori	r31, 0x08	; 8
     e06:	1d c0       	rjmp	.+58     	; 0xe42 <vfprintf+0xd2>
     e08:	37 fc       	sbrc	r3, 7
     e0a:	2d c0       	rjmp	.+90     	; 0xe66 <vfprintf+0xf6>
     e0c:	20 ed       	ldi	r18, 0xD0	; 208
     e0e:	28 0f       	add	r18, r24
     e10:	2a 30       	cpi	r18, 0x0A	; 10
     e12:	40 f0       	brcs	.+16     	; 0xe24 <vfprintf+0xb4>
     e14:	8e 32       	cpi	r24, 0x2E	; 46
     e16:	b9 f4       	brne	.+46     	; 0xe46 <vfprintf+0xd6>
     e18:	36 fc       	sbrc	r3, 6
     e1a:	81 c1       	rjmp	.+770    	; 0x111e <vfprintf+0x3ae>
     e1c:	23 2d       	mov	r18, r3
     e1e:	20 64       	ori	r18, 0x40	; 64
     e20:	32 2e       	mov	r3, r18
     e22:	19 c0       	rjmp	.+50     	; 0xe56 <vfprintf+0xe6>
     e24:	36 fe       	sbrs	r3, 6
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <vfprintf+0xc4>
     e28:	8a e0       	ldi	r24, 0x0A	; 10
     e2a:	98 9e       	mul	r9, r24
     e2c:	20 0d       	add	r18, r0
     e2e:	11 24       	eor	r1, r1
     e30:	92 2e       	mov	r9, r18
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <vfprintf+0xe6>
     e34:	ea e0       	ldi	r30, 0x0A	; 10
     e36:	2e 9e       	mul	r2, r30
     e38:	20 0d       	add	r18, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	22 2e       	mov	r2, r18
     e3e:	f3 2d       	mov	r31, r3
     e40:	f0 62       	ori	r31, 0x20	; 32
     e42:	3f 2e       	mov	r3, r31
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <vfprintf+0xe6>
     e46:	8c 36       	cpi	r24, 0x6C	; 108
     e48:	21 f4       	brne	.+8      	; 0xe52 <vfprintf+0xe2>
     e4a:	83 2d       	mov	r24, r3
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	38 2e       	mov	r3, r24
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <vfprintf+0xe6>
     e52:	88 36       	cpi	r24, 0x68	; 104
     e54:	41 f4       	brne	.+16     	; 0xe66 <vfprintf+0xf6>
     e56:	f7 01       	movw	r30, r14
     e58:	93 fd       	sbrc	r25, 3
     e5a:	85 91       	lpm	r24, Z+
     e5c:	93 ff       	sbrs	r25, 3
     e5e:	81 91       	ld	r24, Z+
     e60:	7f 01       	movw	r14, r30
     e62:	81 11       	cpse	r24, r1
     e64:	b3 cf       	rjmp	.-154    	; 0xdcc <vfprintf+0x5c>
     e66:	98 2f       	mov	r25, r24
     e68:	9f 7d       	andi	r25, 0xDF	; 223
     e6a:	95 54       	subi	r25, 0x45	; 69
     e6c:	93 30       	cpi	r25, 0x03	; 3
     e6e:	28 f4       	brcc	.+10     	; 0xe7a <vfprintf+0x10a>
     e70:	0c 5f       	subi	r16, 0xFC	; 252
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	9f e3       	ldi	r25, 0x3F	; 63
     e76:	99 83       	std	Y+1, r25	; 0x01
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <vfprintf+0x124>
     e7a:	83 36       	cpi	r24, 0x63	; 99
     e7c:	31 f0       	breq	.+12     	; 0xe8a <vfprintf+0x11a>
     e7e:	83 37       	cpi	r24, 0x73	; 115
     e80:	71 f0       	breq	.+28     	; 0xe9e <vfprintf+0x12e>
     e82:	83 35       	cpi	r24, 0x53	; 83
     e84:	09 f0       	breq	.+2      	; 0xe88 <vfprintf+0x118>
     e86:	59 c0       	rjmp	.+178    	; 0xf3a <vfprintf+0x1ca>
     e88:	21 c0       	rjmp	.+66     	; 0xecc <vfprintf+0x15c>
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 81       	ld	r24, Z
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	0e 5f       	subi	r16, 0xFE	; 254
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	88 24       	eor	r8, r8
     e96:	83 94       	inc	r8
     e98:	91 2c       	mov	r9, r1
     e9a:	53 01       	movw	r10, r6
     e9c:	13 c0       	rjmp	.+38     	; 0xec4 <vfprintf+0x154>
     e9e:	28 01       	movw	r4, r16
     ea0:	f2 e0       	ldi	r31, 0x02	; 2
     ea2:	4f 0e       	add	r4, r31
     ea4:	51 1c       	adc	r5, r1
     ea6:	f8 01       	movw	r30, r16
     ea8:	a0 80       	ld	r10, Z
     eaa:	b1 80       	ldd	r11, Z+1	; 0x01
     eac:	36 fe       	sbrs	r3, 6
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <vfprintf+0x146>
     eb0:	69 2d       	mov	r22, r9
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x14a>
     eb6:	6f ef       	ldi	r22, 0xFF	; 255
     eb8:	7f ef       	ldi	r23, 0xFF	; 255
     eba:	c5 01       	movw	r24, r10
     ebc:	0e 94 a7 08 	call	0x114e	; 0x114e <strnlen>
     ec0:	4c 01       	movw	r8, r24
     ec2:	82 01       	movw	r16, r4
     ec4:	f3 2d       	mov	r31, r3
     ec6:	ff 77       	andi	r31, 0x7F	; 127
     ec8:	3f 2e       	mov	r3, r31
     eca:	16 c0       	rjmp	.+44     	; 0xef8 <vfprintf+0x188>
     ecc:	28 01       	movw	r4, r16
     ece:	22 e0       	ldi	r18, 0x02	; 2
     ed0:	42 0e       	add	r4, r18
     ed2:	51 1c       	adc	r5, r1
     ed4:	f8 01       	movw	r30, r16
     ed6:	a0 80       	ld	r10, Z
     ed8:	b1 80       	ldd	r11, Z+1	; 0x01
     eda:	36 fe       	sbrs	r3, 6
     edc:	03 c0       	rjmp	.+6      	; 0xee4 <vfprintf+0x174>
     ede:	69 2d       	mov	r22, r9
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <vfprintf+0x178>
     ee4:	6f ef       	ldi	r22, 0xFF	; 255
     ee6:	7f ef       	ldi	r23, 0xFF	; 255
     ee8:	c5 01       	movw	r24, r10
     eea:	0e 94 9c 08 	call	0x1138	; 0x1138 <strnlen_P>
     eee:	4c 01       	movw	r8, r24
     ef0:	f3 2d       	mov	r31, r3
     ef2:	f0 68       	ori	r31, 0x80	; 128
     ef4:	3f 2e       	mov	r3, r31
     ef6:	82 01       	movw	r16, r4
     ef8:	33 fc       	sbrc	r3, 3
     efa:	1b c0       	rjmp	.+54     	; 0xf32 <vfprintf+0x1c2>
     efc:	82 2d       	mov	r24, r2
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	88 16       	cp	r8, r24
     f02:	99 06       	cpc	r9, r25
     f04:	b0 f4       	brcc	.+44     	; 0xf32 <vfprintf+0x1c2>
     f06:	b6 01       	movw	r22, r12
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
     f10:	2a 94       	dec	r2
     f12:	f4 cf       	rjmp	.-24     	; 0xefc <vfprintf+0x18c>
     f14:	f5 01       	movw	r30, r10
     f16:	37 fc       	sbrc	r3, 7
     f18:	85 91       	lpm	r24, Z+
     f1a:	37 fe       	sbrs	r3, 7
     f1c:	81 91       	ld	r24, Z+
     f1e:	5f 01       	movw	r10, r30
     f20:	b6 01       	movw	r22, r12
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
     f28:	21 10       	cpse	r2, r1
     f2a:	2a 94       	dec	r2
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	82 1a       	sub	r8, r18
     f30:	91 08       	sbc	r9, r1
     f32:	81 14       	cp	r8, r1
     f34:	91 04       	cpc	r9, r1
     f36:	71 f7       	brne	.-36     	; 0xf14 <vfprintf+0x1a4>
     f38:	e8 c0       	rjmp	.+464    	; 0x110a <vfprintf+0x39a>
     f3a:	84 36       	cpi	r24, 0x64	; 100
     f3c:	11 f0       	breq	.+4      	; 0xf42 <vfprintf+0x1d2>
     f3e:	89 36       	cpi	r24, 0x69	; 105
     f40:	41 f5       	brne	.+80     	; 0xf92 <vfprintf+0x222>
     f42:	f8 01       	movw	r30, r16
     f44:	37 fe       	sbrs	r3, 7
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <vfprintf+0x1e6>
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	0c 5f       	subi	r16, 0xFC	; 252
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <vfprintf+0x1f6>
     f56:	60 81       	ld	r22, Z
     f58:	71 81       	ldd	r23, Z+1	; 0x01
     f5a:	07 2e       	mov	r0, r23
     f5c:	00 0c       	add	r0, r0
     f5e:	88 0b       	sbc	r24, r24
     f60:	99 0b       	sbc	r25, r25
     f62:	0e 5f       	subi	r16, 0xFE	; 254
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	f3 2d       	mov	r31, r3
     f68:	ff 76       	andi	r31, 0x6F	; 111
     f6a:	3f 2e       	mov	r3, r31
     f6c:	97 ff       	sbrs	r25, 7
     f6e:	09 c0       	rjmp	.+18     	; 0xf82 <vfprintf+0x212>
     f70:	90 95       	com	r25
     f72:	80 95       	com	r24
     f74:	70 95       	com	r23
     f76:	61 95       	neg	r22
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	8f 4f       	sbci	r24, 0xFF	; 255
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	f0 68       	ori	r31, 0x80	; 128
     f80:	3f 2e       	mov	r3, r31
     f82:	2a e0       	ldi	r18, 0x0A	; 10
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	a3 01       	movw	r20, r6
     f88:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__ultoa_invert>
     f8c:	88 2e       	mov	r8, r24
     f8e:	86 18       	sub	r8, r6
     f90:	45 c0       	rjmp	.+138    	; 0x101c <vfprintf+0x2ac>
     f92:	85 37       	cpi	r24, 0x75	; 117
     f94:	31 f4       	brne	.+12     	; 0xfa2 <vfprintf+0x232>
     f96:	23 2d       	mov	r18, r3
     f98:	2f 7e       	andi	r18, 0xEF	; 239
     f9a:	b2 2e       	mov	r11, r18
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	25 c0       	rjmp	.+74     	; 0xfec <vfprintf+0x27c>
     fa2:	93 2d       	mov	r25, r3
     fa4:	99 7f       	andi	r25, 0xF9	; 249
     fa6:	b9 2e       	mov	r11, r25
     fa8:	8f 36       	cpi	r24, 0x6F	; 111
     faa:	c1 f0       	breq	.+48     	; 0xfdc <vfprintf+0x26c>
     fac:	18 f4       	brcc	.+6      	; 0xfb4 <vfprintf+0x244>
     fae:	88 35       	cpi	r24, 0x58	; 88
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <vfprintf+0x260>
     fb2:	b5 c0       	rjmp	.+362    	; 0x111e <vfprintf+0x3ae>
     fb4:	80 37       	cpi	r24, 0x70	; 112
     fb6:	19 f0       	breq	.+6      	; 0xfbe <vfprintf+0x24e>
     fb8:	88 37       	cpi	r24, 0x78	; 120
     fba:	21 f0       	breq	.+8      	; 0xfc4 <vfprintf+0x254>
     fbc:	b0 c0       	rjmp	.+352    	; 0x111e <vfprintf+0x3ae>
     fbe:	e9 2f       	mov	r30, r25
     fc0:	e0 61       	ori	r30, 0x10	; 16
     fc2:	be 2e       	mov	r11, r30
     fc4:	b4 fe       	sbrs	r11, 4
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <vfprintf+0x272>
     fc8:	fb 2d       	mov	r31, r11
     fca:	f4 60       	ori	r31, 0x04	; 4
     fcc:	bf 2e       	mov	r11, r31
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x272>
     fd0:	34 fe       	sbrs	r3, 4
     fd2:	0a c0       	rjmp	.+20     	; 0xfe8 <vfprintf+0x278>
     fd4:	29 2f       	mov	r18, r25
     fd6:	26 60       	ori	r18, 0x06	; 6
     fd8:	b2 2e       	mov	r11, r18
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <vfprintf+0x278>
     fdc:	28 e0       	ldi	r18, 0x08	; 8
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <vfprintf+0x27c>
     fe2:	20 e1       	ldi	r18, 0x10	; 16
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <vfprintf+0x27c>
     fe8:	20 e1       	ldi	r18, 0x10	; 16
     fea:	32 e0       	ldi	r19, 0x02	; 2
     fec:	f8 01       	movw	r30, r16
     fee:	b7 fe       	sbrs	r11, 7
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <vfprintf+0x290>
     ff2:	60 81       	ld	r22, Z
     ff4:	71 81       	ldd	r23, Z+1	; 0x01
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	93 81       	ldd	r25, Z+3	; 0x03
     ffa:	0c 5f       	subi	r16, 0xFC	; 252
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <vfprintf+0x29c>
    1000:	60 81       	ld	r22, Z
    1002:	71 81       	ldd	r23, Z+1	; 0x01
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 5f       	subi	r16, 0xFE	; 254
    100a:	1f 4f       	sbci	r17, 0xFF	; 255
    100c:	a3 01       	movw	r20, r6
    100e:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__ultoa_invert>
    1012:	88 2e       	mov	r8, r24
    1014:	86 18       	sub	r8, r6
    1016:	fb 2d       	mov	r31, r11
    1018:	ff 77       	andi	r31, 0x7F	; 127
    101a:	3f 2e       	mov	r3, r31
    101c:	36 fe       	sbrs	r3, 6
    101e:	0d c0       	rjmp	.+26     	; 0x103a <vfprintf+0x2ca>
    1020:	23 2d       	mov	r18, r3
    1022:	2e 7f       	andi	r18, 0xFE	; 254
    1024:	a2 2e       	mov	r10, r18
    1026:	89 14       	cp	r8, r9
    1028:	58 f4       	brcc	.+22     	; 0x1040 <vfprintf+0x2d0>
    102a:	34 fe       	sbrs	r3, 4
    102c:	0b c0       	rjmp	.+22     	; 0x1044 <vfprintf+0x2d4>
    102e:	32 fc       	sbrc	r3, 2
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <vfprintf+0x2d4>
    1032:	83 2d       	mov	r24, r3
    1034:	8e 7e       	andi	r24, 0xEE	; 238
    1036:	a8 2e       	mov	r10, r24
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <vfprintf+0x2d4>
    103a:	b8 2c       	mov	r11, r8
    103c:	a3 2c       	mov	r10, r3
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <vfprintf+0x2d6>
    1040:	b8 2c       	mov	r11, r8
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <vfprintf+0x2d6>
    1044:	b9 2c       	mov	r11, r9
    1046:	a4 fe       	sbrs	r10, 4
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <vfprintf+0x2f8>
    104a:	fe 01       	movw	r30, r28
    104c:	e8 0d       	add	r30, r8
    104e:	f1 1d       	adc	r31, r1
    1050:	80 81       	ld	r24, Z
    1052:	80 33       	cpi	r24, 0x30	; 48
    1054:	21 f4       	brne	.+8      	; 0x105e <vfprintf+0x2ee>
    1056:	9a 2d       	mov	r25, r10
    1058:	99 7e       	andi	r25, 0xE9	; 233
    105a:	a9 2e       	mov	r10, r25
    105c:	09 c0       	rjmp	.+18     	; 0x1070 <vfprintf+0x300>
    105e:	a2 fe       	sbrs	r10, 2
    1060:	06 c0       	rjmp	.+12     	; 0x106e <vfprintf+0x2fe>
    1062:	b3 94       	inc	r11
    1064:	b3 94       	inc	r11
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <vfprintf+0x300>
    1068:	8a 2d       	mov	r24, r10
    106a:	86 78       	andi	r24, 0x86	; 134
    106c:	09 f0       	breq	.+2      	; 0x1070 <vfprintf+0x300>
    106e:	b3 94       	inc	r11
    1070:	a3 fc       	sbrc	r10, 3
    1072:	11 c0       	rjmp	.+34     	; 0x1096 <vfprintf+0x326>
    1074:	a0 fe       	sbrs	r10, 0
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <vfprintf+0x314>
    1078:	b2 14       	cp	r11, r2
    107a:	88 f4       	brcc	.+34     	; 0x109e <vfprintf+0x32e>
    107c:	28 0c       	add	r2, r8
    107e:	92 2c       	mov	r9, r2
    1080:	9b 18       	sub	r9, r11
    1082:	0e c0       	rjmp	.+28     	; 0x10a0 <vfprintf+0x330>
    1084:	b2 14       	cp	r11, r2
    1086:	60 f4       	brcc	.+24     	; 0x10a0 <vfprintf+0x330>
    1088:	b6 01       	movw	r22, r12
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
    1092:	b3 94       	inc	r11
    1094:	f7 cf       	rjmp	.-18     	; 0x1084 <vfprintf+0x314>
    1096:	b2 14       	cp	r11, r2
    1098:	18 f4       	brcc	.+6      	; 0x10a0 <vfprintf+0x330>
    109a:	2b 18       	sub	r2, r11
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <vfprintf+0x332>
    109e:	98 2c       	mov	r9, r8
    10a0:	21 2c       	mov	r2, r1
    10a2:	a4 fe       	sbrs	r10, 4
    10a4:	10 c0       	rjmp	.+32     	; 0x10c6 <vfprintf+0x356>
    10a6:	b6 01       	movw	r22, r12
    10a8:	80 e3       	ldi	r24, 0x30	; 48
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
    10b0:	a2 fe       	sbrs	r10, 2
    10b2:	17 c0       	rjmp	.+46     	; 0x10e2 <vfprintf+0x372>
    10b4:	a1 fc       	sbrc	r10, 1
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <vfprintf+0x34e>
    10b8:	88 e7       	ldi	r24, 0x78	; 120
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <vfprintf+0x352>
    10be:	88 e5       	ldi	r24, 0x58	; 88
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b6 01       	movw	r22, r12
    10c4:	0c c0       	rjmp	.+24     	; 0x10de <vfprintf+0x36e>
    10c6:	8a 2d       	mov	r24, r10
    10c8:	86 78       	andi	r24, 0x86	; 134
    10ca:	59 f0       	breq	.+22     	; 0x10e2 <vfprintf+0x372>
    10cc:	a1 fe       	sbrs	r10, 1
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x364>
    10d0:	8b e2       	ldi	r24, 0x2B	; 43
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <vfprintf+0x366>
    10d4:	80 e2       	ldi	r24, 0x20	; 32
    10d6:	a7 fc       	sbrc	r10, 7
    10d8:	8d e2       	ldi	r24, 0x2D	; 45
    10da:	b6 01       	movw	r22, r12
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
    10e2:	89 14       	cp	r8, r9
    10e4:	38 f4       	brcc	.+14     	; 0x10f4 <vfprintf+0x384>
    10e6:	b6 01       	movw	r22, r12
    10e8:	80 e3       	ldi	r24, 0x30	; 48
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
    10f0:	9a 94       	dec	r9
    10f2:	f7 cf       	rjmp	.-18     	; 0x10e2 <vfprintf+0x372>
    10f4:	8a 94       	dec	r8
    10f6:	f3 01       	movw	r30, r6
    10f8:	e8 0d       	add	r30, r8
    10fa:	f1 1d       	adc	r31, r1
    10fc:	80 81       	ld	r24, Z
    10fe:	b6 01       	movw	r22, r12
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
    1106:	81 10       	cpse	r8, r1
    1108:	f5 cf       	rjmp	.-22     	; 0x10f4 <vfprintf+0x384>
    110a:	22 20       	and	r2, r2
    110c:	09 f4       	brne	.+2      	; 0x1110 <vfprintf+0x3a0>
    110e:	42 ce       	rjmp	.-892    	; 0xd94 <vfprintf+0x24>
    1110:	b6 01       	movw	r22, r12
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 b2 08 	call	0x1164	; 0x1164 <fputc>
    111a:	2a 94       	dec	r2
    111c:	f6 cf       	rjmp	.-20     	; 0x110a <vfprintf+0x39a>
    111e:	f6 01       	movw	r30, r12
    1120:	86 81       	ldd	r24, Z+6	; 0x06
    1122:	97 81       	ldd	r25, Z+7	; 0x07
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x3ba>
    1126:	8f ef       	ldi	r24, 0xFF	; 255
    1128:	9f ef       	ldi	r25, 0xFF	; 255
    112a:	2b 96       	adiw	r28, 0x0b	; 11
    112c:	e2 e1       	ldi	r30, 0x12	; 18
    112e:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__epilogue_restores__>

00001132 <__ctype_isfalse>:
    1132:	99 27       	eor	r25, r25
    1134:	88 27       	eor	r24, r24

00001136 <__ctype_istrue>:
    1136:	08 95       	ret

00001138 <strnlen_P>:
    1138:	fc 01       	movw	r30, r24
    113a:	05 90       	lpm	r0, Z+
    113c:	61 50       	subi	r22, 0x01	; 1
    113e:	70 40       	sbci	r23, 0x00	; 0
    1140:	01 10       	cpse	r0, r1
    1142:	d8 f7       	brcc	.-10     	; 0x113a <strnlen_P+0x2>
    1144:	80 95       	com	r24
    1146:	90 95       	com	r25
    1148:	8e 0f       	add	r24, r30
    114a:	9f 1f       	adc	r25, r31
    114c:	08 95       	ret

0000114e <strnlen>:
    114e:	fc 01       	movw	r30, r24
    1150:	61 50       	subi	r22, 0x01	; 1
    1152:	70 40       	sbci	r23, 0x00	; 0
    1154:	01 90       	ld	r0, Z+
    1156:	01 10       	cpse	r0, r1
    1158:	d8 f7       	brcc	.-10     	; 0x1150 <strnlen+0x2>
    115a:	80 95       	com	r24
    115c:	90 95       	com	r25
    115e:	8e 0f       	add	r24, r30
    1160:	9f 1f       	adc	r25, r31
    1162:	08 95       	ret

00001164 <fputc>:
    1164:	0f 93       	push	r16
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	fb 01       	movw	r30, r22
    116e:	23 81       	ldd	r18, Z+3	; 0x03
    1170:	21 fd       	sbrc	r18, 1
    1172:	03 c0       	rjmp	.+6      	; 0x117a <fputc+0x16>
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	2c c0       	rjmp	.+88     	; 0x11d2 <fputc+0x6e>
    117a:	22 ff       	sbrs	r18, 2
    117c:	16 c0       	rjmp	.+44     	; 0x11aa <fputc+0x46>
    117e:	46 81       	ldd	r20, Z+6	; 0x06
    1180:	57 81       	ldd	r21, Z+7	; 0x07
    1182:	24 81       	ldd	r18, Z+4	; 0x04
    1184:	35 81       	ldd	r19, Z+5	; 0x05
    1186:	42 17       	cp	r20, r18
    1188:	53 07       	cpc	r21, r19
    118a:	44 f4       	brge	.+16     	; 0x119c <fputc+0x38>
    118c:	a0 81       	ld	r26, Z
    118e:	b1 81       	ldd	r27, Z+1	; 0x01
    1190:	9d 01       	movw	r18, r26
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	31 83       	std	Z+1, r19	; 0x01
    1198:	20 83       	st	Z, r18
    119a:	8c 93       	st	X, r24
    119c:	26 81       	ldd	r18, Z+6	; 0x06
    119e:	37 81       	ldd	r19, Z+7	; 0x07
    11a0:	2f 5f       	subi	r18, 0xFF	; 255
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	37 83       	std	Z+7, r19	; 0x07
    11a6:	26 83       	std	Z+6, r18	; 0x06
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <fputc+0x6e>
    11aa:	8b 01       	movw	r16, r22
    11ac:	ec 01       	movw	r28, r24
    11ae:	fb 01       	movw	r30, r22
    11b0:	00 84       	ldd	r0, Z+8	; 0x08
    11b2:	f1 85       	ldd	r31, Z+9	; 0x09
    11b4:	e0 2d       	mov	r30, r0
    11b6:	09 95       	icall
    11b8:	89 2b       	or	r24, r25
    11ba:	e1 f6       	brne	.-72     	; 0x1174 <fputc+0x10>
    11bc:	d8 01       	movw	r26, r16
    11be:	16 96       	adiw	r26, 0x06	; 6
    11c0:	8d 91       	ld	r24, X+
    11c2:	9c 91       	ld	r25, X
    11c4:	17 97       	sbiw	r26, 0x07	; 7
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	17 96       	adiw	r26, 0x07	; 7
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	16 97       	sbiw	r26, 0x06	; 6
    11d0:	ce 01       	movw	r24, r28
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <__ultoa_invert>:
    11dc:	fa 01       	movw	r30, r20
    11de:	aa 27       	eor	r26, r26
    11e0:	28 30       	cpi	r18, 0x08	; 8
    11e2:	51 f1       	breq	.+84     	; 0x1238 <__ultoa_invert+0x5c>
    11e4:	20 31       	cpi	r18, 0x10	; 16
    11e6:	81 f1       	breq	.+96     	; 0x1248 <__ultoa_invert+0x6c>
    11e8:	e8 94       	clt
    11ea:	6f 93       	push	r22
    11ec:	6e 7f       	andi	r22, 0xFE	; 254
    11ee:	6e 5f       	subi	r22, 0xFE	; 254
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	af 4f       	sbci	r26, 0xFF	; 255
    11f8:	b1 e0       	ldi	r27, 0x01	; 1
    11fa:	3e d0       	rcall	.+124    	; 0x1278 <__ultoa_invert+0x9c>
    11fc:	b4 e0       	ldi	r27, 0x04	; 4
    11fe:	3c d0       	rcall	.+120    	; 0x1278 <__ultoa_invert+0x9c>
    1200:	67 0f       	add	r22, r23
    1202:	78 1f       	adc	r23, r24
    1204:	89 1f       	adc	r24, r25
    1206:	9a 1f       	adc	r25, r26
    1208:	a1 1d       	adc	r26, r1
    120a:	68 0f       	add	r22, r24
    120c:	79 1f       	adc	r23, r25
    120e:	8a 1f       	adc	r24, r26
    1210:	91 1d       	adc	r25, r1
    1212:	a1 1d       	adc	r26, r1
    1214:	6a 0f       	add	r22, r26
    1216:	71 1d       	adc	r23, r1
    1218:	81 1d       	adc	r24, r1
    121a:	91 1d       	adc	r25, r1
    121c:	a1 1d       	adc	r26, r1
    121e:	20 d0       	rcall	.+64     	; 0x1260 <__ultoa_invert+0x84>
    1220:	09 f4       	brne	.+2      	; 0x1224 <__ultoa_invert+0x48>
    1222:	68 94       	set
    1224:	3f 91       	pop	r19
    1226:	2a e0       	ldi	r18, 0x0A	; 10
    1228:	26 9f       	mul	r18, r22
    122a:	11 24       	eor	r1, r1
    122c:	30 19       	sub	r19, r0
    122e:	30 5d       	subi	r19, 0xD0	; 208
    1230:	31 93       	st	Z+, r19
    1232:	de f6       	brtc	.-74     	; 0x11ea <__ultoa_invert+0xe>
    1234:	cf 01       	movw	r24, r30
    1236:	08 95       	ret
    1238:	46 2f       	mov	r20, r22
    123a:	47 70       	andi	r20, 0x07	; 7
    123c:	40 5d       	subi	r20, 0xD0	; 208
    123e:	41 93       	st	Z+, r20
    1240:	b3 e0       	ldi	r27, 0x03	; 3
    1242:	0f d0       	rcall	.+30     	; 0x1262 <__ultoa_invert+0x86>
    1244:	c9 f7       	brne	.-14     	; 0x1238 <__ultoa_invert+0x5c>
    1246:	f6 cf       	rjmp	.-20     	; 0x1234 <__ultoa_invert+0x58>
    1248:	46 2f       	mov	r20, r22
    124a:	4f 70       	andi	r20, 0x0F	; 15
    124c:	40 5d       	subi	r20, 0xD0	; 208
    124e:	4a 33       	cpi	r20, 0x3A	; 58
    1250:	18 f0       	brcs	.+6      	; 0x1258 <__ultoa_invert+0x7c>
    1252:	49 5d       	subi	r20, 0xD9	; 217
    1254:	31 fd       	sbrc	r19, 1
    1256:	40 52       	subi	r20, 0x20	; 32
    1258:	41 93       	st	Z+, r20
    125a:	02 d0       	rcall	.+4      	; 0x1260 <__ultoa_invert+0x84>
    125c:	a9 f7       	brne	.-22     	; 0x1248 <__ultoa_invert+0x6c>
    125e:	ea cf       	rjmp	.-44     	; 0x1234 <__ultoa_invert+0x58>
    1260:	b4 e0       	ldi	r27, 0x04	; 4
    1262:	a6 95       	lsr	r26
    1264:	97 95       	ror	r25
    1266:	87 95       	ror	r24
    1268:	77 95       	ror	r23
    126a:	67 95       	ror	r22
    126c:	ba 95       	dec	r27
    126e:	c9 f7       	brne	.-14     	; 0x1262 <__ultoa_invert+0x86>
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	61 05       	cpc	r22, r1
    1274:	71 05       	cpc	r23, r1
    1276:	08 95       	ret
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	0a 2e       	mov	r0, r26
    127e:	06 94       	lsr	r0
    1280:	57 95       	ror	r21
    1282:	47 95       	ror	r20
    1284:	37 95       	ror	r19
    1286:	27 95       	ror	r18
    1288:	ba 95       	dec	r27
    128a:	c9 f7       	brne	.-14     	; 0x127e <__ultoa_invert+0xa2>
    128c:	62 0f       	add	r22, r18
    128e:	73 1f       	adc	r23, r19
    1290:	84 1f       	adc	r24, r20
    1292:	95 1f       	adc	r25, r21
    1294:	a0 1d       	adc	r26, r0
    1296:	08 95       	ret

00001298 <__mulsi3>:
    1298:	db 01       	movw	r26, r22
    129a:	8f 93       	push	r24
    129c:	9f 93       	push	r25
    129e:	0e 94 7e 09 	call	0x12fc	; 0x12fc <__muluhisi3>
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	a2 9f       	mul	r26, r18
    12a8:	80 0d       	add	r24, r0
    12aa:	91 1d       	adc	r25, r1
    12ac:	a3 9f       	mul	r26, r19
    12ae:	90 0d       	add	r25, r0
    12b0:	b2 9f       	mul	r27, r18
    12b2:	90 0d       	add	r25, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	08 95       	ret

000012b8 <__udivmodsi4>:
    12b8:	a1 e2       	ldi	r26, 0x21	; 33
    12ba:	1a 2e       	mov	r1, r26
    12bc:	aa 1b       	sub	r26, r26
    12be:	bb 1b       	sub	r27, r27
    12c0:	fd 01       	movw	r30, r26
    12c2:	0d c0       	rjmp	.+26     	; 0x12de <__udivmodsi4_ep>

000012c4 <__udivmodsi4_loop>:
    12c4:	aa 1f       	adc	r26, r26
    12c6:	bb 1f       	adc	r27, r27
    12c8:	ee 1f       	adc	r30, r30
    12ca:	ff 1f       	adc	r31, r31
    12cc:	a2 17       	cp	r26, r18
    12ce:	b3 07       	cpc	r27, r19
    12d0:	e4 07       	cpc	r30, r20
    12d2:	f5 07       	cpc	r31, r21
    12d4:	20 f0       	brcs	.+8      	; 0x12de <__udivmodsi4_ep>
    12d6:	a2 1b       	sub	r26, r18
    12d8:	b3 0b       	sbc	r27, r19
    12da:	e4 0b       	sbc	r30, r20
    12dc:	f5 0b       	sbc	r31, r21

000012de <__udivmodsi4_ep>:
    12de:	66 1f       	adc	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	1a 94       	dec	r1
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <__udivmodsi4_loop>
    12ea:	60 95       	com	r22
    12ec:	70 95       	com	r23
    12ee:	80 95       	com	r24
    12f0:	90 95       	com	r25
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	bd 01       	movw	r22, r26
    12f8:	cf 01       	movw	r24, r30
    12fa:	08 95       	ret

000012fc <__muluhisi3>:
    12fc:	0e 94 c0 09 	call	0x1380	; 0x1380 <__umulhisi3>
    1300:	a5 9f       	mul	r26, r21
    1302:	90 0d       	add	r25, r0
    1304:	b4 9f       	mul	r27, r20
    1306:	90 0d       	add	r25, r0
    1308:	a4 9f       	mul	r26, r20
    130a:	80 0d       	add	r24, r0
    130c:	91 1d       	adc	r25, r1
    130e:	11 24       	eor	r1, r1
    1310:	08 95       	ret

00001312 <__prologue_saves__>:
    1312:	2f 92       	push	r2
    1314:	3f 92       	push	r3
    1316:	4f 92       	push	r4
    1318:	5f 92       	push	r5
    131a:	6f 92       	push	r6
    131c:	7f 92       	push	r7
    131e:	8f 92       	push	r8
    1320:	9f 92       	push	r9
    1322:	af 92       	push	r10
    1324:	bf 92       	push	r11
    1326:	cf 92       	push	r12
    1328:	df 92       	push	r13
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	ca 1b       	sub	r28, r26
    133c:	db 0b       	sbc	r29, r27
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	09 94       	ijmp

0000134a <__epilogue_restores__>:
    134a:	2a 88       	ldd	r2, Y+18	; 0x12
    134c:	39 88       	ldd	r3, Y+17	; 0x11
    134e:	48 88       	ldd	r4, Y+16	; 0x10
    1350:	5f 84       	ldd	r5, Y+15	; 0x0f
    1352:	6e 84       	ldd	r6, Y+14	; 0x0e
    1354:	7d 84       	ldd	r7, Y+13	; 0x0d
    1356:	8c 84       	ldd	r8, Y+12	; 0x0c
    1358:	9b 84       	ldd	r9, Y+11	; 0x0b
    135a:	aa 84       	ldd	r10, Y+10	; 0x0a
    135c:	b9 84       	ldd	r11, Y+9	; 0x09
    135e:	c8 84       	ldd	r12, Y+8	; 0x08
    1360:	df 80       	ldd	r13, Y+7	; 0x07
    1362:	ee 80       	ldd	r14, Y+6	; 0x06
    1364:	fd 80       	ldd	r15, Y+5	; 0x05
    1366:	0c 81       	ldd	r16, Y+4	; 0x04
    1368:	1b 81       	ldd	r17, Y+3	; 0x03
    136a:	aa 81       	ldd	r26, Y+2	; 0x02
    136c:	b9 81       	ldd	r27, Y+1	; 0x01
    136e:	ce 0f       	add	r28, r30
    1370:	d1 1d       	adc	r29, r1
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	ed 01       	movw	r28, r26
    137e:	08 95       	ret

00001380 <__umulhisi3>:
    1380:	a2 9f       	mul	r26, r18
    1382:	b0 01       	movw	r22, r0
    1384:	b3 9f       	mul	r27, r19
    1386:	c0 01       	movw	r24, r0
    1388:	a3 9f       	mul	r26, r19
    138a:	70 0d       	add	r23, r0
    138c:	81 1d       	adc	r24, r1
    138e:	11 24       	eor	r1, r1
    1390:	91 1d       	adc	r25, r1
    1392:	b2 9f       	mul	r27, r18
    1394:	70 0d       	add	r23, r0
    1396:	81 1d       	adc	r24, r1
    1398:	11 24       	eor	r1, r1
    139a:	91 1d       	adc	r25, r1
    139c:	08 95       	ret

0000139e <_exit>:
    139e:	f8 94       	cli

000013a0 <__stop_program>:
    13a0:	ff cf       	rjmp	.-2      	; 0x13a0 <__stop_program>
