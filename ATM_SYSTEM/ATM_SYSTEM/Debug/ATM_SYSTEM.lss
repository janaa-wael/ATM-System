
ATM_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001694  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  00001694  00001728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008001e6  008001e6  000018ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a8e  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec3  00000000  00000000  0000466e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001621  00000000  00000000  00005531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d4  00000000  00000000  00006b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cb  00000000  00000000  00007228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b77  00000000  00000000  00007bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  0000976a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__vector_1>
       8:	0c 94 d6 07 	jmp	0xfac	; 0xfac <__vector_2>
       c:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 03 	call	0x77a	; 0x77a <main>
      8a:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HAL_Init>:
u8 pass[10] = "123";
u32 balance = 0;

void HAL_Init()
{
	 LCD_voidInit();
      92:	0e 94 e6 04 	call	0x9cc	; 0x9cc <LCD_voidInit>
	 KEYPAD_voidInit();
      96:	0e 94 0d 04 	call	0x81a	; 0x81a <KEYPAD_voidInit>
	 LEDS_INIT();
      9a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <LEDS_INIT>
	 BUZZER_Init();
      9e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <BUZZER_Init>
      a2:	08 95       	ret

000000a4 <APP_voidWelcomeMessage>:
}

void APP_voidWelcomeMessage()
{
	 LCD_voidSendString("Hello :)");
      a4:	86 e7       	ldi	r24, 0x76	; 118
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ac:	2f e7       	ldi	r18, 0x7F	; 127
      ae:	8a e1       	ldi	r24, 0x1A	; 26
      b0:	96 e0       	ldi	r25, 0x06	; 6
      b2:	21 50       	subi	r18, 0x01	; 1
      b4:	80 40       	sbci	r24, 0x00	; 0
      b6:	90 40       	sbci	r25, 0x00	; 0
      b8:	e1 f7       	brne	.-8      	; 0xb2 <APP_voidWelcomeMessage+0xe>
      ba:	00 c0       	rjmp	.+0      	; 0xbc <APP_voidWelcomeMessage+0x18>
      bc:	00 00       	nop
	  _delay_ms(2000);
	  LCD_voidClearScreen();
      be:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
	  LCD_voidSendString("  Welcome to VS");
      c2:	8f e7       	ldi	r24, 0x7F	; 127
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	  LCD_voidSetCursor(1,0);
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
	  LCD_voidSendString("    System");
      d2:	8f e8       	ldi	r24, 0x8F	; 143
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
      da:	2f e7       	ldi	r18, 0x7F	; 127
      dc:	8a e1       	ldi	r24, 0x1A	; 26
      de:	96 e0       	ldi	r25, 0x06	; 6
      e0:	21 50       	subi	r18, 0x01	; 1
      e2:	80 40       	sbci	r24, 0x00	; 0
      e4:	90 40       	sbci	r25, 0x00	; 0
      e6:	e1 f7       	brne	.-8      	; 0xe0 <APP_voidWelcomeMessage+0x3c>
      e8:	00 c0       	rjmp	.+0      	; 0xea <APP_voidWelcomeMessage+0x46>
      ea:	00 00       	nop
      ec:	08 95       	ret

000000ee <APP_voidBuzzerLedIndicator>:
	LCD_voidSendString("Incorrect Pass!!");
	APP_voidBuzzerLedIndicator(BUZZER_WARNING,RED_LED,4);
}

void APP_voidBuzzerLedIndicator(u8 BUZZER_ID, u8 LED_ID, u8 delay)
{
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	08 2f       	mov	r16, r24
      f8:	16 2f       	mov	r17, r22
      fa:	c4 2f       	mov	r28, r20
	for(u8 i = 0 ; i<8 ; i++)
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	12 c0       	rjmp	.+36     	; 0x124 <APP_voidBuzzerLedIndicator+0x36>
	{
		LED_TOGGLE(LED_ID);
     100:	81 2f       	mov	r24, r17
     102:	0e 94 0d 06 	call	0xc1a	; 0xc1a <LED_TOGGLE>
		BUZZER_TOGGLE(BUZZER_ID);
     106:	80 2f       	mov	r24, r16
     108:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <BUZZER_TOGGLE>
		for(u8 j = 0 ; j < delay ; j++)
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	07 c0       	rjmp	.+14     	; 0x11e <APP_voidBuzzerLedIndicator+0x30>
     110:	e7 ea       	ldi	r30, 0xA7	; 167
     112:	f1 e6       	ldi	r31, 0x61	; 97
     114:	31 97       	sbiw	r30, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <APP_voidBuzzerLedIndicator+0x26>
     118:	00 c0       	rjmp	.+0      	; 0x11a <APP_voidBuzzerLedIndicator+0x2c>
     11a:	00 00       	nop
     11c:	8f 5f       	subi	r24, 0xFF	; 255
     11e:	8c 17       	cp	r24, r28
     120:	b8 f3       	brcs	.-18     	; 0x110 <APP_voidBuzzerLedIndicator+0x22>
	APP_voidBuzzerLedIndicator(BUZZER_WARNING,RED_LED,4);
}

void APP_voidBuzzerLedIndicator(u8 BUZZER_ID, u8 LED_ID, u8 delay)
{
	for(u8 i = 0 ; i<8 ; i++)
     122:	df 5f       	subi	r29, 0xFF	; 255
     124:	d8 30       	cpi	r29, 0x08	; 8
     126:	60 f3       	brcs	.-40     	; 0x100 <APP_voidBuzzerLedIndicator+0x12>
		LED_TOGGLE(LED_ID);
		BUZZER_TOGGLE(BUZZER_ID);
		for(u8 j = 0 ; j < delay ; j++)
		_delay_ms(100);
	}	
}
     128:	df 91       	pop	r29
     12a:	cf 91       	pop	r28
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	08 95       	ret

00000132 <APP_voidCorrectPassword>:
	
}

void APP_voidCorrectPassword()
{
	LCD_voidSendString("Correct Password!");
     132:	8a e9       	ldi	r24, 0x9A	; 154
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	APP_voidBuzzerLedIndicator(BUZZER_PROCEEDING,GREEN_LED,2);
     13a:	42 e0       	ldi	r20, 0x02	; 2
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	0e 94 77 00 	call	0xee	; 0xee <APP_voidBuzzerLedIndicator>
     144:	08 95       	ret

00000146 <APP_voidIncorrectPassword>:
}

void APP_voidIncorrectPassword()
{
	LCD_voidSendString("Incorrect Pass!!");
     146:	8c ea       	ldi	r24, 0xAC	; 172
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	APP_voidBuzzerLedIndicator(BUZZER_WARNING,RED_LED,4);
     14e:	44 e0       	ldi	r20, 0x04	; 4
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 77 00 	call	0xee	; 0xee <APP_voidBuzzerLedIndicator>
     158:	08 95       	ret

0000015a <APP_voidCheckPassword>:
	  LCD_voidSendString("    System");
	  _delay_ms(2000);
}

void APP_voidCheckPassword()
{
     15a:	ff 92       	push	r15
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	00 d0       	rcall	.+0      	; 0x166 <APP_voidCheckPassword+0xc>
     166:	00 d0       	rcall	.+0      	; 0x168 <APP_voidCheckPassword+0xe>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
	u8 login_flag = 0;
     16c:	10 e0       	ldi	r17, 0x00	; 0
	do 
	{
		u8 input_pass[4] = "xxx";
     16e:	88 e7       	ldi	r24, 0x78	; 120
     170:	98 e7       	ldi	r25, 0x78	; 120
     172:	9a 83       	std	Y+2, r25	; 0x02
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	88 e7       	ldi	r24, 0x78	; 120
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9c 83       	std	Y+4, r25	; 0x04
     17c:	8b 83       	std	Y+3, r24	; 0x03
		LCD_voidClearScreen();
     17e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
		if(!login_flag)
     182:	11 11       	cpse	r17, r1
     184:	05 c0       	rjmp	.+10     	; 0x190 <APP_voidCheckPassword+0x36>
			LCD_voidSendString("Enter password :");
     186:	8d eb       	ldi	r24, 0xBD	; 189
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
     18e:	04 c0       	rjmp	.+8      	; 0x198 <APP_voidCheckPassword+0x3e>
		else
			LCD_voidSendString("Reenter ur pass");
     190:	8e ec       	ldi	r24, 0xCE	; 206
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
		LCD_voidSetCursor(1,0);
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
		for(u8 i = 0 ; i < 3 ; i++)
     1a0:	f1 2c       	mov	r15, r1
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <APP_voidCheckPassword+0x78>
		{
			while(input_pass[i] == 'x')
			input_pass[i] = KEYPAD_READ();
     1a4:	0e 94 1e 04 	call	0x83c	; 0x83c <KEYPAD_READ>
     1a8:	e1 e0       	ldi	r30, 0x01	; 1
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	ec 0f       	add	r30, r28
     1ae:	fd 1f       	adc	r31, r29
     1b0:	e0 0f       	add	r30, r16
     1b2:	f1 1f       	adc	r31, r17
     1b4:	80 83       	st	Z, r24
		else
			LCD_voidSendString("Reenter ur pass");
		LCD_voidSetCursor(1,0);
		for(u8 i = 0 ; i < 3 ; i++)
		{
			while(input_pass[i] == 'x')
     1b6:	0f 2d       	mov	r16, r15
     1b8:	10 e0       	ldi	r17, 0x00	; 0
     1ba:	e1 e0       	ldi	r30, 0x01	; 1
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	ec 0f       	add	r30, r28
     1c0:	fd 1f       	adc	r31, r29
     1c2:	e0 0f       	add	r30, r16
     1c4:	f1 1f       	adc	r31, r17
     1c6:	80 81       	ld	r24, Z
     1c8:	88 37       	cpi	r24, 0x78	; 120
     1ca:	61 f3       	breq	.-40     	; 0x1a4 <APP_voidCheckPassword+0x4a>
			input_pass[i] = KEYPAD_READ();
			LCD_voidSendData(input_pass[i]);
     1cc:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_voidSendData>
		if(!login_flag)
			LCD_voidSendString("Enter password :");
		else
			LCD_voidSendString("Reenter ur pass");
		LCD_voidSetCursor(1,0);
		for(u8 i = 0 ; i < 3 ; i++)
     1d0:	f3 94       	inc	r15
     1d2:	22 e0       	ldi	r18, 0x02	; 2
     1d4:	2f 15       	cp	r18, r15
     1d6:	78 f7       	brcc	.-34     	; 0x1b6 <APP_voidCheckPassword+0x5c>
     1d8:	8f e3       	ldi	r24, 0x3F	; 63
     1da:	9d e0       	ldi	r25, 0x0D	; 13
     1dc:	23 e0       	ldi	r18, 0x03	; 3
     1de:	81 50       	subi	r24, 0x01	; 1
     1e0:	90 40       	sbci	r25, 0x00	; 0
     1e2:	20 40       	sbci	r18, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <APP_voidCheckPassword+0x84>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <APP_voidCheckPassword+0x8e>
     1e8:	00 00       	nop
			while(input_pass[i] == 'x')
			input_pass[i] = KEYPAD_READ();
			LCD_voidSendData(input_pass[i]);
		}
		_delay_ms(1000);
		LCD_voidClearScreen();
     1ea:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
		if(!strcmp(input_pass,pass))
     1ee:	60 e6       	ldi	r22, 0x60	; 96
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	ce 01       	movw	r24, r28
     1f4:	01 96       	adiw	r24, 0x01	; 1
     1f6:	0e 94 46 08 	call	0x108c	; 0x108c <strcmp>
     1fa:	89 2b       	or	r24, r25
     1fc:	21 f4       	brne	.+8      	; 0x206 <APP_voidCheckPassword+0xac>
		{
			login_flag = 0;
			APP_voidCorrectPassword();
     1fe:	0e 94 99 00 	call	0x132	; 0x132 <APP_voidCorrectPassword>
		}
		_delay_ms(1000);
		LCD_voidClearScreen();
		if(!strcmp(input_pass,pass))
		{
			login_flag = 0;
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	03 c0       	rjmp	.+6      	; 0x20c <APP_voidCheckPassword+0xb2>
			APP_voidCorrectPassword();
		}
		else
		{
			login_flag = 1;
			APP_voidIncorrectPassword();
     206:	0e 94 a3 00 	call	0x146	; 0x146 <APP_voidIncorrectPassword>
			login_flag = 0;
			APP_voidCorrectPassword();
		}
		else
		{
			login_flag = 1;
     20a:	11 e0       	ldi	r17, 0x01	; 1
			APP_voidIncorrectPassword();
		}
	} while (login_flag == 1);
     20c:	11 30       	cpi	r17, 0x01	; 1
     20e:	09 f4       	brne	.+2      	; 0x212 <APP_voidCheckPassword+0xb8>
     210:	ae cf       	rjmp	.-164    	; 0x16e <APP_voidCheckPassword+0x14>
	
}
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	ff 90       	pop	r15
     224:	08 95       	ret

00000226 <APP_u8KeypadInput>:
}


u8 APP_u8KeypadInput()
{
	u8 user_choice = 'x';
     226:	88 e7       	ldi	r24, 0x78	; 120
	while(user_choice == 'x')
     228:	02 c0       	rjmp	.+4      	; 0x22e <APP_u8KeypadInput+0x8>
		user_choice = KEYPAD_READ();
     22a:	0e 94 1e 04 	call	0x83c	; 0x83c <KEYPAD_READ>


u8 APP_u8KeypadInput()
{
	u8 user_choice = 'x';
	while(user_choice == 'x')
     22e:	88 37       	cpi	r24, 0x78	; 120
     230:	e1 f3       	breq	.-8      	; 0x22a <APP_u8KeypadInput+0x4>
		user_choice = KEYPAD_READ();
	return user_choice;
}
     232:	08 95       	ret

00000234 <APP_voidChangePassword>:
	LCD_voidSetStringPos(1,0,balance_str);
	_delay_ms(2000);
}

void APP_voidChangePassword()
{
     234:	ef 92       	push	r14
     236:	ff 92       	push	r15
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	2a 97       	sbiw	r28, 0x0a	; 10
     246:	0f b6       	in	r0, 0x3f	; 63
     248:	f8 94       	cli
     24a:	de bf       	out	0x3e, r29	; 62
     24c:	0f be       	out	0x3f, r0	; 63
     24e:	cd bf       	out	0x3d, r28	; 61
	u8 pass_strength_flag = 1;
     250:	21 e0       	ldi	r18, 0x01	; 1
	u8 input_pass[10];
	do{
		input_pass[10] = "";
     252:	8c eb       	ldi	r24, 0xBC	; 188
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	8b 87       	std	Y+11, r24	; 0x0b
		u8 num_of_characters = 0, i = 0;
		if(pass_strength_flag)
     258:	22 23       	and	r18, r18
     25a:	81 f0       	breq	.+32     	; 0x27c <APP_voidChangePassword+0x48>
		{
			LCD_voidSetStringPos(2,0,"Change Password :");
     25c:	4e ed       	ldi	r20, 0xDE	; 222
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
     268:	2f e3       	ldi	r18, 0x3F	; 63
     26a:	8d e0       	ldi	r24, 0x0D	; 13
     26c:	93 e0       	ldi	r25, 0x03	; 3
     26e:	21 50       	subi	r18, 0x01	; 1
     270:	80 40       	sbci	r24, 0x00	; 0
     272:	90 40       	sbci	r25, 0x00	; 0
     274:	e1 f7       	brne	.-8      	; 0x26e <APP_voidChangePassword+0x3a>
     276:	00 c0       	rjmp	.+0      	; 0x278 <APP_voidChangePassword+0x44>
     278:	00 00       	nop
     27a:	15 c0       	rjmp	.+42     	; 0x2a6 <APP_voidChangePassword+0x72>
			_delay_ms(1000);
		}
		else
		{
			LCD_voidSetStringPos(0,0,"Password len < 8");
     27c:	40 ef       	ldi	r20, 0xF0	; 240
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
     288:	2f eb       	ldi	r18, 0xBF	; 191
     28a:	87 e2       	ldi	r24, 0x27	; 39
     28c:	99 e0       	ldi	r25, 0x09	; 9
     28e:	21 50       	subi	r18, 0x01	; 1
     290:	80 40       	sbci	r24, 0x00	; 0
     292:	90 40       	sbci	r25, 0x00	; 0
     294:	e1 f7       	brne	.-8      	; 0x28e <APP_voidChangePassword+0x5a>
     296:	00 c0       	rjmp	.+0      	; 0x298 <APP_voidChangePassword+0x64>
     298:	00 00       	nop
			_delay_ms(3000);
			LCD_voidClearScreen();
     29a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
			LCD_voidSendString("Try again");
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
		}
		LCD_voidSetCursor(1,0);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
{
	u8 pass_strength_flag = 1;
	u8 input_pass[10];
	do{
		input_pass[10] = "";
		u8 num_of_characters = 0, i = 0;
     2ae:	f1 2c       	mov	r15, r1
     2b0:	e1 2c       	mov	r14, r1
			_delay_ms(3000);
			LCD_voidClearScreen();
			LCD_voidSendString("Try again");
		}
		LCD_voidSetCursor(1,0);
		while(input_pass[i-1] != '=')
     2b2:	0d c0       	rjmp	.+26     	; 0x2ce <APP_voidChangePassword+0x9a>
		{
			input_pass[i] = APP_u8KeypadInput();
     2b4:	0e 94 13 01 	call	0x226	; 0x226 <APP_u8KeypadInput>
     2b8:	e1 e0       	ldi	r30, 0x01	; 1
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	ec 0f       	add	r30, r28
     2be:	fd 1f       	adc	r31, r29
     2c0:	e0 0f       	add	r30, r16
     2c2:	f1 1f       	adc	r31, r17
     2c4:	80 83       	st	Z, r24
			LCD_voidSendData(input_pass[i++]);
     2c6:	f3 94       	inc	r15
     2c8:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_voidSendData>
			num_of_characters++;
     2cc:	e3 94       	inc	r14
			_delay_ms(3000);
			LCD_voidClearScreen();
			LCD_voidSendString("Try again");
		}
		LCD_voidSetCursor(1,0);
		while(input_pass[i-1] != '=')
     2ce:	0f 2d       	mov	r16, r15
     2d0:	10 e0       	ldi	r17, 0x00	; 0
     2d2:	f8 01       	movw	r30, r16
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8c 0f       	add	r24, r28
     2dc:	9d 1f       	adc	r25, r29
     2de:	e8 0f       	add	r30, r24
     2e0:	f9 1f       	adc	r31, r25
     2e2:	80 81       	ld	r24, Z
     2e4:	8d 33       	cpi	r24, 0x3D	; 61
     2e6:	31 f7       	brne	.-52     	; 0x2b4 <APP_voidChangePassword+0x80>
		{
			input_pass[i] = APP_u8KeypadInput();
			LCD_voidSendData(input_pass[i++]);
			num_of_characters++;
		}
		LCD_voidClearScreen();
     2e8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
		input_pass[i] = '\0';
     2ec:	e1 e0       	ldi	r30, 0x01	; 1
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ec 0f       	add	r30, r28
     2f2:	fd 1f       	adc	r31, r29
     2f4:	e0 0f       	add	r30, r16
     2f6:	f1 1f       	adc	r31, r17
     2f8:	10 82       	st	Z, r1
		pass_strength_flag = ((num_of_characters-1)>=8)? 1:0;
     2fa:	8e 2d       	mov	r24, r14
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	88 30       	cpi	r24, 0x08	; 8
     304:	91 05       	cpc	r25, r1
     306:	0c f4       	brge	.+2      	; 0x30a <APP_voidChangePassword+0xd6>
     308:	20 e0       	ldi	r18, 0x00	; 0
		
	}while(pass_strength_flag == 0);
     30a:	08 97       	sbiw	r24, 0x08	; 8
     30c:	0c f4       	brge	.+2      	; 0x310 <APP_voidChangePassword+0xdc>
     30e:	a1 cf       	rjmp	.-190    	; 0x252 <APP_voidChangePassword+0x1e>
	strcpy(pass,input_pass);
     310:	be 01       	movw	r22, r28
     312:	6f 5f       	subi	r22, 0xFF	; 255
     314:	7f 4f       	sbci	r23, 0xFF	; 255
     316:	80 e6       	ldi	r24, 0x60	; 96
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 4f 08 	call	0x109e	; 0x109e <strcpy>
}
     31e:	2a 96       	adiw	r28, 0x0a	; 10
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	08 95       	ret

00000338 <APP_voidConvertIntToStr>:

void APP_voidConvertIntToStr(u32 x, u8* str)
{
	sprintf(str, "%d", x);
     338:	9f 93       	push	r25
     33a:	8f 93       	push	r24
     33c:	7f 93       	push	r23
     33e:	6f 93       	push	r22
     340:	8b e0       	ldi	r24, 0x0B	; 11
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	9f 93       	push	r25
     346:	8f 93       	push	r24
     348:	5f 93       	push	r21
     34a:	4f 93       	push	r20
     34c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <sprintf>
}
     350:	8d b7       	in	r24, 0x3d	; 61
     352:	9e b7       	in	r25, 0x3e	; 62
     354:	08 96       	adiw	r24, 0x08	; 8
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	9e bf       	out	0x3e, r25	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	8d bf       	out	0x3d, r24	; 61
     360:	08 95       	ret

00000362 <APP_voidViewBalance>:
	_delay_ms(1000);

}

void APP_voidViewBalance()
{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	60 97       	sbiw	r28, 0x10	; 16
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
	u8 balance_str[16];
	LCD_voidSendString("Balance :");
     376:	8e e0       	ldi	r24, 0x0E	; 14
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	APP_voidConvertIntToStr(balance,balance_str);
     37e:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <__data_end>
     382:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <__data_end+0x1>
     386:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <__data_end+0x2>
     38a:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <__data_end+0x3>
     38e:	ae 01       	movw	r20, r28
     390:	4f 5f       	subi	r20, 0xFF	; 255
     392:	5f 4f       	sbci	r21, 0xFF	; 255
     394:	0e 94 9c 01 	call	0x338	; 0x338 <APP_voidConvertIntToStr>
	LCD_voidSetStringPos(1,0,balance_str);
     398:	ae 01       	movw	r20, r28
     39a:	4f 5f       	subi	r20, 0xFF	; 255
     39c:	5f 4f       	sbci	r21, 0xFF	; 255
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
     3a6:	2f e7       	ldi	r18, 0x7F	; 127
     3a8:	8a e1       	ldi	r24, 0x1A	; 26
     3aa:	96 e0       	ldi	r25, 0x06	; 6
     3ac:	21 50       	subi	r18, 0x01	; 1
     3ae:	80 40       	sbci	r24, 0x00	; 0
     3b0:	90 40       	sbci	r25, 0x00	; 0
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <APP_voidViewBalance+0x4a>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <APP_voidViewBalance+0x54>
     3b6:	00 00       	nop
	_delay_ms(2000);
}
     3b8:	60 96       	adiw	r28, 0x10	; 16
     3ba:	0f b6       	in	r0, 0x3f	; 63
     3bc:	f8 94       	cli
     3be:	de bf       	out	0x3e, r29	; 62
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <APP_voidConvertStrToInt>:
	sprintf(str, "%d", x);
}


u32 APP_voidConvertStrToInt(u8* str)
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	fc 01       	movw	r30, r24
		int num = 0;
		int sign = 1;
		int i = 0;
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0

		// Handle optional leading whitespaces
		while (str[i] == ' ') {
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <APP_voidConvertStrToInt+0x10>
			i++;
     3d6:	6f 5f       	subi	r22, 0xFF	; 255
     3d8:	7f 4f       	sbci	r23, 0xFF	; 255
		int num = 0;
		int sign = 1;
		int i = 0;

		// Handle optional leading whitespaces
		while (str[i] == ' ') {
     3da:	df 01       	movw	r26, r30
     3dc:	a6 0f       	add	r26, r22
     3de:	b7 1f       	adc	r27, r23
     3e0:	9c 91       	ld	r25, X
     3e2:	90 32       	cpi	r25, 0x20	; 32
     3e4:	c1 f3       	breq	.-16     	; 0x3d6 <APP_voidConvertStrToInt+0xc>
			i++;
		}

		// Handle optional sign
		if (str[i] == '-') {
     3e6:	9d 32       	cpi	r25, 0x2D	; 45
     3e8:	29 f4       	brne	.+10     	; 0x3f4 <APP_voidConvertStrToInt+0x2a>
			sign = -1;
			i++;
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
			i++;
		}

		// Handle optional sign
		if (str[i] == '-') {
			sign = -1;
     3ee:	cf ef       	ldi	r28, 0xFF	; 255
     3f0:	df ef       	ldi	r29, 0xFF	; 255
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			i++;
			} else if (str[i] == '+') {
     3f4:	9b 32       	cpi	r25, 0x2B	; 43
     3f6:	29 f4       	brne	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			i++; 
     3f8:	6f 5f       	subi	r22, 0xFF	; 255
     3fa:	7f 4f       	sbci	r23, 0xFF	; 255


u32 APP_voidConvertStrToInt(u8* str)
{
		int num = 0;
		int sign = 1;
     3fc:	c1 e0       	ldi	r28, 0x01	; 1
     3fe:	d0 e0       	ldi	r29, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     402:	c1 e0       	ldi	r28, 0x01	; 1
     404:	d0 e0       	ldi	r29, 0x00	; 0
			i++;
		}

		// Handle optional sign
		if (str[i] == '-') {
			sign = -1;
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	13 c0       	rjmp	.+38     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			i++; 
		}

		// Convert digits to integer
		while (str[i] >= '0' && str[i] <= '9') {
			num = num * 10 + (str[i] - '0');
     40c:	a9 01       	movw	r20, r18
     40e:	44 0f       	add	r20, r20
     410:	55 1f       	adc	r21, r21
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	42 0f       	add	r20, r18
     420:	53 1f       	adc	r21, r19
     422:	29 2f       	mov	r18, r25
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	20 53       	subi	r18, 0x30	; 48
     428:	31 09       	sbc	r19, r1
     42a:	24 0f       	add	r18, r20
     42c:	35 1f       	adc	r19, r21
			i++;
     42e:	6f 5f       	subi	r22, 0xFF	; 255
     430:	7f 4f       	sbci	r23, 0xFF	; 255
			} else if (str[i] == '+') {
			i++; 
		}

		// Convert digits to integer
		while (str[i] >= '0' && str[i] <= '9') {
     432:	df 01       	movw	r26, r30
     434:	a6 0f       	add	r26, r22
     436:	b7 1f       	adc	r27, r23
     438:	9c 91       	ld	r25, X
     43a:	80 ed       	ldi	r24, 0xD0	; 208
     43c:	89 0f       	add	r24, r25
     43e:	8a 30       	cpi	r24, 0x0A	; 10
     440:	28 f3       	brcs	.-54     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			num = num * 10 + (str[i] - '0');
			i++;
		}
		return sign * num;
     442:	2c 9f       	mul	r18, r28
     444:	b0 01       	movw	r22, r0
     446:	2d 9f       	mul	r18, r29
     448:	70 0d       	add	r23, r0
     44a:	3c 9f       	mul	r19, r28
     44c:	70 0d       	add	r23, r0
     44e:	11 24       	eor	r1, r1
     450:	07 2e       	mov	r0, r23
     452:	00 0c       	add	r0, r0
     454:	88 0b       	sbc	r24, r24
     456:	99 0b       	sbc	r25, r25
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret

0000045e <APP_voidShoiwWidthdrawWarning>:

void APP_voidShoiwWidthdrawWarning()
{
	LCD_voidSendString("WARNING!");
     45e:	88 e1       	ldi	r24, 0x18	; 24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	LCD_voidSetStringPos(1,0,"CAN'T WITHDRAW");
     466:	41 e2       	ldi	r20, 0x21	; 33
     468:	51 e0       	ldi	r21, 0x01	; 1
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
	APP_voidBuzzerLedIndicator(BUZZER_WARNING,RED_LED,2);
     472:	42 e0       	ldi	r20, 0x02	; 2
     474:	61 e0       	ldi	r22, 0x01	; 1
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 77 00 	call	0xee	; 0xee <APP_voidBuzzerLedIndicator>
     47c:	08 95       	ret

0000047e <APP_voidShowWithdrawMsg>:
}

void APP_voidShowWithdrawMsg()
{
     47e:	cf 93       	push	r28
		LCD_voidSendString("Successfully");
     480:	80 e3       	ldi	r24, 0x30	; 48
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
		LCD_voidSetStringPos(1,0,"Withdrawn :)");
     488:	4d e3       	ldi	r20, 0x3D	; 61
     48a:	51 e0       	ldi	r21, 0x01	; 1
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
		for(u8 i = 0 ; i <3 ; i++)
     494:	c0 e0       	ldi	r28, 0x00	; 0
     496:	08 c0       	rjmp	.+16     	; 0x4a8 <APP_voidShowWithdrawMsg+0x2a>
		{
			LED_voidToggleDelay(BIBY_LED,200);
     498:	48 ec       	ldi	r20, 0xC8	; 200
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <LED_voidToggleDelay>

void APP_voidShowWithdrawMsg()
{
		LCD_voidSendString("Successfully");
		LCD_voidSetStringPos(1,0,"Withdrawn :)");
		for(u8 i = 0 ; i <3 ; i++)
     4a6:	cf 5f       	subi	r28, 0xFF	; 255
     4a8:	c3 30       	cpi	r28, 0x03	; 3
     4aa:	b0 f3       	brcs	.-20     	; 0x498 <APP_voidShowWithdrawMsg+0x1a>
		{
			LED_voidToggleDelay(BIBY_LED,200);
		}
}
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <APP_voidWithdrawMoney>:
	balance += num;
	APP_voidShowDepositMsg();
}

void APP_voidWithdrawMoney()
{
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	60 97       	sbiw	r28, 0x10	; 16
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
	u8 withdrawal_amount[16] = "";
     4d0:	1a 82       	std	Y+2, r1	; 0x02
     4d2:	19 82       	std	Y+1, r1	; 0x01
     4d4:	fe 01       	movw	r30, r28
     4d6:	33 96       	adiw	r30, 0x03	; 3
     4d8:	8e e0       	ldi	r24, 0x0E	; 14
     4da:	df 01       	movw	r26, r30
     4dc:	1d 92       	st	X+, r1
     4de:	8a 95       	dec	r24
     4e0:	e9 f7       	brne	.-6      	; 0x4dc <APP_voidWithdrawMoney+0x2c>
	u8 i = 0;
	u32 num = 0;
	LCD_voidSendString("Enter withdrawal");
     4e2:	8a e4       	ldi	r24, 0x4A	; 74
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	LCD_voidSetStringPos(1,0,"amount:");
     4ea:	46 e7       	ldi	r20, 0x76	; 118
     4ec:	51 e0       	ldi	r21, 0x01	; 1
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
	LCD_voidSetCursor(1,7);
     4f6:	67 e0       	ldi	r22, 0x07	; 7
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
}

void APP_voidWithdrawMoney()
{
	u8 withdrawal_amount[16] = "";
	u8 i = 0;
     4fe:	f1 2c       	mov	r15, r1
	LCD_voidSendString("Enter withdrawal");
	LCD_voidSetStringPos(1,0,"amount:");
	LCD_voidSetCursor(1,7);
	do
	{
		withdrawal_amount[i] = APP_u8KeypadInput();
     500:	0f 2d       	mov	r16, r15
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	0e 94 13 01 	call	0x226	; 0x226 <APP_u8KeypadInput>
     508:	e1 e0       	ldi	r30, 0x01	; 1
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	ec 0f       	add	r30, r28
     50e:	fd 1f       	adc	r31, r29
     510:	e0 0f       	add	r30, r16
     512:	f1 1f       	adc	r31, r17
     514:	80 83       	st	Z, r24
		if(withdrawal_amount[i] != '=')
     516:	8d 33       	cpi	r24, 0x3D	; 61
     518:	11 f0       	breq	.+4      	; 0x51e <APP_voidWithdrawMoney+0x6e>
			LCD_voidSendData(withdrawal_amount[i]);
     51a:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_voidSendData>
	}while(withdrawal_amount[i++] != '=');
     51e:	f3 94       	inc	r15
     520:	e1 e0       	ldi	r30, 0x01	; 1
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	ec 0f       	add	r30, r28
     526:	fd 1f       	adc	r31, r29
     528:	e0 0f       	add	r30, r16
     52a:	f1 1f       	adc	r31, r17
     52c:	80 81       	ld	r24, Z
     52e:	8d 33       	cpi	r24, 0x3D	; 61
     530:	39 f7       	brne	.-50     	; 0x500 <APP_voidWithdrawMoney+0x50>
	withdrawal_amount[i-1] = '\0';
     532:	ef 2d       	mov	r30, r15
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	cc 24       	eor	r12, r12
     53a:	c3 94       	inc	r12
     53c:	d1 2c       	mov	r13, r1
     53e:	cc 0e       	add	r12, r28
     540:	dd 1e       	adc	r13, r29
     542:	ec 0d       	add	r30, r12
     544:	fd 1d       	adc	r31, r13
     546:	10 82       	st	Z, r1
	LCD_voidClearScreen();
     548:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
	num = APP_voidConvertStrToInt(withdrawal_amount);
     54c:	c6 01       	movw	r24, r12
     54e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <APP_voidConvertStrToInt>
	if(num>balance)
     552:	00 91 e6 01 	lds	r16, 0x01E6	; 0x8001e6 <__data_end>
     556:	10 91 e7 01 	lds	r17, 0x01E7	; 0x8001e7 <__data_end+0x1>
     55a:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <__data_end+0x2>
     55e:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <__data_end+0x3>
     562:	06 17       	cp	r16, r22
     564:	17 07       	cpc	r17, r23
     566:	28 07       	cpc	r18, r24
     568:	39 07       	cpc	r19, r25
     56a:	18 f4       	brcc	.+6      	; 0x572 <APP_voidWithdrawMoney+0xc2>
	{
		APP_voidShoiwWidthdrawWarning();
     56c:	0e 94 2f 02 	call	0x45e	; 0x45e <APP_voidShoiwWidthdrawWarning>
     570:	10 c0       	rjmp	.+32     	; 0x592 <APP_voidWithdrawMoney+0xe2>
	}
	else
	{
		balance -= num;	
     572:	68 01       	movw	r12, r16
     574:	79 01       	movw	r14, r18
     576:	c6 1a       	sub	r12, r22
     578:	d7 0a       	sbc	r13, r23
     57a:	e8 0a       	sbc	r14, r24
     57c:	f9 0a       	sbc	r15, r25
     57e:	c0 92 e6 01 	sts	0x01E6, r12	; 0x8001e6 <__data_end>
     582:	d0 92 e7 01 	sts	0x01E7, r13	; 0x8001e7 <__data_end+0x1>
     586:	e0 92 e8 01 	sts	0x01E8, r14	; 0x8001e8 <__data_end+0x2>
     58a:	f0 92 e9 01 	sts	0x01E9, r15	; 0x8001e9 <__data_end+0x3>
		APP_voidShowWithdrawMsg();
     58e:	0e 94 3f 02 	call	0x47e	; 0x47e <APP_voidShowWithdrawMsg>
     592:	2f e3       	ldi	r18, 0x3F	; 63
     594:	8d e0       	ldi	r24, 0x0D	; 13
     596:	93 e0       	ldi	r25, 0x03	; 3
     598:	21 50       	subi	r18, 0x01	; 1
     59a:	80 40       	sbci	r24, 0x00	; 0
     59c:	90 40       	sbci	r25, 0x00	; 0
     59e:	e1 f7       	brne	.-8      	; 0x598 <APP_voidWithdrawMoney+0xe8>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <APP_voidWithdrawMoney+0xf2>
     5a2:	00 00       	nop
	}
	_delay_ms(1000);

}
     5a4:	60 96       	adiw	r28, 0x10	; 16
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	08 95       	ret

000005c2 <APP_voidShowDepositMsg>:
		}
}

void APP_voidShowDepositMsg()
{
		LCD_voidSendString("Successfully");
     5c2:	80 e3       	ldi	r24, 0x30	; 48
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
		LCD_voidSetStringPos(1,0,"Deposited :)");
     5ca:	4b e5       	ldi	r20, 0x5B	; 91
     5cc:	51 e0       	ldi	r21, 0x01	; 1
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
		APP_voidBuzzerLedIndicator(BUZZER_DEPOSITING,BIBY_LED,3);
     5d6:	43 e0       	ldi	r20, 0x03	; 3
     5d8:	62 e0       	ldi	r22, 0x02	; 2
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	0e 94 77 00 	call	0xee	; 0xee <APP_voidBuzzerLedIndicator>
     5e0:	08 95       	ret

000005e2 <APP_voidEnterDepositAmount>:
			break;		
	}
}

void APP_voidEnterDepositAmount()
{
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	2a 97       	sbiw	r28, 0x0a	; 10
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
	u8 deposit_amount[10] = "";
     5fc:	1a 82       	std	Y+2, r1	; 0x02
     5fe:	19 82       	std	Y+1, r1	; 0x01
     600:	fe 01       	movw	r30, r28
     602:	33 96       	adiw	r30, 0x03	; 3
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	df 01       	movw	r26, r30
     608:	1d 92       	st	X+, r1
     60a:	8a 95       	dec	r24
     60c:	e9 f7       	brne	.-6      	; 0x608 <APP_voidEnterDepositAmount+0x26>
	u8 i = 0;
	u32 num;
	LCD_voidSendString("Enter deposit amount:");
     60e:	88 e6       	ldi	r24, 0x68	; 104
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	LCD_voidSetCursor(1,0);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
}

void APP_voidEnterDepositAmount()
{
	u8 deposit_amount[10] = "";
	u8 i = 0;
     61e:	f1 2c       	mov	r15, r1
	u32 num;
	LCD_voidSendString("Enter deposit amount:");
	LCD_voidSetCursor(1,0);
	do
	{
		deposit_amount[i] = APP_u8KeypadInput();
     620:	0f 2d       	mov	r16, r15
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	0e 94 13 01 	call	0x226	; 0x226 <APP_u8KeypadInput>
     628:	e1 e0       	ldi	r30, 0x01	; 1
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	ec 0f       	add	r30, r28
     62e:	fd 1f       	adc	r31, r29
     630:	e0 0f       	add	r30, r16
     632:	f1 1f       	adc	r31, r17
     634:	80 83       	st	Z, r24
		if(deposit_amount[i] != '=')
     636:	8d 33       	cpi	r24, 0x3D	; 61
     638:	11 f0       	breq	.+4      	; 0x63e <APP_voidEnterDepositAmount+0x5c>
			LCD_voidSendData(deposit_amount[i]);
     63a:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_voidSendData>
	}while(deposit_amount[i++] != '=');
     63e:	f3 94       	inc	r15
     640:	e1 e0       	ldi	r30, 0x01	; 1
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	ec 0f       	add	r30, r28
     646:	fd 1f       	adc	r31, r29
     648:	e0 0f       	add	r30, r16
     64a:	f1 1f       	adc	r31, r17
     64c:	80 81       	ld	r24, Z
     64e:	8d 33       	cpi	r24, 0x3D	; 61
     650:	39 f7       	brne	.-50     	; 0x620 <APP_voidEnterDepositAmount+0x3e>
	deposit_amount[i-1] = '\0';
     652:	ef 2d       	mov	r30, r15
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	8c 0f       	add	r24, r28
     65e:	9d 1f       	adc	r25, r29
     660:	e8 0f       	add	r30, r24
     662:	f9 1f       	adc	r31, r25
     664:	10 82       	st	Z, r1
	LCD_voidClearScreen();
     666:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
	num = atoi(deposit_amount);
     66a:	ce 01       	movw	r24, r28
     66c:	01 96       	adiw	r24, 0x01	; 1
     66e:	0e 94 28 08 	call	0x1050	; 0x1050 <atoi>
     672:	09 2e       	mov	r0, r25
     674:	00 0c       	add	r0, r0
     676:	aa 0b       	sbc	r26, r26
     678:	bb 0b       	sbc	r27, r27
	balance += num;
     67a:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <__data_end>
     67e:	50 91 e7 01 	lds	r21, 0x01E7	; 0x8001e7 <__data_end+0x1>
     682:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <__data_end+0x2>
     686:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <__data_end+0x3>
     68a:	84 0f       	add	r24, r20
     68c:	95 1f       	adc	r25, r21
     68e:	a6 1f       	adc	r26, r22
     690:	b7 1f       	adc	r27, r23
     692:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end>
     696:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <__data_end+0x1>
     69a:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <__data_end+0x2>
     69e:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <__data_end+0x3>
	APP_voidShowDepositMsg();
     6a2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <APP_voidShowDepositMsg>
}
     6a6:	2a 96       	adiw	r28, 0x0a	; 10
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	ff 90       	pop	r15
     6bc:	08 95       	ret

000006be <APP_voidPrintMenu>:
		user_choice = KEYPAD_READ();
	return user_choice;
}

void APP_voidPrintMenu()
{
     6be:	cf 93       	push	r28
	LCD_voidSetStringPos(0,0,"1- Deposit Money");
     6c0:	4e e7       	ldi	r20, 0x7E	; 126
     6c2:	51 e0       	ldi	r21, 0x01	; 1
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
	LCD_voidSetStringPos(1,0,"2- Withdraw Money");
     6cc:	4f e8       	ldi	r20, 0x8F	; 143
     6ce:	51 e0       	ldi	r21, 0x01	; 1
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
     6d8:	2f ed       	ldi	r18, 0xDF	; 223
     6da:	83 e9       	ldi	r24, 0x93	; 147
     6dc:	94 e0       	ldi	r25, 0x04	; 4
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	e1 f7       	brne	.-8      	; 0x6de <APP_voidPrintMenu+0x20>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <APP_voidPrintMenu+0x2a>
     6e8:	00 00       	nop
	_delay_ms(1500);
	LCD_voidClearScreen();
     6ea:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
	LCD_voidSetStringPos(0,0,"3- View Balance");
     6ee:	41 ea       	ldi	r20, 0xA1	; 161
     6f0:	51 e0       	ldi	r21, 0x01	; 1
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
	LCD_voidSetStringPos(1,0,"4- Change Password");
     6fa:	41 eb       	ldi	r20, 0xB1	; 177
     6fc:	51 e0       	ldi	r21, 0x01	; 1
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_voidSetStringPos>
     706:	2f ed       	ldi	r18, 0xDF	; 223
     708:	83 e9       	ldi	r24, 0x93	; 147
     70a:	94 e0       	ldi	r25, 0x04	; 4
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	80 40       	sbci	r24, 0x00	; 0
     710:	90 40       	sbci	r25, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <APP_voidPrintMenu+0x4e>
     714:	00 c0       	rjmp	.+0      	; 0x716 <APP_voidPrintMenu+0x58>
     716:	00 00       	nop
	_delay_ms(1500);
	LCD_voidClearScreen();
     718:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
	LCD_voidSendString("Enter ur choice:");
     71c:	84 ec       	ldi	r24, 0xC4	; 196
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
	u8 user_choice = APP_u8KeypadInput();
     724:	0e 94 13 01 	call	0x226	; 0x226 <APP_u8KeypadInput>
     728:	c8 2f       	mov	r28, r24
	LCD_voidSetDataPos(1,0,user_choice);
     72a:	48 2f       	mov	r20, r24
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 bb 05 	call	0xb76	; 0xb76 <LCD_voidSetDataPos>
     734:	2f e9       	ldi	r18, 0x9F	; 159
     736:	86 e8       	ldi	r24, 0x86	; 134
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	90 40       	sbci	r25, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <APP_voidPrintMenu+0x7c>
     742:	00 c0       	rjmp	.+0      	; 0x744 <APP_voidPrintMenu+0x86>
     744:	00 00       	nop
	_delay_ms(500);
	LCD_voidClearScreen();
     746:	0e 94 9f 05 	call	0xb3e	; 0xb3e <LCD_voidClearScreen>
	switch(user_choice)
     74a:	c2 33       	cpi	r28, 0x32	; 50
     74c:	61 f0       	breq	.+24     	; 0x766 <APP_voidPrintMenu+0xa8>
     74e:	18 f4       	brcc	.+6      	; 0x756 <APP_voidPrintMenu+0x98>
     750:	c1 33       	cpi	r28, 0x31	; 49
     752:	31 f0       	breq	.+12     	; 0x760 <APP_voidPrintMenu+0xa2>
     754:	10 c0       	rjmp	.+32     	; 0x776 <APP_voidPrintMenu+0xb8>
     756:	c3 33       	cpi	r28, 0x33	; 51
     758:	49 f0       	breq	.+18     	; 0x76c <APP_voidPrintMenu+0xae>
     75a:	c4 33       	cpi	r28, 0x34	; 52
     75c:	51 f0       	breq	.+20     	; 0x772 <APP_voidPrintMenu+0xb4>
     75e:	0b c0       	rjmp	.+22     	; 0x776 <APP_voidPrintMenu+0xb8>
	{
		case '1' :
			APP_voidEnterDepositAmount();
     760:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <APP_voidEnterDepositAmount>
			break;
     764:	08 c0       	rjmp	.+16     	; 0x776 <APP_voidPrintMenu+0xb8>
		case '2' :
			APP_voidWithdrawMoney();
     766:	0e 94 58 02 	call	0x4b0	; 0x4b0 <APP_voidWithdrawMoney>
			break;
     76a:	05 c0       	rjmp	.+10     	; 0x776 <APP_voidPrintMenu+0xb8>
		case '3' :
			APP_voidViewBalance();
     76c:	0e 94 b1 01 	call	0x362	; 0x362 <APP_voidViewBalance>
			break;
     770:	02 c0       	rjmp	.+4      	; 0x776 <APP_voidPrintMenu+0xb8>
		case '4' : 	
			APP_voidChangePassword();	
     772:	0e 94 1a 01 	call	0x234	; 0x234 <APP_voidChangePassword>
			break;		
	}
}
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <main>:
#include "APP.h"
/************************************************************************/

int main(void)
{
	HAL_Init();
     77a:	0e 94 49 00 	call	0x92	; 0x92 <HAL_Init>
	APP_voidWelcomeMessage();
     77e:	0e 94 52 00 	call	0xa4	; 0xa4 <APP_voidWelcomeMessage>
	APP_voidCheckPassword();
     782:	0e 94 ad 00 	call	0x15a	; 0x15a <APP_voidCheckPassword>
	while(1)
		APP_voidPrintMenu();
     786:	0e 94 5f 03 	call	0x6be	; 0x6be <APP_voidPrintMenu>
     78a:	fd cf       	rjmp	.-6      	; 0x786 <main+0xc>

0000078c <BUZZER_OFF>:
	DIO_voidSetPinValue(BUZZERS_PORT[BUZZER_ID],BUZZERS_PIN[BUZZER_ID],PIN_HIGH);
}

void BUZZER_OFF(u8 BUZZER_ID)
{
	DIO_voidSetPinValue(BUZZERS_PORT[BUZZER_ID],BUZZERS_PIN[BUZZER_ID],PIN_LOW);
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	fc 01       	movw	r30, r24
     790:	e6 59       	subi	r30, 0x96	; 150
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	dc 01       	movw	r26, r24
     796:	a3 59       	subi	r26, 0x93	; 147
     798:	bf 4f       	sbci	r27, 0xFF	; 255
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	60 81       	ld	r22, Z
     79e:	8c 91       	ld	r24, X
     7a0:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     7a4:	08 95       	ret

000007a6 <BUZZER_Init>:
u8 BUZZERS[NUM_OF_BUZZERS] = {BUZZER_WARNING,BUZZER_PROCEEDING,BUZZER_DEPOSITING};
u8 BUZZERS_PORT[NUM_OF_BUZZERS] = {PORTA_ID,PORTA_ID,PORTB_ID};
u8 BUZZERS_PIN[NUM_OF_BUZZERS] = {PIN5_ID,PIN6_ID,PIN4_ID};

void BUZZER_Init()
{
     7a6:	cf 93       	push	r28
	for(u8 i = 0 ; i < NUM_OF_BUZZERS ; i++)
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <BUZZER_Init+0x28>
	{
		DIO_voidSetPinDirection(BUZZERS_PORT[i],BUZZERS_PIN[i],PIN_OUTPUT);
     7ac:	8c 2f       	mov	r24, r28
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	fc 01       	movw	r30, r24
     7b2:	e6 59       	subi	r30, 0x96	; 150
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	dc 01       	movw	r26, r24
     7b8:	a3 59       	subi	r26, 0x93	; 147
     7ba:	bf 4f       	sbci	r27, 0xFF	; 255
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	60 81       	ld	r22, Z
     7c0:	8c 91       	ld	r24, X
     7c2:	0e 94 54 06 	call	0xca8	; 0xca8 <DIO_voidSetPinDirection>
		BUZZER_OFF(i);
     7c6:	8c 2f       	mov	r24, r28
     7c8:	0e 94 c6 03 	call	0x78c	; 0x78c <BUZZER_OFF>
u8 BUZZERS_PORT[NUM_OF_BUZZERS] = {PORTA_ID,PORTA_ID,PORTB_ID};
u8 BUZZERS_PIN[NUM_OF_BUZZERS] = {PIN5_ID,PIN6_ID,PIN4_ID};

void BUZZER_Init()
{
	for(u8 i = 0 ; i < NUM_OF_BUZZERS ; i++)
     7cc:	cf 5f       	subi	r28, 0xFF	; 255
     7ce:	c3 30       	cpi	r28, 0x03	; 3
     7d0:	68 f3       	brcs	.-38     	; 0x7ac <BUZZER_Init+0x6>
	{
		DIO_voidSetPinDirection(BUZZERS_PORT[i],BUZZERS_PIN[i],PIN_OUTPUT);
		BUZZER_OFF(i);
	}
}
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <BUZZER_TOGGLE>:
	DIO_voidSetPinValue(BUZZERS_PORT[BUZZER_ID],BUZZERS_PIN[BUZZER_ID],PIN_LOW);
}

void BUZZER_TOGGLE(u8 BUZZER_ID)
{
	if(BUZZER_ID == BUZZER_DEPOSITING)
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	81 f4       	brne	.+32     	; 0x7fa <BUZZER_TOGGLE+0x24>
		TOGGLE_BIT(PORTB,BUZZERS_PIN[BUZZER_ID]);
     7da:	28 b3       	in	r18, 0x18	; 24
     7dc:	e8 2f       	mov	r30, r24
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	e6 59       	subi	r30, 0x96	; 150
     7e2:	ff 4f       	sbci	r31, 0xFF	; 255
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	00 80       	ld	r0, Z
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <BUZZER_TOGGLE+0x1a>
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <BUZZER_TOGGLE+0x16>
     7f4:	82 27       	eor	r24, r18
     7f6:	88 bb       	out	0x18, r24	; 24
     7f8:	08 95       	ret
	else
		TOGGLE_BIT(PORTA,BUZZERS_PIN[BUZZER_ID]);
     7fa:	2b b3       	in	r18, 0x1b	; 27
     7fc:	e8 2f       	mov	r30, r24
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	e6 59       	subi	r30, 0x96	; 150
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	00 80       	ld	r0, Z
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	82 27       	eor	r24, r18
     816:	8b bb       	out	0x1b, r24	; 27
     818:	08 95       	ret

0000081a <KEYPAD_voidInit>:
const u8 KEYPAD [4][4]= KPD_VALUES;

void KEYPAD_voidInit(void)
{
	/*Set the Raw port as input with PORT=1 to activate the internal pull up */
	DIO_voidSetPortDirection(KEYPAD_ROW_PORT,ROW_PORT_INPUT);
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <DIO_voidSetPortDirection>
	DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
     822:	6f e0       	ldi	r22, 0x0F	; 15
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_voidSetPortValue>
	/*Set the COL port as output with Initial value =LOGIC HIGH*/ 
    DIO_voidSetPortDirection(KEYPAD_COL_PORT,COL_PORT_OUTPUT);
     82a:	6f e0       	ldi	r22, 0x0F	; 15
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <DIO_voidSetPortDirection>
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
     832:	6f e0       	ldi	r22, 0x0F	; 15
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_voidSetPortValue>
     83a:	08 95       	ret

0000083c <KEYPAD_READ>:
}

u8 KEYPAD_READ(void) {
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
		u8 row = 0;
		u8 col = 0;
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
     840:	6f e0       	ldi	r22, 0x0F	; 15
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_voidSetPortValue>
    DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
     848:	6f e0       	ldi	r22, 0x0F	; 15
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_voidSetPortValue>
    for (col = 0; col < 4; col++) {
     850:	d0 e0       	ldi	r29, 0x00	; 0
     852:	3a c0       	rjmp	.+116    	; 0x8c8 <__stack+0x69>
        // Drive the current column low
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 0);
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	6d 2f       	mov	r22, r29
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
        for (row = 0; row < 4; row++) {
     85e:	c0 e0       	ldi	r28, 0x00	; 0
     860:	2b c0       	rjmp	.+86     	; 0x8b8 <__stack+0x59>
            u8 val;
            val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
     862:	6c 2f       	mov	r22, r28
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8GetPinValue>
							
            if (val == 0) {
     86a:	81 11       	cpse	r24, r1
     86c:	24 c0       	rjmp	.+72     	; 0x8b6 <__stack+0x57>
     86e:	83 ec       	ldi	r24, 0xC3	; 195
     870:	99 e0       	ldi	r25, 0x09	; 9
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <__stack+0x13>
     876:	00 c0       	rjmp	.+0      	; 0x878 <__stack+0x19>
     878:	00 00       	nop
                // Debounce
                _delay_ms(10);  // Assuming you have a delay function
                val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
     87a:	6c 2f       	mov	r22, r28
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8GetPinValue>
								
                if (val == 0) {
     882:	81 11       	cpse	r24, r1
     884:	18 c0       	rjmp	.+48     	; 0x8b6 <__stack+0x57>
     886:	04 c0       	rjmp	.+8      	; 0x890 <__stack+0x31>
                    // Wait until the key is released
                    while (val == 0) {
						val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
     888:	6c 2f       	mov	r22, r28
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 34 07 	call	0xe68	; 0xe68 <DIO_u8GetPinValue>
                _delay_ms(10);  // Assuming you have a delay function
                val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
								
                if (val == 0) {
                    // Wait until the key is released
                    while (val == 0) {
     890:	88 23       	and	r24, r24
     892:	d1 f3       	breq	.-12     	; 0x888 <__stack+0x29>
						val = DIO_u8GetPinValue(KEYPAD_ROW_PORT, row);
                    }
                    DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 1); // Reset the column
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	6d 2f       	mov	r22, r29
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
                    return KEYPAD[row][col];  // Return the corresponding character from the keymap
     89e:	ec 2f       	mov	r30, r28
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	eb 52       	subi	r30, 0x2B	; 43
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	ed 0f       	add	r30, r29
     8b0:	f1 1d       	adc	r31, r1
     8b2:	80 81       	ld	r24, Z
     8b4:	0c c0       	rjmp	.+24     	; 0x8ce <__stack+0x6f>
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
    DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
    for (col = 0; col < 4; col++) {
        // Drive the current column low
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 0);
        for (row = 0; row < 4; row++) {
     8b6:	cf 5f       	subi	r28, 0xFF	; 255
     8b8:	c4 30       	cpi	r28, 0x04	; 4
     8ba:	98 f2       	brcs	.-90     	; 0x862 <__stack+0x3>
                }
            }
        }

        // Reset the column back high
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 1);
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	6d 2f       	mov	r22, r29
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
u8 KEYPAD_READ(void) {
		u8 row = 0;
		u8 col = 0;
    DIO_voidSetPortValue(KEYPAD_COL_PORT,0x0F);
    DIO_voidSetPortValue(KEYPAD_ROW_PORT,0x0F);
    for (col = 0; col < 4; col++) {
     8c6:	df 5f       	subi	r29, 0xFF	; 255
     8c8:	d4 30       	cpi	r29, 0x04	; 4
     8ca:	20 f2       	brcs	.-120    	; 0x854 <KEYPAD_READ+0x18>
        }

        // Reset the column back high
        DIO_voidSetPinValue(KEYPAD_COL_PORT, col, 1);
    }
    return 'x';  // Indicate no key press
     8cc:	88 e7       	ldi	r24, 0x78	; 120
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <LCD_SendCommand>:
void Print_Distance_To_LCD(f32 distance)
{
	char str_distance[20]={0};
	ConvertFloatToStr(distance, str_distance);
	LCD_voidSendString(str_distance);
}
     8d4:	cf 93       	push	r28
     8d6:	c8 2f       	mov	r28, r24
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	65 e0       	ldi	r22, 0x05	; 5
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	66 e0       	ldi	r22, 0x06	; 6
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     8ec:	4c 2f       	mov	r20, r28
     8ee:	41 70       	andi	r20, 0x01	; 1
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     8f8:	4c 2f       	mov	r20, r28
     8fa:	42 70       	andi	r20, 0x02	; 2
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	55 95       	asr	r21
     900:	47 95       	ror	r20
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     90a:	4c 2f       	mov	r20, r28
     90c:	44 70       	andi	r20, 0x04	; 4
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	55 95       	asr	r21
     912:	47 95       	ror	r20
     914:	55 95       	asr	r21
     916:	47 95       	ror	r20
     918:	62 e0       	ldi	r22, 0x02	; 2
     91a:	82 e0       	ldi	r24, 0x02	; 2
     91c:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     920:	4c 2f       	mov	r20, r28
     922:	48 70       	andi	r20, 0x08	; 8
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	55 95       	asr	r21
     928:	47 95       	ror	r20
     92a:	55 95       	asr	r21
     92c:	47 95       	ror	r20
     92e:	55 95       	asr	r21
     930:	47 95       	ror	r20
     932:	63 e0       	ldi	r22, 0x03	; 3
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     93a:	4c 2f       	mov	r20, r28
     93c:	40 71       	andi	r20, 0x10	; 16
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	55 95       	asr	r21
     942:	47 95       	ror	r20
     944:	55 95       	asr	r21
     946:	47 95       	ror	r20
     948:	55 95       	asr	r21
     94a:	47 95       	ror	r20
     94c:	55 95       	asr	r21
     94e:	47 95       	ror	r20
     950:	64 e0       	ldi	r22, 0x04	; 4
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     958:	4c 2f       	mov	r20, r28
     95a:	40 72       	andi	r20, 0x20	; 32
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	55 95       	asr	r21
     960:	47 95       	ror	r20
     962:	55 95       	asr	r21
     964:	47 95       	ror	r20
     966:	55 95       	asr	r21
     968:	47 95       	ror	r20
     96a:	55 95       	asr	r21
     96c:	47 95       	ror	r20
     96e:	55 95       	asr	r21
     970:	47 95       	ror	r20
     972:	65 e0       	ldi	r22, 0x05	; 5
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     97a:	4c 2f       	mov	r20, r28
     97c:	40 74       	andi	r20, 0x40	; 64
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	04 2e       	mov	r0, r20
     982:	45 2f       	mov	r20, r21
     984:	00 0c       	add	r0, r0
     986:	44 1f       	adc	r20, r20
     988:	55 0b       	sbc	r21, r21
     98a:	00 0c       	add	r0, r0
     98c:	44 1f       	adc	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	66 e0       	ldi	r22, 0x06	; 6
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     998:	4c 2f       	mov	r20, r28
     99a:	44 1f       	adc	r20, r20
     99c:	44 27       	eor	r20, r20
     99e:	44 1f       	adc	r20, r20
     9a0:	67 e0       	ldi	r22, 0x07	; 7
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	67 e0       	ldi	r22, 0x07	; 7
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     9b2:	83 ef       	ldi	r24, 0xF3	; 243
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <LCD_SendCommand+0xe2>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <LCD_SendCommand+0xe8>
     9bc:	00 00       	nop
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	67 e0       	ldi	r22, 0x07	; 7
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <LCD_voidInit>:
     9cc:	6f ef       	ldi	r22, 0xFF	; 255
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <DIO_voidSetPortDirection>
     9d4:	6f ef       	ldi	r22, 0xFF	; 255
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <DIO_voidSetPortDirection>
     9dc:	84 e6       	ldi	r24, 0x64	; 100
     9de:	8a 95       	dec	r24
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCD_voidInit+0x12>
     9e2:	88 e3       	ldi	r24, 0x38	; 56
     9e4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SendCommand>
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <LCD_voidInit+0x20>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <LCD_voidInit+0x26>
     9f2:	00 00       	nop
     9f4:	8f e0       	ldi	r24, 0x0F	; 15
     9f6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SendCommand>
     9fa:	83 ef       	ldi	r24, 0xF3	; 243
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <LCD_voidInit+0x32>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <LCD_voidInit+0x38>
     a04:	00 00       	nop
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SendCommand>
     a0c:	81 ee       	ldi	r24, 0xE1	; 225
     a0e:	94 e0       	ldi	r25, 0x04	; 4
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	f1 f7       	brne	.-4      	; 0xa10 <LCD_voidInit+0x44>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <LCD_voidInit+0x4a>
     a16:	00 00       	nop
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SendCommand>
     a1e:	81 ee       	ldi	r24, 0xE1	; 225
     a20:	94 e0       	ldi	r25, 0x04	; 4
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_voidInit+0x56>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <LCD_voidInit+0x5c>
     a28:	00 00       	nop
     a2a:	08 95       	ret

00000a2c <LCD_voidSendData>:
     a2c:	cf 93       	push	r28
     a2e:	c8 2f       	mov	r28, r24
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	65 e0       	ldi	r22, 0x05	; 5
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	66 e0       	ldi	r22, 0x06	; 6
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     a44:	4c 2f       	mov	r20, r28
     a46:	41 70       	andi	r20, 0x01	; 1
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     a50:	4c 2f       	mov	r20, r28
     a52:	42 70       	andi	r20, 0x02	; 2
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	55 95       	asr	r21
     a58:	47 95       	ror	r20
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     a62:	4c 2f       	mov	r20, r28
     a64:	44 70       	andi	r20, 0x04	; 4
     a66:	50 e0       	ldi	r21, 0x00	; 0
     a68:	55 95       	asr	r21
     a6a:	47 95       	ror	r20
     a6c:	55 95       	asr	r21
     a6e:	47 95       	ror	r20
     a70:	62 e0       	ldi	r22, 0x02	; 2
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     a78:	4c 2f       	mov	r20, r28
     a7a:	48 70       	andi	r20, 0x08	; 8
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	55 95       	asr	r21
     a80:	47 95       	ror	r20
     a82:	55 95       	asr	r21
     a84:	47 95       	ror	r20
     a86:	55 95       	asr	r21
     a88:	47 95       	ror	r20
     a8a:	63 e0       	ldi	r22, 0x03	; 3
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     a92:	4c 2f       	mov	r20, r28
     a94:	40 71       	andi	r20, 0x10	; 16
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	55 95       	asr	r21
     a9a:	47 95       	ror	r20
     a9c:	55 95       	asr	r21
     a9e:	47 95       	ror	r20
     aa0:	55 95       	asr	r21
     aa2:	47 95       	ror	r20
     aa4:	55 95       	asr	r21
     aa6:	47 95       	ror	r20
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     ab0:	4c 2f       	mov	r20, r28
     ab2:	40 72       	andi	r20, 0x20	; 32
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	55 95       	asr	r21
     ab8:	47 95       	ror	r20
     aba:	55 95       	asr	r21
     abc:	47 95       	ror	r20
     abe:	55 95       	asr	r21
     ac0:	47 95       	ror	r20
     ac2:	55 95       	asr	r21
     ac4:	47 95       	ror	r20
     ac6:	55 95       	asr	r21
     ac8:	47 95       	ror	r20
     aca:	65 e0       	ldi	r22, 0x05	; 5
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     ad2:	4c 2f       	mov	r20, r28
     ad4:	40 74       	andi	r20, 0x40	; 64
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	04 2e       	mov	r0, r20
     ada:	45 2f       	mov	r20, r21
     adc:	00 0c       	add	r0, r0
     ade:	44 1f       	adc	r20, r20
     ae0:	55 0b       	sbc	r21, r21
     ae2:	00 0c       	add	r0, r0
     ae4:	44 1f       	adc	r20, r20
     ae6:	55 1f       	adc	r21, r21
     ae8:	66 e0       	ldi	r22, 0x06	; 6
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     af0:	4c 2f       	mov	r20, r28
     af2:	44 1f       	adc	r20, r20
     af4:	44 27       	eor	r20, r20
     af6:	44 1f       	adc	r20, r20
     af8:	67 e0       	ldi	r22, 0x07	; 7
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     b00:	41 e0       	ldi	r20, 0x01	; 1
     b02:	67 e0       	ldi	r22, 0x07	; 7
     b04:	83 e0       	ldi	r24, 0x03	; 3
     b06:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     b0a:	83 ef       	ldi	r24, 0xF3	; 243
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <LCD_voidSendData+0xe2>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <LCD_voidSendData+0xe8>
     b14:	00 00       	nop
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	67 e0       	ldi	r22, 0x07	; 7
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <LCD_voidSendString>:
     b24:	cf 93       	push	r28
     b26:	df 93       	push	r29
     b28:	ec 01       	movw	r28, r24
     b2a:	03 c0       	rjmp	.+6      	; 0xb32 <LCD_voidSendString+0xe>
     b2c:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_voidSendData>
     b30:	21 96       	adiw	r28, 0x01	; 1
     b32:	88 81       	ld	r24, Y
     b34:	81 11       	cpse	r24, r1
     b36:	fa cf       	rjmp	.-12     	; 0xb2c <LCD_voidSendString+0x8>
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <LCD_voidClearScreen>:
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SendCommand>
     b44:	08 95       	ret

00000b46 <LCD_voidSetCursor>:

void LCD_voidSetCursor(u8 row, u8 col)
{
    u8 address;
		if (col >= 40)
     b46:	68 32       	cpi	r22, 0x28	; 40
     b48:	08 f0       	brcs	.+2      	; 0xb4c <LCD_voidSetCursor+0x6>
    {
        col = 39;  // Clamp to maximum column value
     b4a:	67 e2       	ldi	r22, 0x27	; 39
    }
		
		// Ensure row is within the valid range (0-1 for 2-line LCD)
    if (row > 1)
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <LCD_voidSetCursor+0xc>
    {
        row = 0;  // Default to the first row for invalid row values
     b50:	80 e0       	ldi	r24, 0x00	; 0
    }
    switch (row)
     b52:	88 23       	and	r24, r24
     b54:	29 f0       	breq	.+10     	; 0xb60 <LCD_voidSetCursor+0x1a>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	11 f0       	breq	.+4      	; 0xb5e <LCD_voidSetCursor+0x18>
    case 1:
        address = col + 0x40;
        break;
    // Add cases for more rows if you have a larger LCD
    default:
        address = 0;
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <LCD_voidSetCursor+0x1a>
    {
    case 0:
        address = col;
        break;
    case 1:
        address = col + 0x40;
     b5e:	60 5c       	subi	r22, 0xC0	; 192
    default:
        address = 0;
        break;
    }

    LCD_SendCommand(0x80 | address);  // Set DDRAM address command
     b60:	86 2f       	mov	r24, r22
     b62:	80 68       	ori	r24, 0x80	; 128
     b64:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <LCD_SendCommand>
     b68:	89 ef       	ldi	r24, 0xF9	; 249
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCD_voidSetCursor+0x26>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <LCD_voidSetCursor+0x2c>
     b72:	00 00       	nop
     b74:	08 95       	ret

00000b76 <LCD_voidSetDataPos>:
		_delay_ms(1);
}

void LCD_voidSetDataPos(u8 row, u8 col, u8 character)
{
     b76:	cf 93       	push	r28
     b78:	c4 2f       	mov	r28, r20
	LCD_voidSetCursor(row,col);
     b7a:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
	LCD_voidSendData(character);
     b7e:	8c 2f       	mov	r24, r28
     b80:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_voidSendData>
}
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <LCD_voidSetStringPos>:

void LCD_voidSetStringPos(u8 row, u8 col, u8 *str)
{
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	ea 01       	movw	r28, r20
    LCD_voidSetCursor(row,col);
     b8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_voidSetCursor>
	LCD_voidSendString(str);	
     b92:	ce 01       	movw	r24, r28
     b94:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_voidSendString>
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <LEDS_INIT>:
u8 LEDS[NUM_OF_LEDS] = {GREEN_LED,RED_LED,BIBY_LED};
u8 LEDS_PORT[NUM_OF_LEDS] = {PORTB_ID,PORTB_ID,PORTB_ID};
u8 LEDS_PIN[NUM_OF_LEDS] = {PIN5_ID,PIN6_ID,PIN7_ID};

void LEDS_INIT()
{
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
	for(u8 i = 0 ; i < NUM_OF_LEDS ; i++)
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	15 c0       	rjmp	.+42     	; 0xbd6 <LEDS_INIT+0x38>
	{
		DIO_voidSetPinDirection(LEDS_PORT[i],LEDS_PIN[i],PIN_OUTPUT);
     bac:	c1 2f       	mov	r28, r17
     bae:	d0 e0       	ldi	r29, 0x00	; 0
     bb0:	ce 01       	movw	r24, r28
     bb2:	80 59       	subi	r24, 0x90	; 144
     bb4:	9f 4f       	sbci	r25, 0xFF	; 255
     bb6:	7c 01       	movw	r14, r24
     bb8:	cd 58       	subi	r28, 0x8D	; 141
     bba:	df 4f       	sbci	r29, 0xFF	; 255
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	fc 01       	movw	r30, r24
     bc0:	60 81       	ld	r22, Z
     bc2:	88 81       	ld	r24, Y
     bc4:	0e 94 54 06 	call	0xca8	; 0xca8 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(LEDS_PORT[i],LEDS_PIN[i],LED_LOW);
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	f7 01       	movw	r30, r14
     bcc:	60 81       	ld	r22, Z
     bce:	88 81       	ld	r24, Y
     bd0:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
u8 LEDS_PORT[NUM_OF_LEDS] = {PORTB_ID,PORTB_ID,PORTB_ID};
u8 LEDS_PIN[NUM_OF_LEDS] = {PIN5_ID,PIN6_ID,PIN7_ID};

void LEDS_INIT()
{
	for(u8 i = 0 ; i < NUM_OF_LEDS ; i++)
     bd4:	1f 5f       	subi	r17, 0xFF	; 255
     bd6:	13 30       	cpi	r17, 0x03	; 3
     bd8:	48 f3       	brcs	.-46     	; 0xbac <LEDS_INIT+0xe>
	{
		DIO_voidSetPinDirection(LEDS_PORT[i],LEDS_PIN[i],PIN_OUTPUT);
		DIO_voidSetPinValue(LEDS_PORT[i],LEDS_PIN[i],LED_LOW);
	}
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	08 95       	ret

00000be6 <LED_ON>:

void LED_ON(u8 LED_ID)
{
	DIO_voidSetPinValue(LEDS_PORT[LED_ID],LEDS_PIN[LED_ID],LED_HIGH);
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	fc 01       	movw	r30, r24
     bea:	e0 59       	subi	r30, 0x90	; 144
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	dc 01       	movw	r26, r24
     bf0:	ad 58       	subi	r26, 0x8D	; 141
     bf2:	bf 4f       	sbci	r27, 0xFF	; 255
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	60 81       	ld	r22, Z
     bf8:	8c 91       	ld	r24, X
     bfa:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     bfe:	08 95       	ret

00000c00 <LED_OFF>:
}

void LED_OFF(u8 LED_ID)
{
	DIO_voidSetPinValue(LEDS_PORT[LED_ID],LEDS_PIN[LED_ID],LED_LOW);
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	e0 59       	subi	r30, 0x90	; 144
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	dc 01       	movw	r26, r24
     c0a:	ad 58       	subi	r26, 0x8D	; 141
     c0c:	bf 4f       	sbci	r27, 0xFF	; 255
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	60 81       	ld	r22, Z
     c12:	8c 91       	ld	r24, X
     c14:	0e 94 c4 06 	call	0xd88	; 0xd88 <DIO_voidSetPinValue>
     c18:	08 95       	ret

00000c1a <LED_TOGGLE>:
}

void LED_TOGGLE(u8 LED_ID)
{
	TOGGLE_BIT(PORTB,LEDS_PIN[LED_ID]);
     c1a:	28 b3       	in	r18, 0x18	; 24
     c1c:	e8 2f       	mov	r30, r24
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	e0 59       	subi	r30, 0x90	; 144
     c22:	ff 4f       	sbci	r31, 0xFF	; 255
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	00 80       	ld	r0, Z
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <LED_TOGGLE+0x16>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	0a 94       	dec	r0
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <LED_TOGGLE+0x12>
     c34:	82 27       	eor	r24, r18
     c36:	88 bb       	out	0x18, r24	; 24
     c38:	08 95       	ret

00000c3a <LED_voidToggleDelay>:
}

void LED_voidToggleDelay(u8 LED_ID, u32 delay)
{
     c3a:	cf 92       	push	r12
     c3c:	df 92       	push	r13
     c3e:	ef 92       	push	r14
     c40:	ff 92       	push	r15
     c42:	cf 93       	push	r28
     c44:	c8 2f       	mov	r28, r24
     c46:	6a 01       	movw	r12, r20
     c48:	7b 01       	movw	r14, r22
	u8 i;
	LED_ON(LED_ID);
     c4a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <LED_ON>
	for(i  = 0 ; i < delay ; i++)
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <LED_voidToggleDelay+0x26>
     c52:	e9 ef       	ldi	r30, 0xF9	; 249
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LED_voidToggleDelay+0x1c>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <LED_voidToggleDelay+0x22>
     c5c:	00 00       	nop
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	48 2f       	mov	r20, r24
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	4c 15       	cp	r20, r12
     c6a:	5d 05       	cpc	r21, r13
     c6c:	6e 05       	cpc	r22, r14
     c6e:	7f 05       	cpc	r23, r15
     c70:	80 f3       	brcs	.-32     	; 0xc52 <LED_voidToggleDelay+0x18>
		_delay_ms(1);
	LED_OFF(LED_ID);
     c72:	8c 2f       	mov	r24, r28
     c74:	0e 94 00 06 	call	0xc00	; 0xc00 <LED_OFF>
	for(i  = 0 ; i < delay ; i++)
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <LED_voidToggleDelay+0x50>
     c7c:	e9 ef       	ldi	r30, 0xF9	; 249
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <LED_voidToggleDelay+0x46>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <LED_voidToggleDelay+0x4c>
     c86:	00 00       	nop
     c88:	8f 5f       	subi	r24, 0xFF	; 255
     c8a:	48 2f       	mov	r20, r24
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	4c 15       	cp	r20, r12
     c94:	5d 05       	cpc	r21, r13
     c96:	6e 05       	cpc	r22, r14
     c98:	7f 05       	cpc	r23, r15
     c9a:	80 f3       	brcs	.-32     	; 0xc7c <LED_voidToggleDelay+0x42>
	_delay_ms(1);
	
     c9c:	cf 91       	pop	r28
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	08 95       	ret

00000ca8 <DIO_voidSetPinDirection>:
 */
void DIO_voidSetPinDirection(u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction)
{

		
		if (Copy_u8Direction==PIN_OUTPUT)
     ca8:	41 30       	cpi	r20, 0x01	; 1
     caa:	a1 f5       	brne	.+104    	; 0xd14 <DIO_voidSetPinDirection+0x6c>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	89 f0       	breq	.+34     	; 0xcd2 <DIO_voidSetPinDirection+0x2a>
     cb0:	28 f0       	brcs	.+10     	; 0xcbc <DIO_voidSetPinDirection+0x14>
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	c9 f0       	breq	.+50     	; 0xce8 <DIO_voidSetPinDirection+0x40>
     cb6:	83 30       	cpi	r24, 0x03	; 3
     cb8:	11 f1       	breq	.+68     	; 0xcfe <DIO_voidSetPinDirection+0x56>
     cba:	08 95       	ret
			{
				case PORTA_ID: SET_BIT(DDRA,Copy_u8PIN); break;
     cbc:	2a b3       	in	r18, 0x1a	; 26
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <DIO_voidSetPinDirection+0x20>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	6a 95       	dec	r22
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <DIO_voidSetPinDirection+0x1c>
     ccc:	82 2b       	or	r24, r18
     cce:	8a bb       	out	0x1a, r24	; 26
     cd0:	08 95       	ret
				case PORTB_ID: SET_BIT(DDRB,Copy_u8PIN); break;
     cd2:	27 b3       	in	r18, 0x17	; 23
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <DIO_voidSetPinDirection+0x36>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	6a 95       	dec	r22
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <DIO_voidSetPinDirection+0x32>
     ce2:	82 2b       	or	r24, r18
     ce4:	87 bb       	out	0x17, r24	; 23
     ce6:	08 95       	ret
				case PORTC_ID: SET_BIT(DDRC,Copy_u8PIN); break;
     ce8:	24 b3       	in	r18, 0x14	; 20
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_voidSetPinDirection+0x4c>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	6a 95       	dec	r22
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_voidSetPinDirection+0x48>
     cf8:	82 2b       	or	r24, r18
     cfa:	84 bb       	out	0x14, r24	; 20
     cfc:	08 95       	ret
				case PORTD_ID: SET_BIT(DDRD,Copy_u8PIN); break;
     cfe:	21 b3       	in	r18, 0x11	; 17
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_voidSetPinDirection+0x62>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	6a 95       	dec	r22
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_voidSetPinDirection+0x5e>
     d0e:	82 2b       	or	r24, r18
     d10:	81 bb       	out	0x11, r24	; 17
     d12:	08 95       	ret
			}
		}
		else if (Copy_u8Direction==PIN_INPUT)
     d14:	41 11       	cpse	r20, r1
     d16:	37 c0       	rjmp	.+110    	; 0xd86 <DIO_voidSetPinDirection+0xde>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	91 f0       	breq	.+36     	; 0xd40 <DIO_voidSetPinDirection+0x98>
     d1c:	28 f0       	brcs	.+10     	; 0xd28 <DIO_voidSetPinDirection+0x80>
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	d9 f0       	breq	.+54     	; 0xd58 <DIO_voidSetPinDirection+0xb0>
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	29 f1       	breq	.+74     	; 0xd70 <DIO_voidSetPinDirection+0xc8>
     d26:	08 95       	ret
			{
				case PORTA_ID: CLR_BIT(DDRA,Copy_u8PIN); break;
     d28:	2a b3       	in	r18, 0x1a	; 26
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_voidSetPinDirection+0x8c>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	6a 95       	dec	r22
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_voidSetPinDirection+0x88>
     d38:	80 95       	com	r24
     d3a:	82 23       	and	r24, r18
     d3c:	8a bb       	out	0x1a, r24	; 26
     d3e:	08 95       	ret
				case PORTB_ID: CLR_BIT(DDRB,Copy_u8PIN); break;
     d40:	27 b3       	in	r18, 0x17	; 23
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_voidSetPinDirection+0xa4>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	6a 95       	dec	r22
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_voidSetPinDirection+0xa0>
     d50:	80 95       	com	r24
     d52:	82 23       	and	r24, r18
     d54:	87 bb       	out	0x17, r24	; 23
     d56:	08 95       	ret
				case PORTC_ID: CLR_BIT(DDRC,Copy_u8PIN); break;
     d58:	24 b3       	in	r18, 0x14	; 20
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 c0       	rjmp	.+4      	; 0xd64 <DIO_voidSetPinDirection+0xbc>
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	6a 95       	dec	r22
     d66:	e2 f7       	brpl	.-8      	; 0xd60 <DIO_voidSetPinDirection+0xb8>
     d68:	80 95       	com	r24
     d6a:	82 23       	and	r24, r18
     d6c:	84 bb       	out	0x14, r24	; 20
     d6e:	08 95       	ret
				case PORTD_ID: CLR_BIT(DDRD,Copy_u8PIN); break;
     d70:	21 b3       	in	r18, 0x11	; 17
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_voidSetPinDirection+0xd4>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	6a 95       	dec	r22
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_voidSetPinDirection+0xd0>
     d80:	80 95       	com	r24
     d82:	82 23       	and	r24, r18
     d84:	81 bb       	out	0x11, r24	; 17
     d86:	08 95       	ret

00000d88 <DIO_voidSetPinValue>:
void  DIO_voidSetPinValue (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value )
{

	
	
		if (Copy_u8Value == PIN_HIGH)
     d88:	41 30       	cpi	r20, 0x01	; 1
     d8a:	a1 f5       	brne	.+104    	; 0xdf4 <DIO_voidSetPinValue+0x6c>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	89 f0       	breq	.+34     	; 0xdb2 <DIO_voidSetPinValue+0x2a>
     d90:	28 f0       	brcs	.+10     	; 0xd9c <DIO_voidSetPinValue+0x14>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	c9 f0       	breq	.+50     	; 0xdc8 <DIO_voidSetPinValue+0x40>
     d96:	83 30       	cpi	r24, 0x03	; 3
     d98:	11 f1       	breq	.+68     	; 0xdde <DIO_voidSetPinValue+0x56>
     d9a:	08 95       	ret
			{
				case PORTA_ID: SET_BIT(PORTA,Copy_u8PIN); break;
     d9c:	2b b3       	in	r18, 0x1b	; 27
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_voidSetPinValue+0x20>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	6a 95       	dec	r22
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_voidSetPinValue+0x1c>
     dac:	82 2b       	or	r24, r18
     dae:	8b bb       	out	0x1b, r24	; 27
     db0:	08 95       	ret
				case PORTB_ID: SET_BIT(PORTB,Copy_u8PIN); break;
     db2:	28 b3       	in	r18, 0x18	; 24
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_voidSetPinValue+0x36>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	6a 95       	dec	r22
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_voidSetPinValue+0x32>
     dc2:	82 2b       	or	r24, r18
     dc4:	88 bb       	out	0x18, r24	; 24
     dc6:	08 95       	ret
				case PORTC_ID: SET_BIT(PORTC,Copy_u8PIN); break;
     dc8:	25 b3       	in	r18, 0x15	; 21
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_voidSetPinValue+0x4c>
     dd0:	88 0f       	add	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	6a 95       	dec	r22
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_voidSetPinValue+0x48>
     dd8:	82 2b       	or	r24, r18
     dda:	85 bb       	out	0x15, r24	; 21
     ddc:	08 95       	ret
				case PORTD_ID: SET_BIT(PORTD,Copy_u8PIN); break;
     dde:	22 b3       	in	r18, 0x12	; 18
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <DIO_voidSetPinValue+0x62>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	6a 95       	dec	r22
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <DIO_voidSetPinValue+0x5e>
     dee:	82 2b       	or	r24, r18
     df0:	82 bb       	out	0x12, r24	; 18
     df2:	08 95       	ret
			}
		}
		else if (Copy_u8Value == PIN_LOW)
     df4:	41 11       	cpse	r20, r1
     df6:	37 c0       	rjmp	.+110    	; 0xe66 <DIO_voidSetPinValue+0xde>
		{
			/* Select the port */
			switch (Copy_u8PORT)
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	91 f0       	breq	.+36     	; 0xe20 <DIO_voidSetPinValue+0x98>
     dfc:	28 f0       	brcs	.+10     	; 0xe08 <DIO_voidSetPinValue+0x80>
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	d9 f0       	breq	.+54     	; 0xe38 <DIO_voidSetPinValue+0xb0>
     e02:	83 30       	cpi	r24, 0x03	; 3
     e04:	29 f1       	breq	.+74     	; 0xe50 <DIO_voidSetPinValue+0xc8>
     e06:	08 95       	ret
			{
				case PORTA_ID: CLR_BIT(PORTA,Copy_u8PIN); break;
     e08:	2b b3       	in	r18, 0x1b	; 27
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_voidSetPinValue+0x8c>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	6a 95       	dec	r22
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_voidSetPinValue+0x88>
     e18:	80 95       	com	r24
     e1a:	82 23       	and	r24, r18
     e1c:	8b bb       	out	0x1b, r24	; 27
     e1e:	08 95       	ret
				case PORTB_ID: CLR_BIT(PORTB,Copy_u8PIN); break;
     e20:	28 b3       	in	r18, 0x18	; 24
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_voidSetPinValue+0xa4>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	6a 95       	dec	r22
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_voidSetPinValue+0xa0>
     e30:	80 95       	com	r24
     e32:	82 23       	and	r24, r18
     e34:	88 bb       	out	0x18, r24	; 24
     e36:	08 95       	ret
				case PORTC_ID: CLR_BIT(PORTC,Copy_u8PIN); break;
     e38:	25 b3       	in	r18, 0x15	; 21
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_voidSetPinValue+0xbc>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	6a 95       	dec	r22
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_voidSetPinValue+0xb8>
     e48:	80 95       	com	r24
     e4a:	82 23       	and	r24, r18
     e4c:	85 bb       	out	0x15, r24	; 21
     e4e:	08 95       	ret
				case PORTD_ID: CLR_BIT(PORTD,Copy_u8PIN); break;
     e50:	22 b3       	in	r18, 0x12	; 18
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_voidSetPinValue+0xd4>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	6a 95       	dec	r22
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_voidSetPinValue+0xd0>
     e60:	80 95       	com	r24
     e62:	82 23       	and	r24, r18
     e64:	82 bb       	out	0x12, r24	; 18
     e66:	08 95       	ret

00000e68 <DIO_u8GetPinValue>:
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 DIO_u8GetPinValue (u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	switch (Copy_u8PORT)
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	d1 f0       	breq	.+52     	; 0xea0 <DIO_u8GetPinValue+0x38>
     e6c:	28 f0       	brcs	.+10     	; 0xe78 <DIO_u8GetPinValue+0x10>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	59 f1       	breq	.+86     	; 0xec8 <DIO_u8GetPinValue+0x60>
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	e9 f1       	breq	.+122    	; 0xef0 <DIO_u8GetPinValue+0x88>
     e76:	50 c0       	rjmp	.+160    	; 0xf18 <DIO_u8GetPinValue+0xb0>
	{
		case PORTA_ID: return GET_BIT(PINA,Copy_u8PIN);
     e78:	49 b3       	in	r20, 0x19	; 25
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	9c 01       	movw	r18, r24
     e80:	06 2e       	mov	r0, r22
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_u8GetPinValue+0x20>
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_u8GetPinValue+0x1c>
     e8c:	84 2f       	mov	r24, r20
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	82 23       	and	r24, r18
     e92:	93 23       	and	r25, r19
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <DIO_u8GetPinValue+0x32>
     e96:	95 95       	asr	r25
     e98:	87 95       	ror	r24
     e9a:	6a 95       	dec	r22
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <DIO_u8GetPinValue+0x2e>
     e9e:	08 95       	ret
		case PORTB_ID: return GET_BIT(PINB,Copy_u8PIN);
     ea0:	46 b3       	in	r20, 0x16	; 22
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 01       	movw	r18, r24
     ea8:	06 2e       	mov	r0, r22
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_u8GetPinValue+0x48>
     eac:	22 0f       	add	r18, r18
     eae:	33 1f       	adc	r19, r19
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_u8GetPinValue+0x44>
     eb4:	84 2f       	mov	r24, r20
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	82 23       	and	r24, r18
     eba:	93 23       	and	r25, r19
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <DIO_u8GetPinValue+0x5a>
     ebe:	95 95       	asr	r25
     ec0:	87 95       	ror	r24
     ec2:	6a 95       	dec	r22
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <DIO_u8GetPinValue+0x56>
     ec6:	08 95       	ret
		case PORTC_ID: return GET_BIT(PINC,Copy_u8PIN);
     ec8:	43 b3       	in	r20, 0x13	; 19
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	9c 01       	movw	r18, r24
     ed0:	06 2e       	mov	r0, r22
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_u8GetPinValue+0x70>
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_u8GetPinValue+0x6c>
     edc:	84 2f       	mov	r24, r20
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	82 23       	and	r24, r18
     ee2:	93 23       	and	r25, r19
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_u8GetPinValue+0x82>
     ee6:	95 95       	asr	r25
     ee8:	87 95       	ror	r24
     eea:	6a 95       	dec	r22
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_u8GetPinValue+0x7e>
     eee:	08 95       	ret
		case PORTD_ID: return GET_BIT(PIND,Copy_u8PIN);
     ef0:	40 b3       	in	r20, 0x10	; 16
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	9c 01       	movw	r18, r24
     ef8:	06 2e       	mov	r0, r22
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_u8GetPinValue+0x98>
     efc:	22 0f       	add	r18, r18
     efe:	33 1f       	adc	r19, r19
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_u8GetPinValue+0x94>
     f04:	84 2f       	mov	r24, r20
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	82 23       	and	r24, r18
     f0a:	93 23       	and	r25, r19
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <DIO_u8GetPinValue+0xaa>
     f0e:	95 95       	asr	r25
     f10:	87 95       	ror	r24
     f12:	6a 95       	dec	r22
     f14:	e2 f7       	brpl	.-8      	; 0xf0e <DIO_u8GetPinValue+0xa6>
     f16:	08 95       	ret
	}
}
     f18:	08 95       	ret

00000f1a <DIO_voidSetPortDirection>:
 */
void DIO_voidSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
	
		/* Setup the port direction as required */
		switch (Copy_u8PORT)
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	41 f0       	breq	.+16     	; 0xf2e <DIO_voidSetPortDirection+0x14>
     f1e:	28 f0       	brcs	.+10     	; 0xf2a <DIO_voidSetPortDirection+0x10>
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	39 f0       	breq	.+14     	; 0xf32 <DIO_voidSetPortDirection+0x18>
     f24:	83 30       	cpi	r24, 0x03	; 3
     f26:	39 f0       	breq	.+14     	; 0xf36 <DIO_voidSetPortDirection+0x1c>
     f28:	08 95       	ret
		{
			case PORTA_ID: DDRA = Copy_u8Direction; break;
     f2a:	6a bb       	out	0x1a, r22	; 26
     f2c:	08 95       	ret
			case PORTB_ID: DDRB = Copy_u8Direction; break;
     f2e:	67 bb       	out	0x17, r22	; 23
     f30:	08 95       	ret
			case PORTC_ID: DDRC = Copy_u8Direction; break;
     f32:	64 bb       	out	0x14, r22	; 20
     f34:	08 95       	ret
			case PORTD_ID: DDRD = Copy_u8Direction; break;
     f36:	61 bb       	out	0x11, r22	; 17
     f38:	08 95       	ret

00000f3a <DIO_voidSetPortValue>:
 */
void DIO_voidSetPortValue  (u8 Copy_u8PORT , u8 Copy_u8Value )
{
	
		/* Write the port value as required */
		switch (Copy_u8PORT)
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	41 f0       	breq	.+16     	; 0xf4e <DIO_voidSetPortValue+0x14>
     f3e:	28 f0       	brcs	.+10     	; 0xf4a <DIO_voidSetPortValue+0x10>
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	39 f0       	breq	.+14     	; 0xf52 <DIO_voidSetPortValue+0x18>
     f44:	83 30       	cpi	r24, 0x03	; 3
     f46:	39 f0       	breq	.+14     	; 0xf56 <DIO_voidSetPortValue+0x1c>
     f48:	08 95       	ret
		{
			case PORTA_ID: PORTA = Copy_u8Value; break;
     f4a:	6b bb       	out	0x1b, r22	; 27
     f4c:	08 95       	ret
			case PORTB_ID: PORTB = Copy_u8Value; break;
     f4e:	68 bb       	out	0x18, r22	; 24
     f50:	08 95       	ret
			case PORTC_ID: PORTC = Copy_u8Value; break;
     f52:	65 bb       	out	0x15, r22	; 21
     f54:	08 95       	ret
			case PORTD_ID: PORTD = Copy_u8Value; break;
     f56:	62 bb       	out	0x12, r22	; 18
     f58:	08 95       	ret

00000f5a <__vector_1>:
}


void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	2f 93       	push	r18
     f66:	3f 93       	push	r19
     f68:	4f 93       	push	r20
     f6a:	5f 93       	push	r21
     f6c:	6f 93       	push	r22
     f6e:	7f 93       	push	r23
     f70:	8f 93       	push	r24
     f72:	9f 93       	push	r25
     f74:	af 93       	push	r26
     f76:	bf 93       	push	r27
     f78:	ef 93       	push	r30
     f7a:	ff 93       	push	r31

	if( EXTI_CallBack[0] != NULL ){
     f7c:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <EXTI_CallBack>
     f80:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <EXTI_CallBack+0x1>
     f84:	30 97       	sbiw	r30, 0x00	; 0
     f86:	09 f0       	breq	.+2      	; 0xf8a <__vector_1+0x30>

		EXTI_CallBack[0](); /*  Call The Global Pointer to Func   */
     f88:	09 95       	icall


	}

}
     f8a:	ff 91       	pop	r31
     f8c:	ef 91       	pop	r30
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     fac:	1f 92       	push	r1
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31

	if( EXTI_CallBack[1] != NULL ){
     fce:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <EXTI_CallBack+0x2>
     fd2:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <EXTI_CallBack+0x3>
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__vector_2+0x30>

		EXTI_CallBack[1]();
     fda:	09 95       	icall
		

	}

}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31

	if( EXTI_CallBack[2] != NULL ){
    1020:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <EXTI_CallBack+0x4>
    1024:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <EXTI_CallBack+0x5>
    1028:	30 97       	sbiw	r30, 0x00	; 0
    102a:	09 f0       	breq	.+2      	; 0x102e <__vector_3+0x30>

		EXTI_CallBack[2]();
    102c:	09 95       	icall
		

	}

    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <atoi>:
    1050:	fc 01       	movw	r30, r24
    1052:	88 27       	eor	r24, r24
    1054:	99 27       	eor	r25, r25
    1056:	e8 94       	clt
    1058:	21 91       	ld	r18, Z+
    105a:	20 32       	cpi	r18, 0x20	; 32
    105c:	e9 f3       	breq	.-6      	; 0x1058 <atoi+0x8>
    105e:	29 30       	cpi	r18, 0x09	; 9
    1060:	10 f0       	brcs	.+4      	; 0x1066 <atoi+0x16>
    1062:	2e 30       	cpi	r18, 0x0E	; 14
    1064:	c8 f3       	brcs	.-14     	; 0x1058 <atoi+0x8>
    1066:	2b 32       	cpi	r18, 0x2B	; 43
    1068:	41 f0       	breq	.+16     	; 0x107a <atoi+0x2a>
    106a:	2d 32       	cpi	r18, 0x2D	; 45
    106c:	39 f4       	brne	.+14     	; 0x107c <atoi+0x2c>
    106e:	68 94       	set
    1070:	04 c0       	rjmp	.+8      	; 0x107a <atoi+0x2a>
    1072:	0e 94 56 08 	call	0x10ac	; 0x10ac <__mulhi_const_10>
    1076:	82 0f       	add	r24, r18
    1078:	91 1d       	adc	r25, r1
    107a:	21 91       	ld	r18, Z+
    107c:	20 53       	subi	r18, 0x30	; 48
    107e:	2a 30       	cpi	r18, 0x0A	; 10
    1080:	c0 f3       	brcs	.-16     	; 0x1072 <atoi+0x22>
    1082:	1e f4       	brtc	.+6      	; 0x108a <atoi+0x3a>
    1084:	90 95       	com	r25
    1086:	81 95       	neg	r24
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	08 95       	ret

0000108c <strcmp>:
    108c:	fb 01       	movw	r30, r22
    108e:	dc 01       	movw	r26, r24
    1090:	8d 91       	ld	r24, X+
    1092:	01 90       	ld	r0, Z+
    1094:	80 19       	sub	r24, r0
    1096:	01 10       	cpse	r0, r1
    1098:	d9 f3       	breq	.-10     	; 0x1090 <strcmp+0x4>
    109a:	99 0b       	sbc	r25, r25
    109c:	08 95       	ret

0000109e <strcpy>:
    109e:	fb 01       	movw	r30, r22
    10a0:	dc 01       	movw	r26, r24
    10a2:	01 90       	ld	r0, Z+
    10a4:	0d 92       	st	X+, r0
    10a6:	00 20       	and	r0, r0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <strcpy+0x4>
    10aa:	08 95       	ret

000010ac <__mulhi_const_10>:
    10ac:	7a e0       	ldi	r23, 0x0A	; 10
    10ae:	97 9f       	mul	r25, r23
    10b0:	90 2d       	mov	r25, r0
    10b2:	87 9f       	mul	r24, r23
    10b4:	80 2d       	mov	r24, r0
    10b6:	91 0d       	add	r25, r1
    10b8:	11 24       	eor	r1, r1
    10ba:	08 95       	ret

000010bc <sprintf>:
    10bc:	ae e0       	ldi	r26, 0x0E	; 14
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e4 e6       	ldi	r30, 0x64	; 100
    10c2:	f8 e0       	ldi	r31, 0x08	; 8
    10c4:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__prologue_saves__+0x1c>
    10c8:	0d 89       	ldd	r16, Y+21	; 0x15
    10ca:	1e 89       	ldd	r17, Y+22	; 0x16
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	8c 83       	std	Y+4, r24	; 0x04
    10d0:	1a 83       	std	Y+2, r17	; 0x02
    10d2:	09 83       	std	Y+1, r16	; 0x01
    10d4:	8f ef       	ldi	r24, 0xFF	; 255
    10d6:	9f e7       	ldi	r25, 0x7F	; 127
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	ae 01       	movw	r20, r28
    10de:	47 5e       	subi	r20, 0xE7	; 231
    10e0:	5f 4f       	sbci	r21, 0xFF	; 255
    10e2:	6f 89       	ldd	r22, Y+23	; 0x17
    10e4:	78 8d       	ldd	r23, Y+24	; 0x18
    10e6:	ce 01       	movw	r24, r28
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	0e 94 80 08 	call	0x1100	; 0x1100 <vfprintf>
    10ee:	ef 81       	ldd	r30, Y+7	; 0x07
    10f0:	f8 85       	ldd	r31, Y+8	; 0x08
    10f2:	e0 0f       	add	r30, r16
    10f4:	f1 1f       	adc	r31, r17
    10f6:	10 82       	st	Z, r1
    10f8:	2e 96       	adiw	r28, 0x0e	; 14
    10fa:	e4 e0       	ldi	r30, 0x04	; 4
    10fc:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__epilogue_restores__+0x1c>

00001100 <vfprintf>:
    1100:	ab e0       	ldi	r26, 0x0B	; 11
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e8       	ldi	r30, 0x86	; 134
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__prologue_saves__>
    110c:	6c 01       	movw	r12, r24
    110e:	7b 01       	movw	r14, r22
    1110:	8a 01       	movw	r16, r20
    1112:	fc 01       	movw	r30, r24
    1114:	17 82       	std	Z+7, r1	; 0x07
    1116:	16 82       	std	Z+6, r1	; 0x06
    1118:	83 81       	ldd	r24, Z+3	; 0x03
    111a:	81 ff       	sbrs	r24, 1
    111c:	cc c1       	rjmp	.+920    	; 0x14b6 <vfprintf+0x3b6>
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	3c 01       	movw	r6, r24
    1124:	f6 01       	movw	r30, r12
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	f7 01       	movw	r30, r14
    112a:	93 fd       	sbrc	r25, 3
    112c:	85 91       	lpm	r24, Z+
    112e:	93 ff       	sbrs	r25, 3
    1130:	81 91       	ld	r24, Z+
    1132:	7f 01       	movw	r14, r30
    1134:	88 23       	and	r24, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <vfprintf+0x3a>
    1138:	ba c1       	rjmp	.+884    	; 0x14ae <vfprintf+0x3ae>
    113a:	85 32       	cpi	r24, 0x25	; 37
    113c:	39 f4       	brne	.+14     	; 0x114c <vfprintf+0x4c>
    113e:	93 fd       	sbrc	r25, 3
    1140:	85 91       	lpm	r24, Z+
    1142:	93 ff       	sbrs	r25, 3
    1144:	81 91       	ld	r24, Z+
    1146:	7f 01       	movw	r14, r30
    1148:	85 32       	cpi	r24, 0x25	; 37
    114a:	29 f4       	brne	.+10     	; 0x1156 <vfprintf+0x56>
    114c:	b6 01       	movw	r22, r12
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1154:	e7 cf       	rjmp	.-50     	; 0x1124 <vfprintf+0x24>
    1156:	91 2c       	mov	r9, r1
    1158:	21 2c       	mov	r2, r1
    115a:	31 2c       	mov	r3, r1
    115c:	ff e1       	ldi	r31, 0x1F	; 31
    115e:	f3 15       	cp	r31, r3
    1160:	d8 f0       	brcs	.+54     	; 0x1198 <vfprintf+0x98>
    1162:	8b 32       	cpi	r24, 0x2B	; 43
    1164:	79 f0       	breq	.+30     	; 0x1184 <vfprintf+0x84>
    1166:	38 f4       	brcc	.+14     	; 0x1176 <vfprintf+0x76>
    1168:	80 32       	cpi	r24, 0x20	; 32
    116a:	79 f0       	breq	.+30     	; 0x118a <vfprintf+0x8a>
    116c:	83 32       	cpi	r24, 0x23	; 35
    116e:	a1 f4       	brne	.+40     	; 0x1198 <vfprintf+0x98>
    1170:	23 2d       	mov	r18, r3
    1172:	20 61       	ori	r18, 0x10	; 16
    1174:	1d c0       	rjmp	.+58     	; 0x11b0 <vfprintf+0xb0>
    1176:	8d 32       	cpi	r24, 0x2D	; 45
    1178:	61 f0       	breq	.+24     	; 0x1192 <vfprintf+0x92>
    117a:	80 33       	cpi	r24, 0x30	; 48
    117c:	69 f4       	brne	.+26     	; 0x1198 <vfprintf+0x98>
    117e:	23 2d       	mov	r18, r3
    1180:	21 60       	ori	r18, 0x01	; 1
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <vfprintf+0xb0>
    1184:	83 2d       	mov	r24, r3
    1186:	82 60       	ori	r24, 0x02	; 2
    1188:	38 2e       	mov	r3, r24
    118a:	e3 2d       	mov	r30, r3
    118c:	e4 60       	ori	r30, 0x04	; 4
    118e:	3e 2e       	mov	r3, r30
    1190:	2a c0       	rjmp	.+84     	; 0x11e6 <vfprintf+0xe6>
    1192:	f3 2d       	mov	r31, r3
    1194:	f8 60       	ori	r31, 0x08	; 8
    1196:	1d c0       	rjmp	.+58     	; 0x11d2 <vfprintf+0xd2>
    1198:	37 fc       	sbrc	r3, 7
    119a:	2d c0       	rjmp	.+90     	; 0x11f6 <vfprintf+0xf6>
    119c:	20 ed       	ldi	r18, 0xD0	; 208
    119e:	28 0f       	add	r18, r24
    11a0:	2a 30       	cpi	r18, 0x0A	; 10
    11a2:	40 f0       	brcs	.+16     	; 0x11b4 <vfprintf+0xb4>
    11a4:	8e 32       	cpi	r24, 0x2E	; 46
    11a6:	b9 f4       	brne	.+46     	; 0x11d6 <vfprintf+0xd6>
    11a8:	36 fc       	sbrc	r3, 6
    11aa:	81 c1       	rjmp	.+770    	; 0x14ae <vfprintf+0x3ae>
    11ac:	23 2d       	mov	r18, r3
    11ae:	20 64       	ori	r18, 0x40	; 64
    11b0:	32 2e       	mov	r3, r18
    11b2:	19 c0       	rjmp	.+50     	; 0x11e6 <vfprintf+0xe6>
    11b4:	36 fe       	sbrs	r3, 6
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <vfprintf+0xc4>
    11b8:	8a e0       	ldi	r24, 0x0A	; 10
    11ba:	98 9e       	mul	r9, r24
    11bc:	20 0d       	add	r18, r0
    11be:	11 24       	eor	r1, r1
    11c0:	92 2e       	mov	r9, r18
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <vfprintf+0xe6>
    11c4:	ea e0       	ldi	r30, 0x0A	; 10
    11c6:	2e 9e       	mul	r2, r30
    11c8:	20 0d       	add	r18, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	22 2e       	mov	r2, r18
    11ce:	f3 2d       	mov	r31, r3
    11d0:	f0 62       	ori	r31, 0x20	; 32
    11d2:	3f 2e       	mov	r3, r31
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <vfprintf+0xe6>
    11d6:	8c 36       	cpi	r24, 0x6C	; 108
    11d8:	21 f4       	brne	.+8      	; 0x11e2 <vfprintf+0xe2>
    11da:	83 2d       	mov	r24, r3
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	38 2e       	mov	r3, r24
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <vfprintf+0xe6>
    11e2:	88 36       	cpi	r24, 0x68	; 104
    11e4:	41 f4       	brne	.+16     	; 0x11f6 <vfprintf+0xf6>
    11e6:	f7 01       	movw	r30, r14
    11e8:	93 fd       	sbrc	r25, 3
    11ea:	85 91       	lpm	r24, Z+
    11ec:	93 ff       	sbrs	r25, 3
    11ee:	81 91       	ld	r24, Z+
    11f0:	7f 01       	movw	r14, r30
    11f2:	81 11       	cpse	r24, r1
    11f4:	b3 cf       	rjmp	.-154    	; 0x115c <vfprintf+0x5c>
    11f6:	98 2f       	mov	r25, r24
    11f8:	9f 7d       	andi	r25, 0xDF	; 223
    11fa:	95 54       	subi	r25, 0x45	; 69
    11fc:	93 30       	cpi	r25, 0x03	; 3
    11fe:	28 f4       	brcc	.+10     	; 0x120a <vfprintf+0x10a>
    1200:	0c 5f       	subi	r16, 0xFC	; 252
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	9f e3       	ldi	r25, 0x3F	; 63
    1206:	99 83       	std	Y+1, r25	; 0x01
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <vfprintf+0x124>
    120a:	83 36       	cpi	r24, 0x63	; 99
    120c:	31 f0       	breq	.+12     	; 0x121a <vfprintf+0x11a>
    120e:	83 37       	cpi	r24, 0x73	; 115
    1210:	71 f0       	breq	.+28     	; 0x122e <vfprintf+0x12e>
    1212:	83 35       	cpi	r24, 0x53	; 83
    1214:	09 f0       	breq	.+2      	; 0x1218 <vfprintf+0x118>
    1216:	59 c0       	rjmp	.+178    	; 0x12ca <vfprintf+0x1ca>
    1218:	21 c0       	rjmp	.+66     	; 0x125c <vfprintf+0x15c>
    121a:	f8 01       	movw	r30, r16
    121c:	80 81       	ld	r24, Z
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	0e 5f       	subi	r16, 0xFE	; 254
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	88 24       	eor	r8, r8
    1226:	83 94       	inc	r8
    1228:	91 2c       	mov	r9, r1
    122a:	53 01       	movw	r10, r6
    122c:	13 c0       	rjmp	.+38     	; 0x1254 <vfprintf+0x154>
    122e:	28 01       	movw	r4, r16
    1230:	f2 e0       	ldi	r31, 0x02	; 2
    1232:	4f 0e       	add	r4, r31
    1234:	51 1c       	adc	r5, r1
    1236:	f8 01       	movw	r30, r16
    1238:	a0 80       	ld	r10, Z
    123a:	b1 80       	ldd	r11, Z+1	; 0x01
    123c:	36 fe       	sbrs	r3, 6
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <vfprintf+0x146>
    1240:	69 2d       	mov	r22, r9
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <vfprintf+0x14a>
    1246:	6f ef       	ldi	r22, 0xFF	; 255
    1248:	7f ef       	ldi	r23, 0xFF	; 255
    124a:	c5 01       	movw	r24, r10
    124c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <strnlen>
    1250:	4c 01       	movw	r8, r24
    1252:	82 01       	movw	r16, r4
    1254:	f3 2d       	mov	r31, r3
    1256:	ff 77       	andi	r31, 0x7F	; 127
    1258:	3f 2e       	mov	r3, r31
    125a:	16 c0       	rjmp	.+44     	; 0x1288 <vfprintf+0x188>
    125c:	28 01       	movw	r4, r16
    125e:	22 e0       	ldi	r18, 0x02	; 2
    1260:	42 0e       	add	r4, r18
    1262:	51 1c       	adc	r5, r1
    1264:	f8 01       	movw	r30, r16
    1266:	a0 80       	ld	r10, Z
    1268:	b1 80       	ldd	r11, Z+1	; 0x01
    126a:	36 fe       	sbrs	r3, 6
    126c:	03 c0       	rjmp	.+6      	; 0x1274 <vfprintf+0x174>
    126e:	69 2d       	mov	r22, r9
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <vfprintf+0x178>
    1274:	6f ef       	ldi	r22, 0xFF	; 255
    1276:	7f ef       	ldi	r23, 0xFF	; 255
    1278:	c5 01       	movw	r24, r10
    127a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <strnlen_P>
    127e:	4c 01       	movw	r8, r24
    1280:	f3 2d       	mov	r31, r3
    1282:	f0 68       	ori	r31, 0x80	; 128
    1284:	3f 2e       	mov	r3, r31
    1286:	82 01       	movw	r16, r4
    1288:	33 fc       	sbrc	r3, 3
    128a:	1b c0       	rjmp	.+54     	; 0x12c2 <vfprintf+0x1c2>
    128c:	82 2d       	mov	r24, r2
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	88 16       	cp	r8, r24
    1292:	99 06       	cpc	r9, r25
    1294:	b0 f4       	brcc	.+44     	; 0x12c2 <vfprintf+0x1c2>
    1296:	b6 01       	movw	r22, r12
    1298:	80 e2       	ldi	r24, 0x20	; 32
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    12a0:	2a 94       	dec	r2
    12a2:	f4 cf       	rjmp	.-24     	; 0x128c <vfprintf+0x18c>
    12a4:	f5 01       	movw	r30, r10
    12a6:	37 fc       	sbrc	r3, 7
    12a8:	85 91       	lpm	r24, Z+
    12aa:	37 fe       	sbrs	r3, 7
    12ac:	81 91       	ld	r24, Z+
    12ae:	5f 01       	movw	r10, r30
    12b0:	b6 01       	movw	r22, r12
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    12b8:	21 10       	cpse	r2, r1
    12ba:	2a 94       	dec	r2
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	82 1a       	sub	r8, r18
    12c0:	91 08       	sbc	r9, r1
    12c2:	81 14       	cp	r8, r1
    12c4:	91 04       	cpc	r9, r1
    12c6:	71 f7       	brne	.-36     	; 0x12a4 <vfprintf+0x1a4>
    12c8:	e8 c0       	rjmp	.+464    	; 0x149a <vfprintf+0x39a>
    12ca:	84 36       	cpi	r24, 0x64	; 100
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <vfprintf+0x1d2>
    12ce:	89 36       	cpi	r24, 0x69	; 105
    12d0:	41 f5       	brne	.+80     	; 0x1322 <vfprintf+0x222>
    12d2:	f8 01       	movw	r30, r16
    12d4:	37 fe       	sbrs	r3, 7
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <vfprintf+0x1e6>
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	0c 5f       	subi	r16, 0xFC	; 252
    12e2:	1f 4f       	sbci	r17, 0xFF	; 255
    12e4:	08 c0       	rjmp	.+16     	; 0x12f6 <vfprintf+0x1f6>
    12e6:	60 81       	ld	r22, Z
    12e8:	71 81       	ldd	r23, Z+1	; 0x01
    12ea:	07 2e       	mov	r0, r23
    12ec:	00 0c       	add	r0, r0
    12ee:	88 0b       	sbc	r24, r24
    12f0:	99 0b       	sbc	r25, r25
    12f2:	0e 5f       	subi	r16, 0xFE	; 254
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	f3 2d       	mov	r31, r3
    12f8:	ff 76       	andi	r31, 0x6F	; 111
    12fa:	3f 2e       	mov	r3, r31
    12fc:	97 ff       	sbrs	r25, 7
    12fe:	09 c0       	rjmp	.+18     	; 0x1312 <vfprintf+0x212>
    1300:	90 95       	com	r25
    1302:	80 95       	com	r24
    1304:	70 95       	com	r23
    1306:	61 95       	neg	r22
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8f 4f       	sbci	r24, 0xFF	; 255
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	f0 68       	ori	r31, 0x80	; 128
    1310:	3f 2e       	mov	r3, r31
    1312:	2a e0       	ldi	r18, 0x0A	; 10
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	a3 01       	movw	r20, r6
    1318:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ultoa_invert>
    131c:	88 2e       	mov	r8, r24
    131e:	86 18       	sub	r8, r6
    1320:	45 c0       	rjmp	.+138    	; 0x13ac <vfprintf+0x2ac>
    1322:	85 37       	cpi	r24, 0x75	; 117
    1324:	31 f4       	brne	.+12     	; 0x1332 <vfprintf+0x232>
    1326:	23 2d       	mov	r18, r3
    1328:	2f 7e       	andi	r18, 0xEF	; 239
    132a:	b2 2e       	mov	r11, r18
    132c:	2a e0       	ldi	r18, 0x0A	; 10
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	25 c0       	rjmp	.+74     	; 0x137c <vfprintf+0x27c>
    1332:	93 2d       	mov	r25, r3
    1334:	99 7f       	andi	r25, 0xF9	; 249
    1336:	b9 2e       	mov	r11, r25
    1338:	8f 36       	cpi	r24, 0x6F	; 111
    133a:	c1 f0       	breq	.+48     	; 0x136c <vfprintf+0x26c>
    133c:	18 f4       	brcc	.+6      	; 0x1344 <vfprintf+0x244>
    133e:	88 35       	cpi	r24, 0x58	; 88
    1340:	79 f0       	breq	.+30     	; 0x1360 <vfprintf+0x260>
    1342:	b5 c0       	rjmp	.+362    	; 0x14ae <vfprintf+0x3ae>
    1344:	80 37       	cpi	r24, 0x70	; 112
    1346:	19 f0       	breq	.+6      	; 0x134e <vfprintf+0x24e>
    1348:	88 37       	cpi	r24, 0x78	; 120
    134a:	21 f0       	breq	.+8      	; 0x1354 <vfprintf+0x254>
    134c:	b0 c0       	rjmp	.+352    	; 0x14ae <vfprintf+0x3ae>
    134e:	e9 2f       	mov	r30, r25
    1350:	e0 61       	ori	r30, 0x10	; 16
    1352:	be 2e       	mov	r11, r30
    1354:	b4 fe       	sbrs	r11, 4
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <vfprintf+0x272>
    1358:	fb 2d       	mov	r31, r11
    135a:	f4 60       	ori	r31, 0x04	; 4
    135c:	bf 2e       	mov	r11, r31
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <vfprintf+0x272>
    1360:	34 fe       	sbrs	r3, 4
    1362:	0a c0       	rjmp	.+20     	; 0x1378 <vfprintf+0x278>
    1364:	29 2f       	mov	r18, r25
    1366:	26 60       	ori	r18, 0x06	; 6
    1368:	b2 2e       	mov	r11, r18
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <vfprintf+0x278>
    136c:	28 e0       	ldi	r18, 0x08	; 8
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	05 c0       	rjmp	.+10     	; 0x137c <vfprintf+0x27c>
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x27c>
    1378:	20 e1       	ldi	r18, 0x10	; 16
    137a:	32 e0       	ldi	r19, 0x02	; 2
    137c:	f8 01       	movw	r30, r16
    137e:	b7 fe       	sbrs	r11, 7
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <vfprintf+0x290>
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	82 81       	ldd	r24, Z+2	; 0x02
    1388:	93 81       	ldd	r25, Z+3	; 0x03
    138a:	0c 5f       	subi	r16, 0xFC	; 252
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x29c>
    1390:	60 81       	ld	r22, Z
    1392:	71 81       	ldd	r23, Z+1	; 0x01
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 5f       	subi	r16, 0xFE	; 254
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	a3 01       	movw	r20, r6
    139e:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ultoa_invert>
    13a2:	88 2e       	mov	r8, r24
    13a4:	86 18       	sub	r8, r6
    13a6:	fb 2d       	mov	r31, r11
    13a8:	ff 77       	andi	r31, 0x7F	; 127
    13aa:	3f 2e       	mov	r3, r31
    13ac:	36 fe       	sbrs	r3, 6
    13ae:	0d c0       	rjmp	.+26     	; 0x13ca <vfprintf+0x2ca>
    13b0:	23 2d       	mov	r18, r3
    13b2:	2e 7f       	andi	r18, 0xFE	; 254
    13b4:	a2 2e       	mov	r10, r18
    13b6:	89 14       	cp	r8, r9
    13b8:	58 f4       	brcc	.+22     	; 0x13d0 <vfprintf+0x2d0>
    13ba:	34 fe       	sbrs	r3, 4
    13bc:	0b c0       	rjmp	.+22     	; 0x13d4 <vfprintf+0x2d4>
    13be:	32 fc       	sbrc	r3, 2
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <vfprintf+0x2d4>
    13c2:	83 2d       	mov	r24, r3
    13c4:	8e 7e       	andi	r24, 0xEE	; 238
    13c6:	a8 2e       	mov	r10, r24
    13c8:	05 c0       	rjmp	.+10     	; 0x13d4 <vfprintf+0x2d4>
    13ca:	b8 2c       	mov	r11, r8
    13cc:	a3 2c       	mov	r10, r3
    13ce:	03 c0       	rjmp	.+6      	; 0x13d6 <vfprintf+0x2d6>
    13d0:	b8 2c       	mov	r11, r8
    13d2:	01 c0       	rjmp	.+2      	; 0x13d6 <vfprintf+0x2d6>
    13d4:	b9 2c       	mov	r11, r9
    13d6:	a4 fe       	sbrs	r10, 4
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <vfprintf+0x2f8>
    13da:	fe 01       	movw	r30, r28
    13dc:	e8 0d       	add	r30, r8
    13de:	f1 1d       	adc	r31, r1
    13e0:	80 81       	ld	r24, Z
    13e2:	80 33       	cpi	r24, 0x30	; 48
    13e4:	21 f4       	brne	.+8      	; 0x13ee <vfprintf+0x2ee>
    13e6:	9a 2d       	mov	r25, r10
    13e8:	99 7e       	andi	r25, 0xE9	; 233
    13ea:	a9 2e       	mov	r10, r25
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <vfprintf+0x300>
    13ee:	a2 fe       	sbrs	r10, 2
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <vfprintf+0x2fe>
    13f2:	b3 94       	inc	r11
    13f4:	b3 94       	inc	r11
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <vfprintf+0x300>
    13f8:	8a 2d       	mov	r24, r10
    13fa:	86 78       	andi	r24, 0x86	; 134
    13fc:	09 f0       	breq	.+2      	; 0x1400 <vfprintf+0x300>
    13fe:	b3 94       	inc	r11
    1400:	a3 fc       	sbrc	r10, 3
    1402:	11 c0       	rjmp	.+34     	; 0x1426 <vfprintf+0x326>
    1404:	a0 fe       	sbrs	r10, 0
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <vfprintf+0x314>
    1408:	b2 14       	cp	r11, r2
    140a:	88 f4       	brcc	.+34     	; 0x142e <vfprintf+0x32e>
    140c:	28 0c       	add	r2, r8
    140e:	92 2c       	mov	r9, r2
    1410:	9b 18       	sub	r9, r11
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <vfprintf+0x330>
    1414:	b2 14       	cp	r11, r2
    1416:	60 f4       	brcc	.+24     	; 0x1430 <vfprintf+0x330>
    1418:	b6 01       	movw	r22, r12
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1422:	b3 94       	inc	r11
    1424:	f7 cf       	rjmp	.-18     	; 0x1414 <vfprintf+0x314>
    1426:	b2 14       	cp	r11, r2
    1428:	18 f4       	brcc	.+6      	; 0x1430 <vfprintf+0x330>
    142a:	2b 18       	sub	r2, r11
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <vfprintf+0x332>
    142e:	98 2c       	mov	r9, r8
    1430:	21 2c       	mov	r2, r1
    1432:	a4 fe       	sbrs	r10, 4
    1434:	10 c0       	rjmp	.+32     	; 0x1456 <vfprintf+0x356>
    1436:	b6 01       	movw	r22, r12
    1438:	80 e3       	ldi	r24, 0x30	; 48
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1440:	a2 fe       	sbrs	r10, 2
    1442:	17 c0       	rjmp	.+46     	; 0x1472 <vfprintf+0x372>
    1444:	a1 fc       	sbrc	r10, 1
    1446:	03 c0       	rjmp	.+6      	; 0x144e <vfprintf+0x34e>
    1448:	88 e7       	ldi	r24, 0x78	; 120
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <vfprintf+0x352>
    144e:	88 e5       	ldi	r24, 0x58	; 88
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	b6 01       	movw	r22, r12
    1454:	0c c0       	rjmp	.+24     	; 0x146e <vfprintf+0x36e>
    1456:	8a 2d       	mov	r24, r10
    1458:	86 78       	andi	r24, 0x86	; 134
    145a:	59 f0       	breq	.+22     	; 0x1472 <vfprintf+0x372>
    145c:	a1 fe       	sbrs	r10, 1
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0x364>
    1460:	8b e2       	ldi	r24, 0x2B	; 43
    1462:	01 c0       	rjmp	.+2      	; 0x1466 <vfprintf+0x366>
    1464:	80 e2       	ldi	r24, 0x20	; 32
    1466:	a7 fc       	sbrc	r10, 7
    1468:	8d e2       	ldi	r24, 0x2D	; 45
    146a:	b6 01       	movw	r22, r12
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1472:	89 14       	cp	r8, r9
    1474:	38 f4       	brcc	.+14     	; 0x1484 <vfprintf+0x384>
    1476:	b6 01       	movw	r22, r12
    1478:	80 e3       	ldi	r24, 0x30	; 48
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1480:	9a 94       	dec	r9
    1482:	f7 cf       	rjmp	.-18     	; 0x1472 <vfprintf+0x372>
    1484:	8a 94       	dec	r8
    1486:	f3 01       	movw	r30, r6
    1488:	e8 0d       	add	r30, r8
    148a:	f1 1d       	adc	r31, r1
    148c:	80 81       	ld	r24, Z
    148e:	b6 01       	movw	r22, r12
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    1496:	81 10       	cpse	r8, r1
    1498:	f5 cf       	rjmp	.-22     	; 0x1484 <vfprintf+0x384>
    149a:	22 20       	and	r2, r2
    149c:	09 f4       	brne	.+2      	; 0x14a0 <vfprintf+0x3a0>
    149e:	42 ce       	rjmp	.-892    	; 0x1124 <vfprintf+0x24>
    14a0:	b6 01       	movw	r22, r12
    14a2:	80 e2       	ldi	r24, 0x20	; 32
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <fputc>
    14aa:	2a 94       	dec	r2
    14ac:	f6 cf       	rjmp	.-20     	; 0x149a <vfprintf+0x39a>
    14ae:	f6 01       	movw	r30, r12
    14b0:	86 81       	ldd	r24, Z+6	; 0x06
    14b2:	97 81       	ldd	r25, Z+7	; 0x07
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <vfprintf+0x3ba>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9f ef       	ldi	r25, 0xFF	; 255
    14ba:	2b 96       	adiw	r28, 0x0b	; 11
    14bc:	e2 e1       	ldi	r30, 0x12	; 18
    14be:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__epilogue_restores__>

000014c2 <strnlen_P>:
    14c2:	fc 01       	movw	r30, r24
    14c4:	05 90       	lpm	r0, Z+
    14c6:	61 50       	subi	r22, 0x01	; 1
    14c8:	70 40       	sbci	r23, 0x00	; 0
    14ca:	01 10       	cpse	r0, r1
    14cc:	d8 f7       	brcc	.-10     	; 0x14c4 <strnlen_P+0x2>
    14ce:	80 95       	com	r24
    14d0:	90 95       	com	r25
    14d2:	8e 0f       	add	r24, r30
    14d4:	9f 1f       	adc	r25, r31
    14d6:	08 95       	ret

000014d8 <strnlen>:
    14d8:	fc 01       	movw	r30, r24
    14da:	61 50       	subi	r22, 0x01	; 1
    14dc:	70 40       	sbci	r23, 0x00	; 0
    14de:	01 90       	ld	r0, Z+
    14e0:	01 10       	cpse	r0, r1
    14e2:	d8 f7       	brcc	.-10     	; 0x14da <strnlen+0x2>
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	8e 0f       	add	r24, r30
    14ea:	9f 1f       	adc	r25, r31
    14ec:	08 95       	ret

000014ee <fputc>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	fb 01       	movw	r30, r22
    14f8:	23 81       	ldd	r18, Z+3	; 0x03
    14fa:	21 fd       	sbrc	r18, 1
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <fputc+0x16>
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	2c c0       	rjmp	.+88     	; 0x155c <fputc+0x6e>
    1504:	22 ff       	sbrs	r18, 2
    1506:	16 c0       	rjmp	.+44     	; 0x1534 <fputc+0x46>
    1508:	46 81       	ldd	r20, Z+6	; 0x06
    150a:	57 81       	ldd	r21, Z+7	; 0x07
    150c:	24 81       	ldd	r18, Z+4	; 0x04
    150e:	35 81       	ldd	r19, Z+5	; 0x05
    1510:	42 17       	cp	r20, r18
    1512:	53 07       	cpc	r21, r19
    1514:	44 f4       	brge	.+16     	; 0x1526 <fputc+0x38>
    1516:	a0 81       	ld	r26, Z
    1518:	b1 81       	ldd	r27, Z+1	; 0x01
    151a:	9d 01       	movw	r18, r26
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	31 83       	std	Z+1, r19	; 0x01
    1522:	20 83       	st	Z, r18
    1524:	8c 93       	st	X, r24
    1526:	26 81       	ldd	r18, Z+6	; 0x06
    1528:	37 81       	ldd	r19, Z+7	; 0x07
    152a:	2f 5f       	subi	r18, 0xFF	; 255
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	37 83       	std	Z+7, r19	; 0x07
    1530:	26 83       	std	Z+6, r18	; 0x06
    1532:	14 c0       	rjmp	.+40     	; 0x155c <fputc+0x6e>
    1534:	8b 01       	movw	r16, r22
    1536:	ec 01       	movw	r28, r24
    1538:	fb 01       	movw	r30, r22
    153a:	00 84       	ldd	r0, Z+8	; 0x08
    153c:	f1 85       	ldd	r31, Z+9	; 0x09
    153e:	e0 2d       	mov	r30, r0
    1540:	09 95       	icall
    1542:	89 2b       	or	r24, r25
    1544:	e1 f6       	brne	.-72     	; 0x14fe <fputc+0x10>
    1546:	d8 01       	movw	r26, r16
    1548:	16 96       	adiw	r26, 0x06	; 6
    154a:	8d 91       	ld	r24, X+
    154c:	9c 91       	ld	r25, X
    154e:	17 97       	sbiw	r26, 0x07	; 7
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	17 96       	adiw	r26, 0x07	; 7
    1554:	9c 93       	st	X, r25
    1556:	8e 93       	st	-X, r24
    1558:	16 97       	sbiw	r26, 0x06	; 6
    155a:	ce 01       	movw	r24, r28
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	08 95       	ret

00001566 <__ultoa_invert>:
    1566:	fa 01       	movw	r30, r20
    1568:	aa 27       	eor	r26, r26
    156a:	28 30       	cpi	r18, 0x08	; 8
    156c:	51 f1       	breq	.+84     	; 0x15c2 <__ultoa_invert+0x5c>
    156e:	20 31       	cpi	r18, 0x10	; 16
    1570:	81 f1       	breq	.+96     	; 0x15d2 <__ultoa_invert+0x6c>
    1572:	e8 94       	clt
    1574:	6f 93       	push	r22
    1576:	6e 7f       	andi	r22, 0xFE	; 254
    1578:	6e 5f       	subi	r22, 0xFE	; 254
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	af 4f       	sbci	r26, 0xFF	; 255
    1582:	b1 e0       	ldi	r27, 0x01	; 1
    1584:	3e d0       	rcall	.+124    	; 0x1602 <__ultoa_invert+0x9c>
    1586:	b4 e0       	ldi	r27, 0x04	; 4
    1588:	3c d0       	rcall	.+120    	; 0x1602 <__ultoa_invert+0x9c>
    158a:	67 0f       	add	r22, r23
    158c:	78 1f       	adc	r23, r24
    158e:	89 1f       	adc	r24, r25
    1590:	9a 1f       	adc	r25, r26
    1592:	a1 1d       	adc	r26, r1
    1594:	68 0f       	add	r22, r24
    1596:	79 1f       	adc	r23, r25
    1598:	8a 1f       	adc	r24, r26
    159a:	91 1d       	adc	r25, r1
    159c:	a1 1d       	adc	r26, r1
    159e:	6a 0f       	add	r22, r26
    15a0:	71 1d       	adc	r23, r1
    15a2:	81 1d       	adc	r24, r1
    15a4:	91 1d       	adc	r25, r1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	20 d0       	rcall	.+64     	; 0x15ea <__ultoa_invert+0x84>
    15aa:	09 f4       	brne	.+2      	; 0x15ae <__ultoa_invert+0x48>
    15ac:	68 94       	set
    15ae:	3f 91       	pop	r19
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	26 9f       	mul	r18, r22
    15b4:	11 24       	eor	r1, r1
    15b6:	30 19       	sub	r19, r0
    15b8:	30 5d       	subi	r19, 0xD0	; 208
    15ba:	31 93       	st	Z+, r19
    15bc:	de f6       	brtc	.-74     	; 0x1574 <__ultoa_invert+0xe>
    15be:	cf 01       	movw	r24, r30
    15c0:	08 95       	ret
    15c2:	46 2f       	mov	r20, r22
    15c4:	47 70       	andi	r20, 0x07	; 7
    15c6:	40 5d       	subi	r20, 0xD0	; 208
    15c8:	41 93       	st	Z+, r20
    15ca:	b3 e0       	ldi	r27, 0x03	; 3
    15cc:	0f d0       	rcall	.+30     	; 0x15ec <__ultoa_invert+0x86>
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__ultoa_invert+0x5c>
    15d0:	f6 cf       	rjmp	.-20     	; 0x15be <__ultoa_invert+0x58>
    15d2:	46 2f       	mov	r20, r22
    15d4:	4f 70       	andi	r20, 0x0F	; 15
    15d6:	40 5d       	subi	r20, 0xD0	; 208
    15d8:	4a 33       	cpi	r20, 0x3A	; 58
    15da:	18 f0       	brcs	.+6      	; 0x15e2 <__ultoa_invert+0x7c>
    15dc:	49 5d       	subi	r20, 0xD9	; 217
    15de:	31 fd       	sbrc	r19, 1
    15e0:	40 52       	subi	r20, 0x20	; 32
    15e2:	41 93       	st	Z+, r20
    15e4:	02 d0       	rcall	.+4      	; 0x15ea <__ultoa_invert+0x84>
    15e6:	a9 f7       	brne	.-22     	; 0x15d2 <__ultoa_invert+0x6c>
    15e8:	ea cf       	rjmp	.-44     	; 0x15be <__ultoa_invert+0x58>
    15ea:	b4 e0       	ldi	r27, 0x04	; 4
    15ec:	a6 95       	lsr	r26
    15ee:	97 95       	ror	r25
    15f0:	87 95       	ror	r24
    15f2:	77 95       	ror	r23
    15f4:	67 95       	ror	r22
    15f6:	ba 95       	dec	r27
    15f8:	c9 f7       	brne	.-14     	; 0x15ec <__ultoa_invert+0x86>
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	61 05       	cpc	r22, r1
    15fe:	71 05       	cpc	r23, r1
    1600:	08 95       	ret
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	0a 2e       	mov	r0, r26
    1608:	06 94       	lsr	r0
    160a:	57 95       	ror	r21
    160c:	47 95       	ror	r20
    160e:	37 95       	ror	r19
    1610:	27 95       	ror	r18
    1612:	ba 95       	dec	r27
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__ultoa_invert+0xa2>
    1616:	62 0f       	add	r22, r18
    1618:	73 1f       	adc	r23, r19
    161a:	84 1f       	adc	r24, r20
    161c:	95 1f       	adc	r25, r21
    161e:	a0 1d       	adc	r26, r0
    1620:	08 95       	ret

00001622 <__prologue_saves__>:
    1622:	2f 92       	push	r2
    1624:	3f 92       	push	r3
    1626:	4f 92       	push	r4
    1628:	5f 92       	push	r5
    162a:	6f 92       	push	r6
    162c:	7f 92       	push	r7
    162e:	8f 92       	push	r8
    1630:	9f 92       	push	r9
    1632:	af 92       	push	r10
    1634:	bf 92       	push	r11
    1636:	cf 92       	push	r12
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	ca 1b       	sub	r28, r26
    164c:	db 0b       	sbc	r29, r27
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	09 94       	ijmp

0000165a <__epilogue_restores__>:
    165a:	2a 88       	ldd	r2, Y+18	; 0x12
    165c:	39 88       	ldd	r3, Y+17	; 0x11
    165e:	48 88       	ldd	r4, Y+16	; 0x10
    1660:	5f 84       	ldd	r5, Y+15	; 0x0f
    1662:	6e 84       	ldd	r6, Y+14	; 0x0e
    1664:	7d 84       	ldd	r7, Y+13	; 0x0d
    1666:	8c 84       	ldd	r8, Y+12	; 0x0c
    1668:	9b 84       	ldd	r9, Y+11	; 0x0b
    166a:	aa 84       	ldd	r10, Y+10	; 0x0a
    166c:	b9 84       	ldd	r11, Y+9	; 0x09
    166e:	c8 84       	ldd	r12, Y+8	; 0x08
    1670:	df 80       	ldd	r13, Y+7	; 0x07
    1672:	ee 80       	ldd	r14, Y+6	; 0x06
    1674:	fd 80       	ldd	r15, Y+5	; 0x05
    1676:	0c 81       	ldd	r16, Y+4	; 0x04
    1678:	1b 81       	ldd	r17, Y+3	; 0x03
    167a:	aa 81       	ldd	r26, Y+2	; 0x02
    167c:	b9 81       	ldd	r27, Y+1	; 0x01
    167e:	ce 0f       	add	r28, r30
    1680:	d1 1d       	adc	r29, r1
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	ed 01       	movw	r28, r26
    168e:	08 95       	ret

00001690 <_exit>:
    1690:	f8 94       	cli

00001692 <__stop_program>:
    1692:	ff cf       	rjmp	.-2      	; 0x1692 <__stop_program>
